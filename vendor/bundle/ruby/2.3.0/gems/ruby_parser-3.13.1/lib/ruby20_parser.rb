#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby20Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-618,307,85,86,87,12,78,-618,-618,-618,79,80,-618,-618,-618,83,-618',
'81,82,84,33,34,76,77,232,-618,-618,-618,-618,88,31,30,113,112,114,115',
'-618,-618,22,-618,-618,-618,-618,-618,11,49,309,13,117,116,118,107,60',
'109,108,110,-111,111,119,120,652,105,106,-108,45,46,44,-618,-618,-618',
'-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,603,-104,-618',
'-618,-618,43,819,-618,36,649,-618,62,63,-618,-618,64,-618,38,-618,735',
'-618,48,-618,-618,-618,-618,-618,-618,-618,23,-618,-618,-618,939,103',
'95,97,98,99,101,855,759,651,96,104,-618,-618,-618,-618,-113,-618,66',
'-618,-303,93,100,102,-618,-110,-112,-303,-303,-303,281,-111,-115,-303',
'-303,-104,-303,-113,826,648,603,-94,95,252,222,223,231,-102,-116,603',
'96,603,-80,281,-99,603,-303,-303,-112,-303,-303,-303,-303,-303,941,281',
'-112,911,-114,-535,-104,-109,825,-104,-110,249,-102,222,223,251,250',
'125,232,943,-104,-536,124,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,599,598,-303,-303,-303,281,675,125,222,223',
'-303,854,124,-303,222,223,283,-433,-303,-110,-303,-108,-303,-303,-303',
'-303,-303,-303,-303,-113,-303,-614,-303,-615,-113,-614,-106,-109,-110',
'283,633,-104,-102,-110,-111,-303,-303,-303,-303,-111,-303,283,-107,125',
'-303,-303,-303,-303,124,-114,-303,-303,125,-303,125,957,232,124,125',
'124,-103,-112,-105,124,633,-100,-112,-102,-101,826,-102,771,945,-303',
'-303,772,-303,-303,-303,-303,-303,-102,283,748,477,582,581,580,232,583',
'633,635,634,638,232,633,229,880,945,610,791,-213,-618,825,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,876,880',
'-303,-303,-303,-618,675,635,634,636,-303,335,336,-303,817,818,-612,633',
'-303,-116,-303,232,-303,-303,-303,-303,-303,-303,-303,951,-303,-116',
'-303,635,634,633,-115,-618,635,634,646,-442,-611,873,-618,-303,-303',
'-618,-105,-614,-303,229,725,-618,-618,-618,-618,-303,-618,-114,-618',
'-618,725,-618,923,-618,-526,-111,-113,-524,-614,-618,-618,-526,-618',
'591,-524,-628,635,634,653,-612,633,-618,-618,-524,-618,-618,-618,-618',
'-618,-521,-618,-107,-442,-521,635,634,-521,-524,534,-442,-521,-612,-116',
'789,-524,-611,599,598,-442,-521,232,533,-618,-618,-618,-618,-618,-618',
'-618,-618,-618,-618,-618,-618,-618,-618,-442,-611,-618,-618,-618,669',
'676,725,633,232,-618,232,628,-618,592,635,634,641,-618,629,-618,-79',
'-618,-618,-618,-618,-618,-618,-618,589,-618,-618,-618,876,880,748,843',
'582,581,580,591,583,844,-535,670,-618,-618,-618,-618,-536,-618,-213',
'669,670,-618,-618,-618,-618,-111,-112,-618,-618,922,-618,582,581,580',
'923,583,635,634,631,-618,599,598,804,425,232,591,725,1035,427,426,-618',
'-618,-99,-618,-618,-618,-618,-618,-100,228,-106,-102,-104,-108,-113',
'562,614,587,561,-109,252,-115,-111,-113,592,612,596,595,599,598,1005',
'-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618,-618',
'-110,804,-618,-618,-618,725,676,249,-528,-531,-618,251,250,-618,-530',
'-528,-531,592,-618,232,-618,-530,-618,-618,-618,-618,-618,-618,-618',
'-532,-618,-618,-618,222,223,585,-532,582,581,580,589,583,228,-101,969',
'-618,-618,125,-103,663,-618,591,124,-521,-110,-281,228,-618,661,-112',
'-521,-521,-521,277,1056,-521,-521,-521,748,-521,582,581,580,587,583',
'562,523,-521,564,-521,-521,-521,596,595,599,598,222,223,521,-521,-521',
'228,-521,-521,-521,-521,-521,748,552,582,581,580,-529,583,543,544,744',
'475,748,-529,582,581,580,562,583,950,564,970,592,735,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,125,744,-521',
'-521,-521,124,-521,-521,269,270,-521,973,744,-521,-521,976,-521,978',
'-521,980,-521,747,-521,-521,-521,-521,-521,-521,-521,232,-521,982,-521',
'748,-527,582,581,580,923,583,518,-527,286,268,267,-521,-521,-521,-521',
'591,-521,125,-521,-524,508,231,124,-521,125,-521,-524,-524,-524,124',
'479,-524,-524,-524,252,-524,748,587,582,581,580,562,583,-524,564,-524',
'-524,-524,599,598,262,263,125,994,995,-524,-524,124,-524,-524,-524,-524',
'-524,478,125,476,249,428,255,124,251,250,247,248,744,1007,253,423,254',
'406,403,725,592,747,783,400,-524,-524,-524,-524,-524,-524,-524,-524',
'-524,-524,-524,-524,-524,-524,397,373,-524,-524,-524,-303,-524,-524',
'1024,1027,-524,843,-303,-524,-524,1033,-524,-615,-524,1036,-524,-303',
'-524,-524,-524,-524,-524,-524,-524,945,-524,945,-524,945,1041,585,1007',
'582,581,580,589,583,-304,232,735,-524,-524,-524,-524,-304,-524,591,-524',
'-303,1050,1052,1054,-524,-304,-524,-303,-303,-303,1056,1056,-303,-303',
'-303,334,-303,252,722,748,587,582,581,580,333,583,-303,-303,-303,596',
'595,599,598,262,263,272,-303,-303,1007,-303,-303,-303,-303,-303,748',
'725,582,581,580,249,583,255,725,251,250,247,248,744,224,253,748,254',
'582,581,580,592,583,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,221,744,-303,-303,-303,228,820,-303,-615,-614,-303',
'232,474,-303,-303,220,-303,744,-303,219,-303,475,-303,-303,-303,-303',
'-303,-303,-303,945,-303,1007,-303,748,1079,582,581,580,923,583,128,129',
'130,131,132,-303,-303,-303,-303,591,-303,722,-303,-311,725,717,228,-303',
'728,-114,-311,-311,-311,774,716,-311,-311,-311,252,-311,-294,587,776',
'523,555,732,252,-294,735,-311,-311,228,599,598,736,738,-294,740,1026',
'-311,-311,742,-311,-311,-311,-311,-311,776,751,752,249,753,-345,-533',
'251,250,247,248,249,-345,-533,232,251,250,247,248,592,755,-345,-533',
'-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311',
'705,-534,-311,-311,-311,228,-94,-311,-534,289,-311,725,1032,-311,-311',
'725,-311,-534,-311,610,-311,1030,-311,-311,-311,-311,-311,-311,-311',
'725,-311,748,-311,582,581,580,228,583,232,423,232,232,-294,540,686,-311',
'-311,-639,-311,-294,-311,778,538,783,-639,-639,-639,-311,-294,-639,-639',
'-639,585,-639,582,581,580,589,583,744,792,793,-639,-639,-639,228,794',
'-279,591,1056,805,252,1026,-639,-639,-534,-639,-639,-639,-639,-639,776',
'-534,508,252,252,508,-533,1056,1056,587,-534,901,902,-533,252,903,119',
'120,596,595,599,598,-533,-639,-639,-639,-639,-639,-639,-639,-639,-639',
'-639,-639,-639,-639,-639,232,822,-639,-639,-639,-304,272,-639,831,286',
'-639,833,-304,-639,-639,521,-639,592,-639,523,-639,-304,-639,-639,-639',
'-639,-639,-639,-639,716,-639,-639,-639,228,232,-304,286,668,286,667',
'227,286,-304,716,232,-639,-639,-639,-639,225,-639,-304,252,252,-639',
'-639,-639,-639,660,-639,-639,-639,585,-639,582,581,580,589,583,659,232',
'-278,-639,-639,232,657,650,647,591,644,640,252,871,-639,-639,232,-639',
'-639,-639,-639,-639,880,-303,725,232,616,615,262,263,-303,587,571,416',
'610,-615,-280,565,232,-303,596,595,599,598,249,-303,255,121,251,250',
'247,248,-303,559,252,910,-639,-615,-620,550,549,-303,545,-639,3,-620',
'-620,-620,286,-639,-620,-620,-620,286,-620,998,592,582,581,580,232,583',
'927,-620,-620,-620,-620,716,289,-278,-639,-639,932,541,-620,-620,936',
'-620,-620,-620,-620,-620,,,-639,,,,998,-639,582,581,580,,583,,-639,128',
'129,130,131,132,,,,-620,-620,-620,-620,-620,-620,-620,-620,-620,-620',
'-620,-620,-620,-620,,,-620,-620,-620,,,-620,,,-620,,,-620,-620,,-620',
',-620,,-620,,-620,-620,-620,-620,-620,-620,-620,,-620,-620,-620,748',
',582,581,580,923,583,128,129,130,131,132,-620,-620,-620,-620,591,-620',
'-619,-620,,,,,-620,-619,-619,-619,,,-619,-619,-619,,-619,252,,,587,',
',,,-619,-619,-619,-619,,,599,598,262,263,,-619,-619,,-619,-619,-619',
'-619,-619,128,129,130,131,132,249,,,,251,250,247,248,,,,,,,,,592,,-619',
'-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,-619,,,-619',
'-619,-619,,,-619,,,-619,,,-619,-619,,-619,,-619,,-619,,-619,-619,-619',
'-619,-619,-619,-619,,-619,-619,-619,585,,582,581,580,589,583,,,,,,-619',
'-619,-619,-619,591,-619,-295,-619,,,,,-619,-295,-295,-295,,,-295,-295',
'-295,,-295,252,,,587,,,,,,-295,-295,-295,596,595,599,598,262,263,,-295',
'-295,,-295,-295,-295,-295,-295,,,,,,249,,255,,251,250,247,248,,,,,,',
',,592,,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295',
'-295,,,-295,-295,-295,,,-295,,,-295,,,-295,-295,,-295,,-295,,-295,,-295',
'-295,-295,-295,-295,-295,-295,,-295,,-295,748,,582,581,580,923,583,',
',,,,-295,-295,-295,-295,591,-295,-441,-295,,,,,-295,-441,-441,-441,',
',-441,-441,-441,,-441,,,,587,,,,,-441,-441,-441,,,,599,598,,,,-441,-441',
',-441,-441,-441,-441,-441,,,,,,,,,,,,,,,,,,,,,,592,,-441,-441,-441,-441',
'-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,,,-441,-441,-441,',
',-441,,286,-441,,,-441,-441,,-441,,-441,,-441,,-441,-441,-441,-441,-441',
'-441,-441,,-441,-441,-441,,,,,,,,,,,,,-441,-441,,-441,,-441,,,,,,,-441',
'186,197,187,210,183,203,193,192,213,214,208,191,190,185,211,215,216',
'195,184,198,202,204,196,189,,,,205,212,207,206,199,209,194,182,201,200',
',,,,,181,188,179,180,176,177,178,136,138,,,137,,,,,,,,,170,171,,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163',
'162,,147,169,165,164,160,161,155,153,145,168,146,,,174,103,,,,,,,,,',
'104,,,,,,,,,167,,,,,175,186,197,187,210,183,203,193,192,213,214,208',
'191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205,212,207,206',
'199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178,136,138,135',
',137,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172,173',
'158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168',
'146,,,174,103,,,,,,,,,,104,,,,,,,,,167,,,,,175,186,197,187,210,183,203',
'193,192,213,214,208,191,190,185,211,215,216,195,184,198,202,204,196',
'189,,,,205,212,207,206,199,209,194,182,201,200,,,,,,181,188,179,180',
'176,177,178,136,138,413,412,137,,414,,,,,,,170,171,,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,,,,163,162,,147,169',
'165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,,,,,,,,,,,167,,,',
',175,186,197,187,210,183,203,193,192,213,214,208,191,190,185,211,215',
'216,195,184,198,202,204,196,189,,,,205,212,207,206,199,209,194,182,201',
'200,,,,,,181,188,179,180,176,177,178,136,138,,,137,,,,,,,,,170,171,',
'166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,,,,,,',
',,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,103,,,',
',,,,,,104,,,,,,,,,167,,,,,175,186,197,187,210,183,203,193,192,213,214',
'208,191,190,185,211,215,216,195,184,198,202,204,196,189,,,,205,212,207',
'206,199,209,194,182,201,200,,,,,,181,188,179,180,176,177,178,136,138',
',,137,,,,,,,,,170,171,,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145',
'168,146,,,174,103,,,,,,,,,,104,,,,,,,,,167,,,,,175,186,197,187,210,183',
'203,193,192,213,214,208,191,190,185,211,215,216,195,184,198,202,204',
'196,189,,,,205,212,207,382,381,383,380,182,201,200,,,,,,181,188,179',
'180,377,378,379,375,138,109,108,376,,111,,,,,,,170,171,,166,148,149',
'150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,389,,,,,,,,163,162',
',147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,,,,,,,,',
',,167,,,,,175,186,197,187,210,183,203,193,192,213,214,208,191,190,185',
'211,215,216,195,184,198,202,204,196,189,,,,205,212,207,206,199,209,194',
'182,201,200,,,,,,181,188,179,180,176,177,178,136,138,,,137,,,,,,,,,170',
'171,,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,',
',,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,',
',,,,,,,,,307,85,86,87,12,78,,,167,79,80,,,175,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,22,,,,,664,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259',
'269,270,264,265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38',
'249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101',
',,,96,104,,266,,-253,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,664',
'11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,252,256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263',
',43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23',
'254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102,307,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261,',
'245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247',
'248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66',
',,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259,269',
'270,264,265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249',
',255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,',
',96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252',
'256,257,258,259,269,270,264,265,260,261,,245,246,,,262,263,,43,,,36',
',,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102,307,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,256,257,258,259,269,270,264,265,260,261,,245,246,',
',262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267',
'253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,265',
'260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251',
'250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,266',
',,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259',
'269,270,264,265,260,261,,245,246,,,262,263,,43,,,36,,,62,63,,,64,,38',
'249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101',
',,,96,104,232,266,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11',
'49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,252,-640,-640,-640,-640,269,270,,,-640,-640,,,,,,262,263,,43,,,36',
',,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,252,-640,-640,-640,-640,269,270,,,-640,-640,,,,,,262,263',
',43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23',
'254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,-640,-640,-640,-640,269,270,,,-640,-640,',
',,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270,264,,260',
'261,,,,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248',
'268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,252,256,257,258,259,269,270',
'264,265,260,261,,-640,-640,,,262,263,,43,,,36,,,62,63,,,64,,38,249,',
'255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101,,,',
'96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13',
'117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252,256',
'257,258,259,269,270,,,260,261,,,,,,262,263,,43,,,36,,,62,63,,,64,,38',
'249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,252',
'-640,-640,-640,-640,269,270,,,-640,-640,,,,,,262,263,,43,,,36,,,62,63',
',,64,,38,249,,255,48,251,250,247,248,268,267,253,23,254,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,',
'11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,252,256,257,258,259,269,270,264,265,260,261,,-640,-640,,,262,263',
',43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268,267,253,23',
'254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,252,-640,-640,-640,-640,269,270,,,-640,-640,',
',,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247,248,268',
'267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,252,-640,-640,-640,-640,269,270,,,-640',
'-640,,,,,,262,263,,43,,,36,,,62,63,,,64,,38,249,,255,48,251,250,247',
'248,268,267,253,23,254,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,311,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,8,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49',
'10,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,',
'22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,311,,,62,63,,,64,,38',
',,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,307,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309',
'13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,8,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,11,49,10,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,307,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,11,49,309,13,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,311,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,748,64',
'582,581,580,589,583,48,,,,,,,,242,591,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,587,,93,100,102,85,86,87,,78,,599,598,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,592,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,748,64,582,581,580,589,583,48,,,,,,,,242',
'591,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,587,,93,100,102,85,86',
'87,,78,,599,598,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,592,,,49,,,117,116,118,107,60,109,108,110,',
'111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',748,64,582,581,580,923,583,48,,,,,,,,242,591,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,587,,93,100,102,85,86,87,,78,,599,598,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,592',
',,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,748,64,582,581,580,589,583,48',
',,,,,,,242,591,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,587,,93,100',
'102,85,86,87,,78,,599,598,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88',
'323,329,113,112,114,115,,,244,,,,592,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,748,64,582,581,580,589,583,48,,,,,,,,242,591,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,587,,93,100,102,85,86,87,,78,,599,598,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,592,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,748,64,582,581,580,589,583',
'48,,,,,,,,242,591,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,587,,93',
'100,102,85,86,87,,78,,599,598,79,80,,,,83,,81,82,84,326,327,76,77,,',
',,,88,323,329,113,112,114,115,,,244,,,,592,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,',
'243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,',
',96,104,232,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,324',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,,330,,,,,,',
',,,,,,,,,,,,,984,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,296,,48,',
',,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,22,,,,,,11,49,,13,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,',
',88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,',
',,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,',
'243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,',
',237,,,243,,,62,63,,,64,,699,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,',
',,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,',
'49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77',
',,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,316',
',,62,63,,,64,,315,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77',
',,,,,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,243',
',,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,332',
',,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,',
'243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49',
',,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,',
',,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,984,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,',
'45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,,,48,,,,,,',
',242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,125,,,,,124,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,367,,,36,,,62,63,,,64,,38',
',,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',699,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,22,,,,,,11,49,10,13,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62',
'63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,416',
'66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,',
',,88,31,30,113,112,114,115,,,22,,,,,,11,49,,13,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,433,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,433,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,',
',243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60',
'109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117',
'116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,',
',,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,232,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11',
'49,10,13,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,',
'330,,,,,,,,,,,,,,,,,,,,991,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,243,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,536,,,66,,,93,100,102,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,',
',,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45',
'46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,',
',244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,555,,62,63,,,64,,,,,,48,,,,,',
',,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112',
'114,115,,,22,,,,,,11,49,,13,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329',
'113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111',
'119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64',
',,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
'300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,113,112,114,115,,,22,,,,,,,49,,,117,116,118,107,60,109,108',
'110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,',
',,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,617,60,109',
'108,618,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,619,,,243,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,',
',,88,323,329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,617,60,109',
'108,618,,111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,619,,,243,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,',
'88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108',
'110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,',
',,237,,,243,,,62,63,,,64,,298,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,',
',117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,',
',,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,',
',,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,433,,,,48,,,,,,,,242,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114',
'115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,',
',,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120',
',105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48',
',,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113',
'112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,',
',,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,324,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,,,330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,',
'64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323',
'329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110',
',111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63',
',,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,',
',88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109',
'108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,',
'243,,,62,63,,,64,,,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326',
'327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118',
'107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,',
',,,,,237,,,243,,,62,63,,,64,,699,,296,,48,,,,,,,,242,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,',
'49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44',
',,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115',
',,244,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106',
',45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,797,,,,48,,,,,',
',,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114',
'115,,,22,,,,,,,49,,,117,116,118,107,60,109,108,110,,111,119,120,,105',
'106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112',
'114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108,110,300,111,119',
'120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,699',
',296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,301',
'93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327,76,77,,,,,',
'88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107,60,109,108',
'110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237,,,243',
',,62,63,,,64,,,,296,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82,84,326,327',
'76,77,,,,,,88,323,329,113,112,114,115,,,244,,,,,,,49,,,117,116,118,107',
'60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,,,,,,,,237',
',,243,,,62,63,,,64,,,,,,48,,,,,,,,242,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,113,112,114,115,,,22,,,,,,11,49,309,13,117,116',
'118,107,60,109,108,110,,111,119,120,,105,106,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,416,66,,,93,100,102,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,,,,49,,,117,116',
'118,107,60,109,108,110,300,111,119,120,,105,106,,45,46,44,,,,,,,,,,',
',,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,301,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,326,327,76,77,,,,,,88,323,329,113,112,114,115,,,244',
',,,,,,324,,,117,116,118,107,60,109,108,110,,111,119,120,,105,106,,,',
'330,,,,,,,,,,,,,,,,,,,,320,,,316,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,113,112,114,115,,,244,,,,',
',,49,,,117,116,118,107,60,109,108,110,300,111,119,120,,105,106,,45,46',
'44,,,,,,,,,,,,,,,,,,,,237,,,243,,,62,63,,,64,,298,,296,,48,,,,,,,,242',
',,,,103,95,97,98,99,101,,,,96,104,680,459,,,681,,66,,301,93,100,102',
',170,171,,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159,',
',,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,682,466,,,683,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,506,459,,,507',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,887,466,,,888,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',1060,466,,,1059,,,,,,167,,,170,171,175,166,148,149,150,157,154,156',
',,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,802,466,,,801,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,799,459,,,800,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,1063,459,,,1064',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,1065,466,,,1066,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,922,174,582,581',
'580,923,583,,,,,506,459,,,507,591,,,,,167,,,170,171,175,166,148,149',
'150,157,154,156,,,151,152,587,,,172,173,158,159,,,596,595,599,598,,',
',,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,',
',,,,592,680,459,,,681,,,,,,167,,,170,171,175,166,148,149,150,157,154',
'156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165',
'164,160,161,155,153,145,168,146,,,174,,,,,,,,,,682,466,,,683,,,,,,167',
',,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,709,459,,,710,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,,,462,466,,,461',
',,,,,167,,,170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172',
'173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153',
'145,168,146,,,174,,,,,,,,,,768,466,,,769,,,,,,167,,,170,171,175,166',
'148,149,150,157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,',
',163,162,,147,169,165,164,160,161,155,153,145,168,146,,,174,,,,,,,,',
',455,459,,,456,,,,,,167,,,170,171,175,166,148,149,150,157,154,156,,',
'151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147,169,165,164',
'160,161,155,153,145,168,146,,,174,,,,,,,,,,712,466,,,713,,,,,,167,,',
'170,171,175,166,148,149,150,157,154,156,,,151,152,,,,172,173,158,159',
',,,,,286,,,,,,,,163,162,,147,169,165,164,160,161,155,153,145,168,146',
',,174,,,,,,,,,,766,459,,,767,,,,,,167,,,170,171,175,166,148,149,150',
'157,154,156,,,151,152,,,,172,173,158,159,,,,,,286,,,,,,,,163,162,,147',
'169,165,164,160,161,155,153,145,168,146,,585,174,582,581,580,589,583',
'922,,582,581,580,923,583,,,591,,,,,167,,591,,585,175,582,581,580,589',
'583,,,,,,,587,,,591,,,,587,,596,595,599,598,,,,596,595,599,598,,,,,922',
'587,582,581,580,923,583,,,,596,595,599,598,,,591,,,,,592,,,,,,,592,',
',,,,,,,,587,,,,,,,,592,596,595,599,598,,,,,,,,,,,,,,,,,,,,,,,,,232,',
',,,,,,592' ]
        racc_action_table = arr = ::Array.new(25286, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'682,770,770,770,770,770,770,682,682,682,770,770,682,682,682,770,682',
'770,770,770,770,770,770,770,857,682,682,682,682,770,770,770,770,770',
'770,770,682,682,770,682,682,682,682,682,770,770,770,770,770,770,770',
'770,770,770,770,770,766,770,770,770,407,770,770,364,770,770,770,682',
'682,682,682,682,682,682,682,682,682,682,682,682,682,356,710,682,682',
'682,770,682,682,770,404,682,770,770,682,682,770,682,770,682,858,682',
'770,682,682,682,682,682,682,682,770,682,682,682,862,770,770,770,770',
'770,770,730,605,407,770,770,682,682,682,682,1064,682,770,682,801,770',
'770,770,682,1077,682,801,801,801,689,1063,615,801,801,710,801,767,832',
'404,931,704,92,482,17,17,22,766,368,884,92,954,704,29,364,357,801,801',
'1065,801,801,801,801,801,863,65,768,821,769,235,710,365,832,710,885',
'482,709,786,786,482,482,356,22,865,710,236,356,801,801,801,801,801,801',
'801,801,801,801,801,801,801,801,735,735,801,801,801,325,801,605,471',
'471,801,730,605,801,720,720,689,29,801,821,801,235,801,801,801,801,801',
'801,801,1064,801,768,801,769,1064,1065,615,236,1077,29,645,767,709,1077',
'1063,801,801,461,801,1063,801,65,368,931,461,461,461,801,931,801,461',
'461,884,461,954,884,786,884,357,954,768,1065,769,357,393,365,1065,709',
'885,687,709,619,866,461,461,619,461,461,461,461,461,709,325,747,238',
'747,747,747,471,747,395,645,645,395,720,401,439,1010,868,1010,645,476',
'887,687,461,461,461,461,461,461,461,461,461,461,461,461,461,461,754',
'754,461,461,461,712,461,393,393,393,461,44,44,461,680,681,618,409,461',
'238,461,870,461,461,461,461,461,461,461,872,461,439,461,395,395,642',
'476,887,401,401,401,837,617,747,887,461,461,802,461,887,461,20,875,887',
'802,802,802,461,712,461,802,802,881,802,970,712,381,680,681,618,712',
'887,802,381,712,970,618,62,409,409,409,618,398,802,802,618,802,802,802',
'802,802,375,712,20,837,617,642,642,375,376,314,837,617,618,20,642,376',
'617,970,970,837,617,62,313,802,802,802,802,802,802,802,802,802,802,802',
'802,802,802,837,617,802,802,802,799,802,886,391,312,802,890,385,802',
'970,398,398,398,802,385,802,310,802,802,802,802,802,802,802,732,802',
'802,802,1043,1043,950,721,950,950,950,732,950,721,41,800,802,802,462',
'802,42,802,334,455,456,462,462,462,802,799,802,462,462,976,462,976,976',
'976,976,976,391,391,391,462,732,732,907,135,996,976,894,996,135,135',
'462,462,41,462,462,462,462,462,42,366,334,455,456,41,800,348,366,976',
'348,42,483,334,455,456,732,366,976,976,976,976,950,462,462,462,462,462',
'462,462,462,462,462,462,462,462,462,907,665,462,462,462,895,462,483',
'383,377,462,483,483,462,378,383,377,976,462,896,462,378,462,462,462',
'462,462,462,462,379,462,462,462,780,780,784,379,784,784,784,784,784',
'438,665,905,462,462,5,462,438,462,784,5,107,665,906,27,462,438,462,107',
'107,107,27,1084,107,107,107,871,107,871,871,871,784,871,349,297,107',
'349,107,107,107,784,784,784,784,355,355,294,107,107,337,107,107,107',
'107,107,1005,337,1005,1005,1005,380,1005,330,330,871,337,744,380,744',
'744,744,727,744,871,727,913,784,914,107,107,107,107,107,107,107,107',
'107,107,107,107,107,107,304,1005,107,107,107,304,107,107,47,47,107,916',
'744,107,107,917,107,918,107,920,107,744,107,107,107,107,107,107,107',
'921,107,922,107,1054,382,1054,1054,1054,1054,1054,293,382,282,47,47',
'107,107,107,107,1054,107,893,107,110,278,244,893,107,897,107,110,110',
'110,897,240,110,110,110,502,110,587,1054,587,587,587,568,587,110,568',
'110,110,110,1054,1054,502,502,361,934,935,110,110,361,110,110,110,110',
'110,239,962,237,502,217,502,962,502,502,502,502,587,952,502,133,502',
'102,101,961,1054,587,968,100,110,110,110,110,110,110,110,110,110,110',
'110,110,110,110,99,73,110,110,110,713,110,110,981,984,110,986,713,110',
'110,991,110,713,110,1000,110,713,110,110,110,110,110,110,110,1001,110',
'1002,110,1003,1004,736,1006,736,736,736,736,736,541,49,1015,110,110',
'110,110,541,110,736,110,683,1018,1019,1020,110,541,110,683,683,683,1021',
'1023,683,683,683,43,683,553,1029,873,736,873,873,873,40,873,683,683',
'683,736,736,736,736,553,553,25,683,683,1042,683,683,683,683,683,1041',
'1047,1041,1041,1041,553,1041,553,1048,553,553,553,553,873,18,553,951',
'553,951,951,951,736,951,683,683,683,683,683,683,683,683,683,683,683',
'683,683,683,16,1041,683,683,683,234,683,683,1059,1060,683,1062,234,683',
'683,15,683,951,683,13,683,234,683,683,683,683,683,683,683,1068,683,1069',
'683,1079,1073,1079,1079,1079,1079,1079,558,558,558,558,558,683,683,683',
'683,1079,683,556,683,31,557,548,621,683,566,683,31,31,31,621,546,31',
'31,31,498,31,321,1079,621,569,542,573,497,321,574,31,31,983,1079,1079',
'576,577,321,578,983,31,31,585,31,31,31,31,31,983,593,597,498,600,50',
'988,498,498,498,498,497,50,988,537,497,497,497,497,1079,602,50,988,31',
'31,31,31,31,31,31,31,31,31,31,31,31,31,535,989,31,31,31,990,532,31,989',
'31,31,606,990,31,31,607,31,989,31,608,31,990,31,31,31,31,31,31,31,609',
'31,1007,31,1007,1007,1007,319,1007,531,530,515,514,992,319,503,31,31',
'457,31,992,31,623,319,626,457,457,457,31,992,457,457,457,571,457,571',
'571,571,571,571,1007,649,652,457,457,457,1025,654,658,571,1074,666,487',
'1025,457,457,318,457,457,457,457,457,1025,318,671,486,485,677,317,1075',
'1076,571,318,787,787,317,484,787,787,787,571,571,571,571,317,457,457',
'457,457,457,457,457,457,457,457,457,457,457,457,684,685,457,457,457',
'1033,688,457,691,457,457,693,1033,457,457,696,457,571,457,698,457,1033',
'457,457,457,457,457,457,457,706,457,457,457,19,708,772,463,454,711,453',
'19,714,772,715,450,457,457,505,457,19,457,772,718,719,505,505,505,457',
'436,505,505,505,354,505,354,354,354,354,354,434,726,431,505,505,731',
'429,406,403,354,400,397,489,746,505,505,749,505,505,505,505,505,756',
'888,762,765,369,367,489,489,888,354,354,363,362,888,796,350,798,888',
'354,354,354,354,489,1066,489,3,489,489,489,489,1066,346,339,806,505',
'1066,467,336,335,1066,331,505,1,467,467,467,505,505,467,467,467,329',
'467,936,354,936,936,936,324,936,830,467,467,467,467,836,323,847,505',
'505,848,320,467,467,856,467,467,467,467,467,,,505,,,,1035,505,1035,1035',
'1035,,1035,,505,529,529,529,529,529,,,,467,467,467,467,467,467,467,467',
'467,467,467,467,467,467,,,467,467,467,,,467,,,467,,,467,467,,467,,467',
',467,,467,467,467,467,467,467,467,,467,467,467,978,,978,978,978,978',
'978,308,308,308,308,308,467,467,467,467,978,467,466,467,,,,,467,466',
'466,466,,,466,466,466,,466,490,,,978,,,,,466,466,466,466,,,978,978,490',
'490,,466,466,,466,466,466,466,466,9,9,9,9,9,490,,,,490,490,490,490,',
',,,,,,,978,,466,466,466,466,466,466,466,466,466,466,466,466,466,466',
',,466,466,466,,,466,,,466,,,466,466,,466,,466,,466,,466,466,466,466',
'466,466,466,,466,466,466,783,,783,783,783,783,783,,,,,,466,466,466,466',
'783,466,60,466,,,,,466,60,60,60,,,60,60,60,,60,488,,,783,,,,,,60,60',
'60,783,783,783,783,488,488,,60,60,,60,60,60,60,60,,,,,,488,,488,,488',
'488,488,488,,,,,,,,,783,,60,60,60,60,60,60,60,60,60,60,60,60,60,60,',
',60,60,60,,,60,,,60,,,60,60,,60,,60,,60,,60,60,60,60,60,60,60,,60,,60',
'1052,,1052,1052,1052,1052,1052,,,,,,60,60,60,60,1052,60,30,60,,,,,60',
'30,30,30,,,30,30,30,,30,,,,1052,,,,,30,30,30,,,,1052,1052,,,,30,30,',
'30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,1052,,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,,30,30,30',
'30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,,30,,30,,,,,,,30,656,656,656',
'656,656,656,656,656,656,656,656,656,656,656,656,656,656,656,656,656',
'656,656,656,656,,,,656,656,656,656,656,656,656,656,656,656,,,,,,656',
'656,656,656,656,656,656,656,656,,,656,,,,,,,,,656,656,,656,656,656,656',
'656,656,656,,,656,656,,,,656,656,656,656,,,,,,,,,,,,,,656,656,,656,656',
'656,656,656,656,656,656,656,656,656,,,656,656,,,,,,,,,,656,,,,,,,,,656',
',,,,656,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11',
'11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11',
'11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,',
',,,,,,,,11,,,,,,,,,11,,,,,11,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,,,,103,103,103',
'103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103,103,103',
'103,103,103,,103,,,,,,,103,103,,103,103,103,103,103,103,103,,,103,103',
',,,103,103,103,103,,,,,,,,,,,,,,103,103,,103,103,103,103,103,103,103',
'103,103,103,103,,,103,,,,,,,,,,,,,,,,,,,,103,,,,,103,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12',
'12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12',
'12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,',
'12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,',
'12,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,424',
'424,424,424,424,424,424,424,,,,424,424,424,424,424,424,424,424,424,424',
',,,,,424,424,424,424,424,424,424,424,424,,,424,,,,,,,,,424,424,,424',
'424,424,424,424,424,424,,,424,424,,,,424,424,424,424,,,,,,,,,,,,,,424',
'424,,424,424,424,424,424,424,424,424,424,424,424,,,424,424,,,,,,,,,',
'424,,,,,,,,,424,,,,,424,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75',
'75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75',
'75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75',
'75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,785,785,785,785,785,785',
'785,785,785,785,785,785,785,785,785,785,785,785,785,785,785,785,785',
'785,,,,785,785,785,785,785,785,785,785,785,785,,,,,,785,785,785,785',
'785,785,785,785,785,,,785,,,,,,,,,785,785,,785,785,785,785,785,785,785',
',,785,785,,,,785,785,785,785,,,,,,,,,,,,,,785,785,,785,785,785,785,785',
'785,785,785,785,785,785,,,785,,,,,,,,,,,,891,891,891,891,891,891,,,785',
'891,891,,,785,891,,891,891,891,891,891,891,891,,,,,,891,891,891,891',
'891,891,891,,,891,,,,,443,891,891,891,891,891,891,891,891,891,891,891',
'891,,891,891,891,,891,891,,891,891,891,443,443,443,443,443,443,443,443',
'443,443,443,,443,443,,,443,443,,891,,,891,,,891,891,,,891,,891,443,',
'443,891,443,443,443,443,443,443,443,891,443,,,,891,891,891,891,891,891',
',,,891,891,,443,,443,,,891,,,891,891,891,1014,1014,1014,1014,1014,1014',
',,,1014,1014,,,,1014,,1014,1014,1014,1014,1014,1014,1014,,,,,,1014,1014',
'1014,1014,1014,1014,1014,,,1014,,,,,449,1014,1014,1014,1014,1014,1014',
'1014,1014,1014,1014,1014,1014,,1014,1014,1014,,1014,1014,,1014,1014',
'1014,449,449,449,449,449,449,449,449,449,449,449,,449,449,,,449,449',
',1014,,,1014,,,1014,1014,,,1014,,1014,449,,449,1014,449,449,449,449',
'449,449,449,1014,449,,,,1014,1014,1014,1014,1014,1014,,,,1014,1014,',
'449,,,,,1014,,,1014,1014,1014,604,604,604,604,604,604,,,,604,604,,,',
'604,,604,604,604,604,604,604,604,,,,,,604,604,604,604,604,604,604,,',
'604,,,,,,604,604,604,604,604,604,604,604,604,604,604,604,,604,604,604',
',604,604,,604,604,604,803,803,803,803,803,803,803,803,803,803,803,,803',
'803,,,803,803,,604,,,604,,,604,604,,,604,,604,803,,803,604,803,803,803',
'803,803,803,803,604,803,,,,604,604,604,604,604,604,,,,604,604,,803,',
',,,604,,,604,604,604,1013,1013,1013,1013,1013,1013,,,,1013,1013,,,,1013',
',1013,1013,1013,1013,1013,1013,1013,,,,,,1013,1013,1013,1013,1013,1013',
'1013,,,1013,,,,,,1013,1013,1013,1013,1013,1013,1013,1013,1013,1013,1013',
'1013,,1013,1013,1013,,1013,1013,,1013,1013,1013,24,24,24,24,24,24,24',
'24,24,24,24,,24,24,,,24,24,,1013,,,1013,,,1013,1013,,,1013,,1013,24',
',24,1013,24,24,24,24,24,24,24,1013,24,,,,1013,1013,1013,1013,1013,1013',
',,,1013,1013,,24,,,,,1013,,,1013,1013,1013,343,343,343,343,343,343,',
',,343,343,,,,343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343',
'343,343,,,343,,,,,,343,343,343,343,343,343,343,343,343,343,343,343,',
'343,343,343,,343,343,,343,343,343,554,554,554,554,554,554,554,554,554',
'554,554,,554,554,,,554,554,,343,,,343,,,343,343,,,343,,343,554,,554',
'343,554,554,554,554,554,554,554,343,554,,,,343,343,343,343,343,343,',
',,343,343,,554,,,,,343,,,343,343,343,987,987,987,987,987,987,,,,987',
'987,,,,987,,987,987,987,987,987,987,987,,,,,,987,987,987,987,987,987',
'987,,,987,,,,,,987,987,987,987,987,987,987,987,987,987,987,987,,987',
'987,987,,987,987,,987,987,987,291,291,291,291,291,291,291,291,291,291',
'291,,291,291,,,291,291,,987,,,987,,,987,987,,,987,,987,291,,291,987',
'291,291,291,291,291,291,291,987,291,,,,987,987,987,987,987,987,,,,987',
'987,,291,,,,,987,,,987,987,987,1008,1008,1008,1008,1008,1008,,,,1008',
'1008,,,,1008,,1008,1008,1008,1008,1008,1008,1008,,,,,,1008,1008,1008',
'1008,1008,1008,1008,,,1008,,,,,,1008,1008,1008,1008,1008,1008,1008,1008',
'1008,1008,1008,1008,,1008,1008,1008,,1008,1008,,1008,1008,1008,912,912',
'912,912,912,912,912,912,912,912,912,,912,912,,,912,912,,1008,,,1008',
',,1008,1008,,,1008,,1008,912,,912,1008,912,912,912,912,912,912,912,1008',
'912,,,,1008,1008,1008,1008,1008,1008,,,,1008,1008,,912,,,,,1008,,,1008',
'1008,1008,827,827,827,827,827,827,,,,827,827,,,,827,,827,827,827,827',
'827,827,827,,,,,,827,827,827,827,827,827,827,,,827,,,,,,827,827,827',
'827,827,827,827,827,827,827,827,827,,827,827,827,,827,827,,827,827,827',
'501,501,501,501,501,501,501,501,501,501,501,,501,501,,,501,501,,827',
',,827,,,827,827,,,827,,827,501,,501,827,501,501,501,501,501,501,501',
'827,501,,,,827,827,827,827,827,827,,,,827,827,501,501,,,,,827,,,827',
'827,827,845,845,845,845,845,845,,,,845,845,,,,845,,845,845,845,845,845',
'845,845,,,,,,845,845,845,845,845,845,845,,,845,,,,,,845,845,845,845',
'845,845,845,845,845,845,845,845,,845,845,845,,845,845,,845,845,845,496',
'496,496,496,496,496,496,,,496,496,,,,,,496,496,,845,,,845,,,845,845',
',,845,,845,496,,496,845,496,496,496,496,496,496,496,845,496,,,,845,845',
'845,845,845,845,,,,845,845,,,,,,,845,,,845,845,845,854,854,854,854,854',
'854,,,,854,854,,,,854,,854,854,854,854,854,854,854,,,,,,854,854,854',
'854,854,854,854,,,854,,,,,,854,854,854,854,854,854,854,854,854,854,854',
'854,,854,854,854,,854,854,,854,854,854,493,493,493,493,493,493,493,',
',493,493,,,,,,493,493,,854,,,854,,,854,854,,,854,,854,493,,493,854,493',
'493,493,493,493,493,493,854,493,,,,854,854,854,854,854,854,,,,854,854',
',,,,,,854,,,854,854,854,855,855,855,855,855,855,,,,855,855,,,,855,,855',
'855,855,855,855,855,855,,,,,,855,855,855,855,855,855,855,,,855,,,,,',
'855,855,855,855,855,855,855,855,855,855,855,855,,855,855,855,,855,855',
',855,855,855,495,495,495,495,495,495,495,,,495,495,,,,,,495,495,,855',
',,855,,,855,855,,,855,,855,495,,495,855,495,495,495,495,495,495,495',
'855,495,,,,855,855,855,855,855,855,,,,855,855,,,,,,,855,,,855,855,855',
'243,243,243,243,243,243,,,,243,243,,,,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,243,243,243,243,243,243',
'243,243,243,243,243,243,,243,243,243,,243,243,,243,243,243,500,500,500',
'500,500,500,500,500,,500,500,,,,,,500,500,,243,,,243,,,243,243,,,243',
',243,500,,500,243,500,500,500,500,500,500,500,243,500,,,,243,243,243',
'243,243,243,,,,243,243,,,,,,,243,,,243,243,243,880,880,880,880,880,880',
',,,880,880,,,,880,,880,880,880,880,880,880,880,,,,,,880,880,880,880',
'880,880,880,,,880,,,,,,880,880,880,880,880,880,880,880,880,880,880,880',
',880,880,880,,880,880,,880,880,880,480,480,480,480,480,480,480,480,480',
'480,480,,480,480,,,480,480,,880,,,880,,,880,880,,,880,,880,480,,480',
'880,480,480,480,480,480,480,480,880,480,,,,880,880,880,880,880,880,',
',,880,880,,,,,,,880,,,880,880,880,781,781,781,781,781,781,,,,781,781',
',,,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781,781,781,781',
',,781,,,,,,781,781,781,781,781,781,781,781,781,781,781,781,,781,781',
'781,,781,781,,781,781,781,499,499,499,499,499,499,499,,,499,499,,,,',
',499,499,,781,,,781,,,781,781,,,781,,781,499,,499,781,499,499,499,499',
'499,499,499,781,499,,,,781,781,781,781,781,781,,,,781,781,,,,,,,781',
',,781,781,781,782,782,782,782,782,782,,,,782,782,,,,782,,782,782,782',
'782,782,782,782,,,,,,782,782,782,782,782,782,782,,,782,,,,,,782,782',
'782,782,782,782,782,782,782,782,782,782,,782,782,782,,782,782,,782,782',
'782,494,494,494,494,494,494,494,,,494,494,,,,,,494,494,,782,,,782,,',
'782,782,,,782,,782,494,,494,782,494,494,494,494,494,494,494,782,494',
',,,782,782,782,782,782,782,,,,782,782,,,,,,,782,,,782,782,782,360,360',
'360,360,360,360,,,,360,360,,,,360,,360,360,360,360,360,360,360,,,,,',
'360,360,360,360,360,360,360,,,360,,,,,,360,360,360,360,360,360,360,360',
'360,360,360,360,,360,360,360,,360,360,,360,360,360,481,481,481,481,481',
'481,481,481,481,481,481,,481,481,,,481,481,,360,,,360,,,360,360,,,360',
',360,481,,481,360,481,481,481,481,481,481,481,360,481,,,,360,360,360',
'360,360,360,,,,360,360,,,,,,,360,,,360,360,360,359,359,359,359,359,359',
',,,359,359,,,,359,,359,359,359,359,359,359,359,,,,,,359,359,359,359',
'359,359,359,,,359,,,,,,359,359,359,359,359,359,359,359,359,359,359,359',
',359,359,359,,359,359,,359,359,359,491,491,491,491,491,491,491,,,491',
'491,,,,,,491,491,,359,,,359,,,359,359,,,359,,359,491,,491,359,491,491',
'491,491,491,491,491,359,491,,,,359,359,359,359,359,359,,,,359,359,,',
',,,,359,,,359,359,359,958,958,958,958,958,958,,,,958,958,,,,958,,958',
'958,958,958,958,958,958,,,,,,958,958,958,958,958,958,958,,,958,,,,,',
'958,958,958,958,958,958,958,958,958,958,958,958,,958,958,958,,958,958',
',958,958,958,492,492,492,492,492,492,492,,,492,492,,,,,,492,492,,958',
',,958,,,958,958,,,958,,958,492,,492,958,492,492,492,492,492,492,492',
'958,492,,,,958,958,958,958,958,958,,,,958,958,,,,,,,958,,,958,958,958',
'601,601,601,601,601,601,,,,601,601,,,,601,,601,601,601,601,601,601,601',
',,,,,601,601,601,601,601,601,601,,,601,,,,,,601,601,601,601,601,601',
'601,601,601,601,601,601,,601,601,601,,601,601,,601,601,601,,,,,,,,,',
',,,,,,,,,,601,,,601,,,601,601,,,601,,601,,,,601,,,,,,,,601,,,,,601,601',
'601,601,601,601,,,,601,601,,,,,,,601,,,601,601,601,36,36,36,36,36,36',
',,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36',
',,,,,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36',
',,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,,,,36,,,,,,,,36,,,,,36,36',
'36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36,2,2,2,2,2,2,,,,2,2,,,,2,,2',
'2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2',
'2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,,,,,,,,2,,',
',,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,788,788,788,788,788,788,,,,788',
'788,,,,788,,788,788,788,788,788,788,788,,,,,,788,788,788,788,788,788',
'788,,,788,,,,,,788,788,788,788,788,788,788,788,788,788,788,788,,788',
'788,788,,788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788',
',,788,,788,,,,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788',
',,,,,,788,,,788,788,788,316,316,316,316,316,316,,,,316,316,,,,316,,316',
'316,316,316,316,316,316,,,,,,316,316,316,316,316,316,316,,,316,,,,,',
'316,316,316,316,316,316,316,316,316,316,316,316,,316,316,316,,316,316',
',316,316,316,,,,,,,,,,,,,,,,,,,,316,,,316,,,316,316,,,316,,316,,,,316',
',,,,,,,316,,,,,316,316,316,316,316,316,,,,316,316,,,,,,,316,,,316,316',
'316,929,929,929,929,929,929,,,,929,929,,,,929,,929,929,929,929,929,929',
'929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,929,929,929,929,929',
'929,929,929,929,929,929,929,,929,929,929,,929,929,,929,929,929,,,,,',
',,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,,,,,,929,,,,,929',
'929,929,929,929,929,,,,929,929,,,,,,,929,,,929,929,929,928,928,928,928',
'928,928,,,,928,928,,,,928,,928,928,928,928,928,928,928,,,,,,928,928',
'928,928,928,928,928,,,928,,,,,,928,928,928,928,928,928,928,928,928,928',
'928,928,,928,928,928,,928,928,,928,928,928,,,,,,,,,,,,,,,,,,,,928,,',
'928,,,928,928,,,928,,928,,,,928,,,,,,,,928,,,,,928,928,928,928,928,928',
',,,928,928,,,,,,,928,,,928,928,928,219,219,219,219,219,219,,,,219,219',
',,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219',
',,219,,,,,,219,219,219,219,219,219,219,219,219,219,219,219,,219,219',
'219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219',
',219,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,',
'219,,,219,219,219,423,423,423,423,423,423,,,,423,423,,,,423,,423,423',
'423,423,423,423,423,,,,,,423,423,423,423,423,423,423,,,423,,,,,,423',
'423,423,423,423,423,423,423,423,423,423,423,,423,423,423,,423,423,,423',
'423,423,,,,,,,,,,,,,,,,,,,,423,,,423,,,423,423,,,423,,423,,,,423,,,',
',,,,423,,,,,423,423,423,423,423,423,,,,423,423,,,,,,,423,,,423,423,423',
'311,311,311,311,311,311,,,,311,311,,,,311,,311,311,311,311,311,311,311',
',,,,,311,311,311,311,311,311,311,,,311,,,,,,311,311,311,311,311,311',
'311,311,311,311,311,311,,311,311,311,,311,311,,311,311,311,,,,,,,,,',
',,,,,,,,,,311,,,311,,,311,311,,,311,,311,,,,311,,,,,,,,311,,,,,311,311',
'311,311,311,311,,,,311,311,,,,,,,311,,,311,311,311,253,253,253,,253',
',,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253',
'253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253',
'253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,945',
'253,945,945,945,945,945,253,,,,,,,,253,945,,,,253,253,253,253,253,253',
',,,253,253,,,,,,,253,945,,253,253,253,254,254,254,,254,,945,945,254',
'254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254',
'254,,,254,,,,945,,,254,,,254,254,254,254,254,254,254,254,,254,254,254',
',254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,1036,254',
'1036,1036,1036,1036,1036,254,,,,,,,,254,1036,,,,254,254,254,254,254',
'254,,,,254,254,,,,,,,254,1036,,254,254,254,255,255,255,,255,,1036,1036',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,1036,,,255,,,255,255,255,255,255,255,255,255,,255,255',
'255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,1056',
'255,1056,1056,1056,1056,1056,255,,,,,,,,255,1056,,,,255,255,255,255',
'255,255,,,,255,255,,,,,,,255,1056,,255,255,255,256,256,256,,256,,1056',
'1056,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256',
'256,256,256,,,256,,,,1056,,,256,,,256,256,256,256,256,256,256,256,,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',740,256,740,740,740,740,740,256,,,,,,,,256,740,,,,256,256,256,256,256',
'256,,,,256,256,,,,,,,256,740,,256,256,256,257,257,257,,257,,740,740',
'257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,740,,,257,,,257,257,257,257,257,257,257,257,,257,257',
'257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,941',
'257,941,941,941,941,941,257,,,,,,,,257,941,,,,257,257,257,257,257,257',
',,,257,257,,,,,,,257,941,,257,257,257,258,258,258,,258,,941,941,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,258,,,,941,,,258,,,258,258,258,258,258,258,258,258,,258,258,258',
',258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,943,258',
'943,943,943,943,943,258,,,,,,,,258,943,,,,258,258,258,258,258,258,,',
',258,258,,,,,,,258,943,,258,258,258,259,259,259,,259,,943,943,259,259',
',,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259',
',,259,,,,943,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,,259',
'259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259',
',,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259',
'259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260',
',,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260',
'260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260',
',,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260',
',,,260,260,,,,,,,260,,,260,260,260,261,261,261,,261,,,,261,261,,,,261',
',261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261',
',,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261,,261',
'261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,',
',261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261,261',
'262,262,262,,262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,',
',262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262',
'262,262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,',
'262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262',
',,,262,262,,,,,,,262,,,262,262,262,263,263,263,,263,,,,263,263,,,,263',
',263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263',
',,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263,,263',
'263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,',
',263,,,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263,263',
'264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264,264,264,,,,',
',264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264',
'264,264,,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,',
'264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264',
',,,264,264,,,,,,,264,,,264,264,264,265,265,265,,265,,,,265,265,,,,265',
',265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265',
',,,,,,265,,,265,265,265,265,265,265,265,265,,265,265,265,,265,265,,265',
'265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,',
',265,,,,,265,265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265',
'266,266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,',
',266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266',
'266,266,,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,',
'266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266',
',,,266,266,,,,,,,266,,,266,266,266,271,271,271,,271,,,,271,271,,,,271',
',271,271,271,271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271',
',,,,,,271,,,271,271,271,271,271,271,271,271,,271,271,271,,271,271,,271',
'271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,,,,,271,,,,,,',
',271,,,,,271,271,271,271,271,271,,,,271,271,,,,,,,271,,,271,271,271',
'279,279,279,,279,,,,279,279,,,,279,,279,279,279,279,279,279,279,,,,',
',279,279,279,279,279,279,279,,,279,,,,,,,279,,,279,279,279,279,279,279',
'279,279,279,279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279',
',,279,,,279,279,,,279,,279,,279,,279,,,,,,,,279,,,,,279,279,279,279',
'279,279,,,,279,279,,,,,,,279,,279,279,279,279,286,286,286,,286,,,,286',
'286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286',
'286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286,286,286,286,286',
',286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,',
'286,,286,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,',
',,286,,286,286,286,286,289,289,289,,289,,,,289,289,,,,289,,289,289,289',
'289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289',
'289,289,289,289,289,289,289,289,289,289,289,,289,289,,289,289,289,,',
',,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,289,,289,,289,,,,,,,,289',
',,,,289,289,289,289,289,289,,,,289,289,289,,,,,,289,,289,289,289,289',
'923,923,923,,923,,,,923,923,,,,923,,923,923,923,923,923,923,923,,,,',
',923,923,923,923,923,923,923,,,923,,,,,,,923,,,923,923,923,923,923,923',
'923,923,,923,923,923,,923,923,,,,923,,,,,,,,,,,,,,,,,,,,923,,,923,,',
'923,923,,,923,,,,,,,,,,,,,,,,,,,923,923,923,923,923,923,,,,923,923,',
',,,,,923,,,923,923,923,296,296,296,,296,,,,296,296,,,,296,,296,296,296',
'296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296,,,,,,,296,,,296',
'296,296,296,296,296,296,296,,296,296,296,,296,296,,296,296,296,,,,,',
',,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,,,,,296,,,,,,,,296,,,,,296',
'296,296,296,296,296,,,,296,296,,,,,,,296,,,296,296,296,911,911,911,',
'911,,,,911,911,,,,911,,911,911,911,911,911,911,911,,,,,,911,911,911',
'911,911,911,911,,,911,,,,,,,911,,,911,911,911,911,911,911,911,911,,911',
'911,911,,911,911,,911,911,911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911',
',,911,,,,,,911,,,,,,,,911,,,,,911,911,911,911,911,911,,,,911,911,,,',
',,,911,,,911,911,911,298,298,298,,298,,,,298,298,,,,298,,298,298,298',
'298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298,,,,,,,298,,,298',
'298,298,298,298,298,298,298,,298,298,298,,298,298,,298,298,298,,,,,',
',,,,,,,,,,,,,,298,,,298,,,298,298,,,298,,,,,,298,,,,,,,,298,,,,,298',
'298,298,298,298,298,,,,298,298,,,,,,,298,,,298,298,298,300,300,300,',
'300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300',
'300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300',
'300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300',
',,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300,,,',
',,,300,,,300,300,300,301,301,301,,301,,,,301,301,,,,301,,301,301,301',
'301,301,301,301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,,301,,,301',
'301,301,301,301,301,301,301,,301,301,301,,301,301,,301,301,301,,,,,',
',,,,,,,,,,,,,,301,,,301,,,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301',
'301,301,301,301,301,,,,301,301,,,,,,,301,,,301,301,301,910,910,910,',
'910,,,,910,910,,,,910,,910,910,910,910,910,910,910,,,,,,910,910,910',
'910,910,910,910,,,910,,,,,,,910,,,910,910,910,910,910,910,910,910,910',
'910,910,910,,910,910,,910,910,910,,,,,,,,,,,,,,,,,,,,910,,,910,,,910',
'910,,,910,,,,910,,910,,,,,,,,910,,,,,910,910,910,910,910,910,,,,910',
'910,,,,,,,910,,910,910,910,910,307,307,307,307,307,,,,307,307,,,,307',
',307,307,307,307,307,307,307,,,,,,307,307,307,307,307,307,307,,,307',
',,,,,307,307,,307,307,307,307,307,307,307,307,307,,307,307,307,,307',
'307,,307,307,307,,,,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,,307,,307,',
',,307,,,,,,,,307,,,,,307,307,307,307,307,307,,,,307,307,,,,,,,307,,',
'307,307,307,892,892,892,,892,,,,892,892,,,,892,,892,892,892,892,892',
'892,892,,,,,,892,892,892,892,892,892,892,,,892,,,,,,,892,,,892,892,892',
'892,892,892,892,892,,892,892,892,,892,892,,892,892,892,,,,,,,,,,,,,',
',,,,,,892,,,892,,,892,892,,,892,,,,,,892,,,,,,,,892,,,,,892,892,892',
'892,892,892,,,,892,892,,,,,,,892,,,892,892,892,676,676,676,,676,,,,676',
'676,,,,676,,676,676,676,676,676,676,676,,,,,,676,676,676,676,676,676',
'676,,,676,,,,,,,676,,,676,676,676,676,676,676,676,676,,676,676,676,',
'676,676,,676,676,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,',
',,,676,,,,,,,,676,,,,,676,676,676,676,676,676,,,,676,676,,,,,,,676,',
',676,676,676,589,589,589,,589,,,,589,589,,,,589,,589,589,589,589,589',
'589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589,,,589,589,589',
'589,589,589,589,589,,589,589,589,,589,589,,589,589,589,,,,,,,,,,,,,',
',,,,,,589,,,589,,,589,589,,,589,,,,,,589,,,,,,,,589,,,,,589,589,589',
'589,589,589,,,,589,589,,,,,,,589,,,589,589,589,545,545,545,,545,,,,545',
'545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545,545',
'545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,,545,545,545,',
'545,545,,,,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,,,,,,,,',
',,,,,,,,,,545,545,545,545,545,545,,,,545,545,,,,,,,545,,,545,545,545',
'564,564,564,,564,,,,564,564,,,,564,,564,564,564,564,564,564,564,,,,',
',564,564,564,564,564,564,564,,,564,,,,,,,564,,,564,564,564,564,564,564',
'564,564,564,564,564,564,,564,564,,564,564,564,,,,,,,,,,,,,,,,,,,,564',
',,564,,,564,564,,,564,,,,,,564,,,,,,,,564,,,,,564,564,564,564,564,564',
',,,564,564,,,,,,,564,,564,564,564,564,561,561,561,,561,,,,561,561,,',
',561,,561,561,561,561,561,561,561,,,,,,561,561,561,561,561,561,561,',
',561,,,,,,,561,,,561,561,561,561,561,561,561,561,561,561,561,561,,561',
'561,,561,561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,,561,,561,',
',,561,,,,,,,,561,,,,,561,561,561,561,561,561,,,,561,561,,,,,,,561,,561',
'561,561,561,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549',
'549,549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,,549,,,549,549,549',
'549,549,549,549,549,,549,549,549,,549,549,,549,549,549,,,,,,,,,,,,,',
',,,,,,549,,,549,,,549,549,,,549,,,,,,549,,,,,,,,549,,,,,549,549,549',
'549,549,549,,,,549,549,,,,,,,549,,,549,549,549,550,550,550,,550,,,,550',
'550,,,,550,,550,550,550,550,550,550,550,,,,,,550,550,550,550,550,550',
'550,,,550,,,,,,,550,,,550,550,550,550,550,550,550,550,,550,550,550,',
'550,550,,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550,,,550,550,,,550,,',
',,,550,,,,,,,,550,,,,,550,550,550,550,550,550,,,,550,550,,,,,,,550,',
',550,550,550,555,555,555,,555,,,,555,555,,,,555,,555,555,555,555,555',
'555,555,,,,,,555,555,555,555,555,555,555,,,555,,,,,,,555,,,555,555,555',
'555,555,555,555,555,,555,555,555,,555,555,,555,555,555,,,,,,,,,,,,,',
',,,,,,555,,,555,,,555,555,,,555,,,,,,555,,,,,,,,555,,,,,555,555,555',
'555,555,555,,,,555,555,,,,,,,555,,,555,555,555,23,23,23,,23,,,,23,23',
',,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23',
',,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,',
',,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,',
'23,23,,,,,,,23,,,23,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32',
'32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32',
'32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,',
',32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32',
'32,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33',
'33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,',
'33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33',
',,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,34,34',
'34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34',
',,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34',
',,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34',
'34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,37,37,37,,37,,,,37,37',
',,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37',
',,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,',
'37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37',
',,,,,,37,,,37,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38',
',,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38',
'38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,',
',,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,1030,1030',
'1030,,1030,,,,1030,1030,,,,1030,,1030,1030,1030,1030,1030,1030,1030',
',,,,,1030,1030,1030,1030,1030,1030,1030,,,1030,,,,,,,1030,,,1030,1030',
'1030,1030,1030,1030,1030,1030,1030,1030,1030,1030,,1030,1030,,1030,1030',
'1030,,,,,,,,,,,,,,,,,,,,1030,,,1030,,,1030,1030,,,1030,,1030,,1030,',
'1030,,,,,,,,1030,,,,,1030,1030,1030,1030,1030,1030,,,,1030,1030,,,,',
',,1030,,1030,1030,1030,1030,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45',
'45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45',
'45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45',
',,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45',
'45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46',
'46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46',
',46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46',
',,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,48,48,48,,48,,,,48',
'48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,',
'48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,',
',,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48',
',,,48,48,,,,,,,48,,,48,48,48,982,982,982,,982,,,,982,982,,,,982,,982',
'982,982,982,982,982,982,,,,,,982,982,982,982,982,982,982,,,982,,,,,',
',982,,,982,982,982,982,982,982,982,982,,982,982,982,,982,982,,,,982',
',,,,,,,,,,,,,,,,,,,982,,,982,,,982,982,,,982,,,,,,,,,,,,,,,,,,,982,982',
'982,982,982,982,,,,982,982,,,,,,,982,,,982,982,982,63,63,63,,63,,,,63',
'63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,',
'63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,',
',,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,63,,,,,,,,63,,,,,63,63,63,63,63',
'63,,,,63,63,,,,,,,63,,63,63,63,63,67,67,67,,67,,,,67,67,,,,67,,67,67',
'67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67',
'67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,',
'67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67',
',,67,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68',
'68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68',
',68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,',
',,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,71,71,71,',
'71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,',
'71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,,',
',,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71',
'71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,72,72,72,,72,,,,72,72,,,,72',
',72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72',
'72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,,72,,,72',
',,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72,72,72,,,,72,72,,,,,,,72',
',,72,72,72,957,957,957,,957,,,,957,957,,,,957,,957,957,957,957,957,957',
'957,,,,,,957,957,957,957,957,957,957,,,957,,,,,,,957,,,957,957,957,957',
'957,957,957,957,,957,957,957,,957,957,,957,957,957,,,,,,,,,,,,,,,,,',
',,957,,,957,,,957,957,,,957,,957,,,,957,,,,,,,,957,,,,,957,957,957,957',
'957,957,,,,957,957,,,,,,,957,,,957,957,957,123,123,123,123,123,,,,123',
'123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123',
'123,,,123,,,,,,123,123,123,123,123,123,123,123,123,123,123,123,,123',
'123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123',
',,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123',
',,,,,123,123,,,123,123,123,128,128,128,,128,,,,128,128,,,,128,,128,128',
'128,128,128,128,128,,,,,,128,128,128,128,128,128,128,,,128,,,,,,,128',
',,128,128,128,128,128,128,128,128,,128,128,128,,128,128,,128,128,128',
',,,,,,,,,,,,,,,,,,,128,,,128,,,128,128,,,128,,,,,,128,,,,,,,,128,,,',
',128,128,128,128,128,128,,,,128,128,,,,,,,128,,,128,128,128,129,129',
'129,,129,,,,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129,129',
'129,129,129,129,129,,,129,,,,,,,129,,,129,129,129,129,129,129,129,129',
',129,129,129,,129,129,,129,129,129,,,,,,,,,,,,,,,,,,,,129,,,129,,,129',
'129,,,129,,,,,,129,,,,,,,,129,,,,,129,129,129,129,129,129,,,,129,129',
',,,,,,129,,,129,129,129,130,130,130,,130,,,,130,130,,,,130,,130,130',
'130,130,130,130,130,,,,,,130,130,130,130,130,130,130,,,130,,,,,,,130',
',,130,130,130,130,130,130,130,130,,130,130,130,,130,130,,130,130,130',
',,,,,,,,,,,,,,,,,,,130,,,130,,,130,130,,,130,,,,,,130,,,,,,,,130,,,',
',130,130,130,130,130,130,,,,130,130,,,,,,,130,,,130,130,130,131,131',
'131,,131,,,,131,131,,,,131,,131,131,131,131,131,131,131,,,,,,131,131',
'131,131,131,131,131,,,131,,,,,,,131,,,131,131,131,131,131,131,131,131',
',131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131',
'131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131,131',
',,,,,,131,,,131,131,131,132,132,132,132,132,,,,132,132,,,,132,,132,132',
'132,132,132,132,132,,,,,,132,132,132,132,132,132,132,,,132,,,,,,132',
'132,,132,132,132,132,132,132,132,132,132,,132,132,132,,132,132,,132',
'132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,,132,,,,132,,,',
',,,,132,,,,,132,132,132,132,132,132,,,,132,132,,,,,,,132,,,132,132,132',
'220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220,220,,,,',
',220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220',
'220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,',
'220,,,220,220,,,220,,220,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220',
',,,220,220,,,,,,,220,,,220,220,220,221,221,221,,221,,,,221,221,,,,221',
',221,221,221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221',
',,,,,,221,,,221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221',
'221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,221,,,,221,,,',
',,,,221,,,,,221,221,221,221,221,221,,,,221,221,,,,,,,221,,,221,221,221',
'222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,',
',222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222',
'222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,',
'222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222',
',,,222,222,,,,,,,222,,,222,222,222,223,223,223,,223,,,,223,223,,,,223',
',223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223',
',,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223,,223',
'223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,',
',223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,,223,,,223,223,223',
'224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224,224,,,,',
',224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224',
'224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,',
'224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224',
',,,224,224,,,,,,,224,,,224,224,224,225,225,225,,225,,,,225,225,,,,225',
',225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225',
',,,,,,225,,,225,225,225,225,225,225,225,225,225,225,225,225,,225,225',
',225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,225,,225',
',225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225,,225',
'225,225,225,229,229,229,,229,,,,229,229,,,,229,,229,229,229,229,229',
'229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229',
'229,229,229,229,229,,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,',
',,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229',
'229,229,229,,,,229,229,,,,,,,229,,,229,229,229,230,230,230,,230,,,,230',
'230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230',
'230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230,230,230,',
'230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,',
',,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,,,,,,,230,',
',230,230,230,231,231,231,,231,,,,231,231,,,,231,,231,231,231,231,231',
'231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231',
'231,231,231,231,231,,231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,',
',,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231',
'231,231,231,,,,231,231,231,,,,,,231,,,231,231,231,8,8,8,8,8,,,,8,8,',
',,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8',
'8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,',
',,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,932,932,932,,932,,,,932',
'932,,,,932,,932,932,932,932,932,932,932,,,,,,932,932,932,932,932,932',
'932,,,932,,,,,,,932,,,932,932,932,932,932,932,932,932,,932,932,932,',
'932,932,,,,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932,932,,,932,,,,,,,,',
',,,,,,,,,,932,932,932,932,932,932,,,,932,932,,,,,,,932,,,932,932,932',
'242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,',
',242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242',
'242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,',
'242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242',
',,,242,242,,,,,,,242,,,242,242,242,245,245,245,,245,,,,245,245,,,,245',
',245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245',
',,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245',
'245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,',
',245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245',
'246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,',
',246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246',
'246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,',
'246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246',
',,,246,246,,,,,,,246,,,246,246,246,247,247,247,,247,,,,247,247,,,,247',
',247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247',
',,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,,247',
'247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,',
',247,,,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247',
'248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,',
',248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248',
'248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,',
'248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248',
',,,248,248,,,,,,,248,,,248,248,248,249,249,249,,249,,,,249,249,,,,249',
',249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249',
',,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249',
'249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,',
',249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249',
'250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,',
',250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250',
'250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,',
'250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250',
',,,250,250,,,,,,,250,,,250,250,250,251,251,251,,251,,,,251,251,,,,251',
',251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251',
',,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251',
'251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,',
',251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251',
'252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,',
',252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252',
'252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,',
'252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,315,315,315,,315,,,,315,315,,,,315',
',315,315,315,315,315,315,315,,,,,,315,315,315,315,315,315,315,,,315',
',,,,,,315,,,315,315,315,315,315,315,315,315,,315,315,315,,315,315,,',
',315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315,,,,,,,,,,,,,,,,,,',
'315,315,315,315,315,315,,,,315,315,,,,315,,,315,,,315,315,315,878,878',
'878,,878,,,,878,878,,,,878,,878,878,878,878,878,878,878,,,,,,878,878',
'878,878,878,878,878,,,878,,,,,,,878,,,878,878,878,878,878,878,878,878',
',878,878,878,,878,878,,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878',
'878,,,878,,,,,,878,,,,,,,,878,,,,,878,878,878,878,878,878,,,,878,878',
',,,,,,878,,,878,878,878,822,822,822,,822,,,,822,822,,,,822,,822,822',
'822,822,822,822,822,,,,,,822,822,822,822,822,822,822,,,822,,,,,,,822',
',,822,822,822,822,822,822,822,822,,822,822,822,,822,822,,822,822,822',
',,,,,,,,,,,,,,,,,,,822,,,822,,,822,822,,,822,,,,,,822,,,,,,,,822,,,',
',822,822,822,822,822,822,,,,822,822,,,,,,,822,,,822,822,822,820,820',
'820,,820,,,,820,820,,,,820,,820,820,820,820,820,820,820,,,,,,820,820',
'820,820,820,820,820,,,820,,,,,,,820,,,820,820,820,820,820,820,820,820',
',820,820,820,,820,820,,820,820,820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820',
'820,,,820,,,,,,820,,,,,,,,820,,,,,820,820,820,820,820,820,,,,820,820',
',,,,,,820,,,820,820,820,332,332,332,,332,,,,332,332,,,,332,,332,332',
'332,332,332,332,332,,,,,,332,332,332,332,332,332,332,,,332,,,,,,,332',
',,332,332,332,332,332,332,332,332,,332,332,332,,332,332,,,,332,,,,,',
',,,,,,,,,,,,,,332,,,332,,,332,332,,,332,,,,,,,,,,,,,,,,,,,332,332,332',
'332,332,332,,,,332,332,,,,,,,332,,,332,332,332,819,819,819,,819,,,,819',
'819,,,,819,,819,819,819,819,819,819,819,,,,,,819,819,819,819,819,819',
'819,,,819,,,,,,,819,,,819,819,819,819,819,819,819,819,,819,819,819,',
'819,819,,819,819,819,,,,,,,,,,,,,,,,,,,,819,,,819,,,819,819,,,819,,',
',,,819,,,,,,,,819,,,,,819,819,819,819,819,819,,,,819,819,,,,,,,819,',
',819,819,819,818,818,818,,818,,,,818,818,,,,818,,818,818,818,818,818',
'818,818,,,,,,818,818,818,818,818,818,818,,,818,,,,,,,818,,,818,818,818',
'818,818,818,818,818,,818,818,818,,818,818,,818,818,818,,,,,,,,,,,,,',
',,,,,,818,,,818,,,818,818,,,818,,,,,,818,,,,,,,,818,,,,,818,818,818',
'818,818,818,,,,818,818,,,,,,,818,,,818,818,818,817,817,817,,817,,,,817',
'817,,,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817,817,817',
'817,,,817,,,,,,,817,,,817,817,817,817,817,817,817,817,,817,817,817,',
'817,817,,817,817,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817,,',
',,,817,,,,,,,,817,,,,,817,817,817,817,817,817,,,,817,817,,,,,,,817,',
',817,817,817,804,804,804,,804,,,,804,804,,,,804,,804,804,804,804,804',
'804,804,,,,,,804,804,804,804,804,804,804,,,804,,,,,,,804,,,804,804,804',
'804,804,804,804,804,,804,804,804,,804,804,,804,804,804,,,,,,,,,,,,,',
',,,,,,804,,,804,,,804,804,,,804,,,,,,804,,,,,,,,804,,,,,804,804,804',
'804,804,804,,,,804,804,,,,,,,804,,,804,804,804,340,340,340,,340,,,,340',
'340,,,,340,,340,340,340,340,340,340,340,,,,,,340,340,340,340,340,340',
'340,,,340,,,,,,,340,,,340,340,340,340,340,340,340,340,,340,340,340,',
'340,340,,340,340,340,,,,,,,,,,,,,,,,,,,,340,,,340,,,340,340,,,340,,',
',,,340,,,,,,,,340,,,,,340,340,340,340,340,340,,,,340,340,,,,,,,340,',
',340,340,340,342,342,342,,342,,,,342,342,,,,342,,342,342,342,342,342',
'342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342,,,342,342,342',
'342,342,342,342,342,,342,342,342,,342,342,,342,342,342,,,,,,,,,,,,,',
',,,,,,342,,,342,342,,342,342,,,342,,,,,,342,,,,,,,,342,,,,,342,342,342',
'342,342,342,,,,342,342,,,,,,,342,,,342,342,342,345,345,345,345,345,',
',,345,345,,,,345,,345,345,345,345,345,345,345,,,,,,345,345,345,345,345',
'345,345,,,345,,,,,,345,345,,345,345,345,345,345,345,345,345,345,,345',
'345,345,,345,345,,345,345,345,,,,,,,,,,,,,,,,,,,,345,,,345,,,345,345',
',,345,,345,,,,345,,,,,,,,345,,,,,345,345,345,345,345,345,,,,345,345',
',,,,,,345,,,345,345,345,797,797,797,,797,,,,797,797,,,,797,,797,797',
'797,797,797,797,797,,,,,,797,797,797,797,797,797,797,,,797,,,,,,,797',
',,797,797,797,797,797,797,797,797,,797,797,797,,797,797,,797,797,797',
',,,,,,,,,,,,,,,,,,,797,,,797,,,797,797,,,797,,,,,,797,,,,,,,,797,,,',
',797,797,797,797,797,797,,,,797,797,,,,,,,797,,,797,797,797,351,351',
'351,,351,,,,351,351,,,,351,,351,351,351,351,351,351,351,,,,,,351,351',
'351,351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351,351,351,351',
'351,351,351,351,,351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351,',
',351,351,,,351,,,,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351',
'351,,,,,,,351,,351,351,351,351,358,358,358,,358,,,,358,358,,,,358,,358',
'358,358,358,358,358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,',
',358,,,358,358,358,358,358,358,358,358,,358,358,358,,358,358,,358,358',
'358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358,,,,,,358,,,,,,,,358',
',,,,358,358,358,358,358,358,,,,358,358,,,,,,,358,,,358,358,358,372,372',
'372,,372,,,,372,372,,,,372,,372,372,372,372,372,372,372,,,,,,372,372',
'372,372,372,372,372,,,372,,,,,,,372,,,372,372,372,372,372,372,372,372',
',372,372,372,,372,372,,,,372,,,,,,,,,,,,,,,,,,,,372,,,372,,,372,372',
',,372,,,,,,,,,,,,,,,,,,,372,372,372,372,372,372,,,,372,372,,,,,,,372',
',,372,372,372,374,374,374,,374,,,,374,374,,,,374,,374,374,374,374,374',
'374,374,,,,,,374,374,374,374,374,374,374,,,374,,,,,,,374,,,374,374,374',
'374,374,374,374,374,,374,374,374,,374,374,,,,374,,,,,,,,,,,,,,,,,,,',
'374,,,374,,,374,374,,,374,,,,,,,,,,,,,,,,,,,374,374,374,374,374,374',
',,,374,374,,,,,,,374,,,374,374,374,776,776,776,,776,,,,776,776,,,,776',
',776,776,776,776,776,776,776,,,,,,776,776,776,776,776,776,776,,,776',
',,,,,,776,,,776,776,776,776,776,776,776,776,776,776,776,776,,776,776',
',776,776,776,,,,,,,,,,,,,,,,,,,,776,,,776,,,776,776,,,776,,776,,776',
',776,,,,,,,,776,,,,,776,776,776,776,776,776,,,,776,776,,,,,,,776,,776',
'776,776,776,764,764,764,,764,,,,764,764,,,,764,,764,764,764,764,764',
'764,764,,,,,,764,764,764,764,764,764,764,,,764,,,,,,,764,,,764,764,764',
'764,764,764,764,764,,764,764,764,,764,764,,764,764,764,,,,,,,,,,,,,',
',,,,,,764,,,764,,,764,764,,,764,,764,,,,764,,,,,,,,764,,,,,764,764,764',
'764,764,764,,,,764,764,,,,,,,764,,,764,764,764,742,742,742,,742,,,,742',
'742,,,,742,,742,742,742,742,742,742,742,,,,,,742,742,742,742,742,742',
'742,,,742,,,,,,,742,,,742,742,742,742,742,742,742,742,,742,742,742,',
'742,742,,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,,742,,',
',,,742,,,,,,,,742,,,,,742,742,742,742,742,742,,,,742,742,,,,,,,742,',
',742,742,742,433,433,433,,433,,,,433,433,,,,433,,433,433,433,433,433',
'433,433,,,,,,433,433,433,433,433,433,433,,,433,,,,,,,433,,,433,433,433',
'433,433,433,433,433,,433,433,433,,433,433,,433,433,433,,,,,,,,,,,,,',
',,,,,,433,,,433,,,433,433,,,433,,,,,,433,,,,,,,,433,,,,,433,433,433',
'433,433,433,,,,433,433,,,,,,,433,,,433,433,433,723,723,723,,723,,,,723',
'723,,,,723,,723,723,723,723,723,723,723,,,,,,723,723,723,723,723,723',
'723,,,723,,,,,,,723,,,723,723,723,723,723,723,723,723,,723,723,723,',
'723,723,,723,723,723,,,,,,,,,,,,,,,,,,,,723,,,723,,,723,723,,,723,,723',
',,,723,,,,,,,,723,,,,,723,723,723,723,723,723,,,,723,723,,,,,,,723,',
',723,723,723,717,717,717,,717,,,,717,717,,,,717,,717,717,717,717,717',
'717,717,,,,,,717,717,717,717,717,717,717,,,717,,,,,,,717,,,717,717,717',
'717,717,717,717,717,,717,717,717,,717,717,,717,717,717,,,,,,,,,,,,,',
',,,,,,717,,,717,,,717,717,,,717,,,,,,717,,,,,,,,717,,,,,717,717,717',
'717,717,717,,,,717,717,,,,,,,717,,,717,717,717,716,716,716,,716,,,,716',
'716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716,716,716,716,716',
'716,,,716,,,,,,,716,,,716,716,716,716,716,716,716,716,,716,716,716,',
'716,716,,,,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,,,,,,,,',
',,,,,,,,,,716,716,716,716,716,716,,,,716,716,,,,,,,716,,,716,716,716',
'475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475,475,,,,',
',475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475,475,475',
'475,475,475,475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475',
',,475,,,475,475,,,475,,475,,475,,475,,,,,,,,475,,,,,475,475,475,475',
'475,475,,,,475,475,,,,,,,475,,475,475,475,475,477,477,477,,477,,,,477',
'477,,,,477,,477,477,477,477,477,477,477,,,,,,477,477,477,477,477,477',
'477,,,477,,,,,,,477,,,477,477,477,477,477,477,477,477,,477,477,477,',
'477,477,,477,477,477,,,,,,,,,,,,,,,,,,,,477,,,477,,,477,477,,,477,,',
',,,477,,,,,,,,477,,,,,477,477,477,477,477,477,,,,477,477,,,,,,,477,',
',477,477,477,478,478,478,,478,,,,478,478,,,,478,,478,478,478,478,478',
'478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478,478',
'478,478,478,478,478,,478,478,478,,478,478,,478,478,478,,,,,,,,,,,,,',
',,,,,,478,,,478,,,478,478,,,478,,,,,,478,,,,,,,,478,,,,,478,478,478',
'478,478,478,,,,478,478,,,,,,,478,,,478,478,478,479,479,479,,479,,,,479',
'479,,,,479,,479,479,479,479,479,479,479,,,,,,479,479,479,479,479,479',
'479,,,479,,,,,,,479,,,479,479,479,479,479,479,479,479,,479,479,479,',
'479,479,,479,479,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479,,,479,,',
',,,479,,,,,,,,479,,,,,479,479,479,479,479,479,,,,479,479,,,,,,,479,',
',479,479,479,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705,705',
'705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705,705,705',
'705,705,705,705,705,,705,705,705,,705,705,,,,705,,,,,,,,,,,,,,,,,,,',
'705,,,705,,,705,705,,,705,,,,,,,,,,,,,,,,,,,705,705,705,705,705,705',
',,,705,705,,,,,,,705,,,705,705,705,699,699,699,,699,,,,699,699,,,,699',
',699,699,699,699,699,699,699,,,,,,699,699,699,699,699,699,699,,,699',
',,,,,,699,,,699,699,699,699,699,699,699,699,,699,699,699,,699,699,,699',
'699,699,,,,,,,,,,,,,,,,,,,,699,,,699,,,699,699,,,699,,,,,,699,,,,,,',
',699,,,,,699,699,699,699,699,699,,,,699,699,,,,,,,699,,,699,699,699',
'675,675,675,,675,,,,675,675,,,,675,,675,675,675,675,675,675,675,,,,',
',675,675,675,675,675,675,675,,,675,,,,,,,675,,,675,675,675,675,675,675',
'675,675,,675,675,675,,675,675,,675,675,675,,,,,,,,,,,,,,,,,,,,675,,',
'675,,,675,675,,,675,,,,,,675,,,,,,,,675,,,,,675,675,675,675,675,675',
',,,675,675,,,,,,,675,,,675,675,675,670,670,670,,670,,,,670,670,,,,670',
',670,670,670,670,670,670,670,,,,,,670,670,670,670,670,670,670,,,670',
',,,,,,670,,,670,670,670,670,670,670,670,670,,670,670,670,,670,670,,670',
'670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,,,,,,670,,,,,,',
',670,,,,,670,670,670,670,670,670,,,,670,670,,,,,,,670,,,670,670,670',
'669,669,669,,669,,,,669,669,,,,669,,669,669,669,669,669,669,669,,,,',
',669,669,669,669,669,669,669,,,669,,,,,,,669,,,669,669,669,669,669,669',
'669,669,,669,669,669,,669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,',
'669,,,669,669,,,669,,,,,,669,,,,,,,,669,,,,,669,669,669,669,669,669',
',,,669,669,,,,,,,669,,,669,669,669,668,668,668,,668,,,,668,668,,,,668',
',668,668,668,668,668,668,668,,,,,,668,668,668,668,668,668,668,,,668',
',,,,,,668,,,668,668,668,668,668,668,668,668,668,668,668,668,,668,668',
',668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,,668,,,,668,,668',
',,,,,,,668,,,,,668,668,668,668,668,668,,,,668,668,,,,,,,668,,668,668',
'668,668,667,667,667,,667,,,,667,667,,,,667,,667,667,667,667,667,667',
'667,,,,,,667,667,667,667,667,667,667,,,667,,,,,,,667,,,667,667,667,667',
'667,667,667,667,667,667,667,667,,667,667,,667,667,667,,,,,,,,,,,,,,',
',,,,,667,,,667,,,667,667,,,667,,667,,667,,667,,,,,,,,667,,,,,667,667',
'667,667,667,667,,,,667,667,,,,,,,667,,667,667,667,667,664,664,664,,664',
',,,664,664,,,,664,,664,664,664,664,664,664,664,,,,,,664,664,664,664',
'664,664,664,,,664,,,,,,,664,,,664,664,664,664,664,664,664,664,,664,664',
'664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,,664',
',,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664,664,,,,,,,664',
',,664,664,664,661,661,661,,661,,,,661,661,,,,661,,661,661,661,661,661',
'661,661,,,,,,661,661,661,661,661,661,661,,,661,,,,,,,661,,,661,661,661',
'661,661,661,661,661,661,661,661,661,,661,661,,661,661,661,,,,,,,,,,',
',,,,,,,,,661,,,661,,,661,661,,,661,,661,,661,,661,,,,,,,,661,,,,,661',
'661,661,661,661,661,,,,661,661,,,,,,,661,,661,661,661,661,660,660,660',
',660,,,,660,660,,,,660,,660,660,660,660,660,660,660,,,,,,660,660,660',
'660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660,660,660,660,,660',
'660,660,,660,660,,660,660,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660,660',
',,660,,,,,,660,,,,,,,,660,,,,,660,660,660,660,660,660,,,,660,660,,,',
',,,660,,,660,660,660,659,659,659,,659,,,,659,659,,,,659,,659,659,659',
'659,659,659,659,,,,,,659,659,659,659,659,659,659,,,659,,,,,,,659,,,659',
'659,659,659,659,659,659,659,,659,659,659,,659,659,,659,659,659,,,,,',
',,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,659,,,,659,,,,,,,,659,,,,,659',
'659,659,659,659,659,,,,659,659,,,,,,,659,,,659,659,659,630,630,630,',
'630,,,,630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630,630,630',
'630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630,630,,630',
'630,630,,630,630,,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630',
',,630,,,,,,630,,,,,,,,630,,,,,630,630,630,630,630,630,,,,630,630,,,',
',,,630,,,630,630,630,624,624,624,,624,,,,624,624,,,,624,,624,624,624',
'624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,,624,,,624',
'624,624,624,624,624,624,624,,624,624,624,,624,624,,624,624,624,,,,,',
',,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,,,,,624,,,,,,,,624,,,,,624',
'624,624,624,624,624,,,,624,624,,,,,,,624,,,624,624,624,518,518,518,',
'518,,,,518,518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518,518',
'518,518,518,518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518,518',
'518,518,518,,518,518,,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518',
'518,,,518,,518,,518,,518,,,,,,,,518,,,,,518,518,518,518,518,518,,,,518',
'518,,,,,,,518,,518,518,518,518,521,521,521,,521,,,,521,521,,,,521,,521',
'521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521,,,,,',
',521,,,521,521,521,521,521,521,521,521,521,521,521,521,,521,521,,521',
'521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,,521,,521,,,',
',,,,521,,,,,521,521,521,521,521,521,,,,521,521,,,,,,,521,,521,521,521',
'521,523,523,523,,523,,,,523,523,,,,523,,523,523,523,523,523,523,523',
',,,,,523,523,523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523',
'523,523,523,,523,523,523,,523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523',
',,523,,,523,523,,,523,,,,,,523,,,,,,,,523,,,,,523,523,523,523,523,523',
',,,523,523,,,,,,,523,,,523,523,523,528,528,528,528,528,,,,528,528,,',
',528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528,',
',528,,,,,,528,528,528,528,528,528,528,528,528,528,528,528,,528,528,528',
',528,528,,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,',
'528,,,,528,,,,,,,,528,,,,,528,528,528,528,528,528,,,,528,528,,,,,,528',
'528,,,528,528,528,612,612,612,,612,,,,612,612,,,,612,,612,612,612,612',
'612,612,612,,,,,,612,612,612,612,612,612,612,,,612,,,,,,,612,,,612,612',
'612,612,612,612,612,612,612,612,612,612,,612,612,,612,612,612,,,,,,',
',,,,,,,,,,,,,612,,,612,,,612,612,,,612,,612,,612,,612,,,,,,,,612,,,',
',612,612,612,612,612,612,,,,612,612,,,,,,,612,,612,612,612,612,536,536',
'536,,536,,,,536,536,,,,536,,536,536,536,536,536,536,536,,,,,,536,536',
'536,536,536,536,536,,,536,,,,,,,536,,,536,536,536,536,536,536,536,536',
',536,536,536,,536,536,,,,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536',
',,536,,,,,,,,,,,,,,,,,,,536,536,536,536,536,536,,,,536,536,,,,,,,536',
',,536,536,536,538,538,538,,538,,,,538,538,,,,538,,538,538,538,538,538',
'538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,,,538,,,538,538,538',
'538,538,538,538,538,538,538,538,538,,538,538,,538,538,538,,,,,,,,,,',
',,,,,,,,,538,,,538,,,538,538,,,538,,538,,538,,538,,,,,,,,538,,,,,538',
'538,538,538,538,538,,,,538,538,551,551,,,551,,538,,538,538,538,538,',
'551,551,,551,551,551,551,551,551,551,,,551,551,,,,551,551,551,551,,',
',,,551,,,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551,551,',
',551,,,,,,,,,,552,552,,,552,,,,,,551,,,552,552,551,552,552,552,552,552',
'552,552,,,552,552,,,,552,552,552,552,,,,,,552,,,,,,,,552,552,,552,552',
'552,552,552,552,552,552,552,552,552,,,552,,,,,,,,,,775,775,,,775,,,',
',,552,,,775,775,552,775,775,775,775,775,775,775,,,775,775,,,,775,775',
'775,775,,,,,,775,,,,,,,,775,775,,775,775,775,775,775,775,775,775,775',
'775,775,,,775,,,,,,,,,,774,774,,,774,,,,,,775,,,774,774,775,774,774',
'774,774,774,774,774,,,774,774,,,,774,774,774,774,,,,,,774,,,,,,,,774',
'774,,774,774,774,774,774,774,774,774,774,774,774,,,774,,,,,,,,,,1026',
'1026,,,1026,,,,,,774,,,1026,1026,774,1026,1026,1026,1026,1026,1026,1026',
',,1026,1026,,,,1026,1026,1026,1026,,,,,,1026,,,,,,,,1026,1026,,1026',
'1026,1026,1026,1026,1026,1026,1026,1026,1026,1026,,,1026,,,,,,,,,,663',
'663,,,663,,,,,,1026,,,663,663,1026,663,663,663,663,663,663,663,,,663',
'663,,,,663,663,663,663,,,,,,663,,,,,,,,663,663,,663,663,663,663,663',
'663,663,663,663,663,663,,,663,,,,,,,,,,662,662,,,662,,,,,,663,,,662',
'662,663,662,662,662,662,662,662,662,,,662,662,,,,662,662,662,662,,,',
',,662,,,,,,,,662,662,,662,662,662,662,662,662,662,662,662,662,662,,',
'662,,,,,,,,,,1031,1031,,,1031,,,,,,662,,,1031,1031,662,1031,1031,1031',
'1031,1031,1031,1031,,,1031,1031,,,,1031,1031,1031,1031,,,,,,1031,,,',
',,,,1031,1031,,1031,1031,1031,1031,1031,1031,1031,1031,1031,1031,1031',
',,1031,,,,,,,,,,1032,1032,,,1032,,,,,,1031,,,1032,1032,1031,1032,1032',
'1032,1032,1032,1032,1032,,,1032,1032,,,,1032,1032,1032,1032,,,,,,1032',
',,,,,,,1032,1032,,1032,1032,1032,1032,1032,1032,1032,1032,1032,1032',
'1032,,1050,1032,1050,1050,1050,1050,1050,,,,,275,275,,,275,1050,,,,',
'1032,,,275,275,1032,275,275,275,275,275,275,275,,,275,275,1050,,,275',
'275,275,275,,,1050,1050,1050,1050,,,,,,,,275,275,,275,275,275,275,275',
'275,275,275,275,275,275,,,275,,,,,,,,,1050,473,473,,,473,,,,,,275,,',
'473,473,275,473,473,473,473,473,473,473,,,473,473,,,,473,473,473,473',
',,,,,473,,,,,,,,473,473,,473,473,473,473,473,473,473,473,473,473,473',
',,473,,,,,,,,,,474,474,,,474,,,,,,473,,,474,474,473,474,474,474,474',
'474,474,474,,,474,474,,,,474,474,474,474,,,,,,474,,,,,,,,474,474,,474',
'474,474,474,474,474,474,474,474,474,474,,,474,,,,,,,,,,539,539,,,539',
',,,,,474,,,539,539,474,539,539,539,539,539,539,539,,,539,539,,,,539',
'539,539,539,,,,,,539,,,,,,,,539,539,,539,539,539,539,539,539,539,539',
'539,539,539,,,539,,,,,,,,,,227,227,,,227,,,,,,539,,,227,227,539,227',
'227,227,227,227,227,227,,,227,227,,,,227,227,227,227,,,,,,227,,,,,,',
',227,227,,227,227,227,227,227,227,227,227,227,227,227,,,227,,,,,,,,',
',614,614,,,614,,,,,,227,,,614,614,227,614,614,614,614,614,614,614,,',
'614,614,,,,614,614,614,614,,,,,,614,,,,,,,,614,614,,614,614,614,614',
'614,614,614,614,614,614,614,,,614,,,,,,,,,,226,226,,,226,,,,,,614,,',
'226,226,614,226,226,226,226,226,226,226,,,226,226,,,,226,226,226,226',
',,,,,226,,,,,,,,226,226,,226,226,226,226,226,226,226,226,226,226,226',
',,226,,,,,,,,,,540,540,,,540,,,,,,226,,,540,540,226,540,540,540,540',
'540,540,540,,,540,540,,,,540,540,540,540,,,,,,540,,,,,,,,540,540,,540',
'540,540,540,540,540,540,540,540,540,540,,,540,,,,,,,,,,613,613,,,613',
',,,,,540,,,613,613,540,613,613,613,613,613,613,613,,,613,613,,,,613',
'613,613,613,,,,,,613,,,,,,,,613,613,,613,613,613,613,613,613,613,613',
'613,613,613,,738,613,738,738,738,738,738,973,,973,973,973,973,973,,',
'738,,,,,613,,973,,939,613,939,939,939,939,939,,,,,,,738,,,939,,,,973',
',738,738,738,738,,,,973,973,973,973,,,,,825,939,825,825,825,825,825',
',,,939,939,939,939,,,825,,,,,738,,,,,,,973,,,,,,,,,,825,,,,,,,,939,825',
'825,825,825,,,,,,,,,,,,,,,,,,,,,,,,,825,,,,,,,,825' ]
        racc_action_check = arr = ::Array.new(25286, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1396,  5616,  1379,   nil,   520,   nil,   nil, 15823,  1527,
   nil,  2061,  2337,   908,   nil,   876,   861,   122,   891,  1218,
   307,   nil,    70, 11471,  3287,   928,   nil,   577,   nil,   142,
  1786,  1054, 11607, 11743, 11879,   nil,  5479, 12015, 12151,   nil,
   815,   427,   433,   880,   293, 12423, 12559,   669, 12695,   784,
  1025,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1654,   nil,   329, 12967,   nil,   154,   nil, 13103, 13239,   nil,
   nil, 13375, 13511,   785,   nil,  2613,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   737,
   722,   717,   716,  2199,   nil,   nil,   nil,   652,   nil,   nil,
   786,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 13783,   nil,   nil,   nil,   nil, 13919, 14055,
 14191, 14327, 14463,   732,   nil,   494,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   705,   nil,  6301,
 14599, 14735, 14871, 15007, 15143, 15279, 24881, 24735,   nil, 15415,
 15551, 15687,   nil,   nil,   928,    96,   112,   777,   222,   690,
   710,   nil, 16095,  4383,   698, 16231, 16367, 16503, 16639, 16775,
 16911, 17047, 17183,  6711,  6847,  6983,  7119,  7255,  7391,  7527,
  7663,  7799,  7935,  8071,  8207,  8343,  8479,   nil,   nil,   nil,
   nil,  8615,   nil,   nil,   nil, 24443,   nil,   nil,   690,  8751,
   nil,   nil,   685,   nil,   nil,   nil,  8887,   nil,   nil,  9023,
   nil,  3561,   nil,   644,   558,   nil,  9295,   587,  9567,   nil,
  9703,  9839,   nil,   nil,   607,   nil,   nil, 10111,  1472,   nil,
   352,  6575,   354,   365,   314, 17319,  5890,  1154,  1142,  1093,
  1370,   993,   nil,  1330,  1286,   195,   nil,   nil,   nil,  1315,
   642,  1265, 17863,   nil,   435,  1325,  1324,   612,   nil,  1319,
 18543,   nil, 18679,  3424,   nil, 18815,  1294,   nil,   443,   548,
  1274, 19087,   nil,   nil,  1274,   649,    69,   157, 19223,  5068,
  4931,   693,  1350,  1234,    39,   161,   485,  1304,   138,  1334,
   nil,   nil, 19359,   nil, 19495,   356,   364,   530,   535,   550,
   623,   331,   689,   529,   nil,   405,   nil,   nil,   nil,   nil,
   nil,   419,   nil,   229,   nil,   255,   nil,  1220,   365,   nil,
  1219,   260,   nil,  1217,    30,   nil,  1216,     0,   nil,   300,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  6438,  2475,   nil,   nil,   nil,   nil,  1225,
   nil,  1205,   nil, 20039,  1203,   nil,  1181,   nil,   563,   234,
   nil,   nil,   nil,  2876,   nil,   nil,   nil,   nil,   nil,  3013,
  1181,   nil,   nil,  1173,  1171,   436,   437,  1182,   nil,   nil,
   nil,   262,   518,  1209,   nil,   nil,  1522,  1390,   nil,   nil,
   nil,   187,   nil, 24516, 24589, 20583,   239, 20719, 20855, 20991,
  4520,  4931,    90,   507,  1173,  1163,  1162,  1149,  1604,  1277,
  1472,  5068,  5205,  4109,  4794,  4246,  3972,  1010,  1002,  4657,
  4383,  3835,   734,  1170,   nil,  1310,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1050,  1049,   nil,   nil, 22895,   nil,
   nil, 23031,   nil, 23167,   nil,   nil,   nil,   nil, 23303,  1410,
  1062,  1047,  1012,   nil,   nil,  1006, 23575,   986, 23711, 24662,
 24954,   831,   985,   nil,   nil, 10655,   936,   nil,   969, 11063,
 11199, 23786, 23859,   870,  3424, 11335,  1045,  1046,  1002,   nil,
   nil, 10927,   nil,   nil, 10791,   nil,   946,   nil,   682,   986,
   nil,  1146,   nil,   947,   950,   nil,   956,   957,   959,   nil,
   nil,   nil,   nil,   nil,   nil,   952,   nil,   752,   nil, 10519,
   nil,   nil,   nil,  1048,   nil,   nil,   nil,  1049,   nil,   nil,
  1051,  5342,  1106,   nil,  3150,    96,  1137,  1141,  1138,  1155,
   nil,   nil, 23439, 25027, 24808,   122,   nil,   360,   334,   245,
   nil,   979,   nil,  1079, 22759,   nil,  1098,   nil,   nil,   nil,
 22623,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   318,   nil,   nil,   195,   nil,   nil,   nil,  1075,
   nil,   nil,  1076,   nil,  1098,   nil,  1923,   nil,  1083, 22487,
 22351, 22215, 24224, 24151, 22079,   513,  1120, 21943, 21807, 21671,
 21535,  1131,   nil,   nil,   nil, 21399, 10383,  1134,   nil,   nil,
   270,   271,     0,   920,  1137,  1136,   nil,   219,  1242,   119,
   nil,  1158,   nil,  1265,   nil,   nil,  1149,   nil,  1194, 21263,
   nil,   nil,   nil,   nil,    26, 21127,  1163,   nil,  1171,   166,
    58,  1211,   323,   794,  1214,  1177, 20447, 20311,  1248,  1249,
   193,   499,   nil, 20175,   nil,   nil,  1207,   586,   nil,   nil,
    93,  1211,   444,   nil,   nil,   115,   851,   nil, 25089,   nil,
  7163,   nil, 19903,   nil,   656,   nil,  1216,   257,   nil,  1222,
   nil,   nil,   nil,   nil,   330,   nil,  1340,   nil,   nil,   nil,
   nil,   nil,  1347,   nil, 19767,  1231,    32,   127,   156,   158,
     0,   nil,  1220,   nil, 24005, 23932, 19631,   nil,   nil,   nil,
   596,  4657,  4794,  1585,   583,  2751,   155,  1184,  5753,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1239, 18951,  1244,   389,
   428,   134,   390,  3150, 18407,   nil,  1258,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil, 18271, 18135, 17999,
 17727,    94, 17591,   nil,   nil, 25151,   nil,  3835,   nil,   nil,
  1301,   nil,    77,   nil,   nil,   nil,  1290,   359,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  3972,   nil,  1292,  1336,   nil,
   nil,   nil,   nil,   nil,  4109,  4246,  1297,  -102,   -29,   nil,
   nil,   nil,   -15,    49,   nil,    68,   168,   nil,   194,   nil,
   238,   616,   243,   888,   nil,   386,   nil,   nil, 17455,   nil,
  4520,   396,   nil,   nil,   151,   164,   469,   302,  1277,   nil,
   356,  2876, 10247,   658,   541,   595,   492,   665,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   505,   525,   459,   nil,   nil,
  9975,  9431,  3698,   587,   589,   nil,   615,   619,   621,   nil,
   643,   636,   624,  9159,   nil,   nil,   nil,   nil,  6164,  6027,
   nil,   142, 15959,   nil,   707,   812,  1356,   nil,   nil, 25114,
   nil,  7299,   nil,  7435,   nil,  6755,   nil,   nil,   nil,   nil,
   455,   929,   713,   nil,   153,   nil,   nil, 13647,  5205,   nil,
   nil,   839,   705,   nil,   nil,   nil,   nil,   nil,   761,   nil,
   351,   nil,   nil, 25096,   nil,   nil,   482,   nil,  1453,   nil,
   nil,   766, 12831,  1004,   821,   nil,   870,  3561,  1026,  1058,
  1062,   827,  1099,   nil,   nil,   nil,   422,   nil,   nil,   nil,
   757,   767,   769,   771,   772,   645,   774,  1115,  3698,   nil,
   308,   nil,   nil,  3287,  3013,   782,   nil,   nil,   792,   793,
   794,   801,   nil,   802,   nil,  1132, 24078,   nil,   nil,   931,
 12287, 24297, 24370,  1190,   nil,  1389,  6891,   nil,   nil,   nil,
   nil,   913,   829,   491,   nil,   nil,   nil,   956,   963,   nil,
 24432,   nil,  1717,   nil,   715,   nil,  7027,   nil,   nil,   919,
   920,   nil,   886,   133,   118,   160,  1299,   nil,   901,   903,
   nil,   nil,   nil,   906,  1085,  1104,  1105,   127,   nil,   983,
   nil,   nil,   nil,   nil,   534,   nil ]

racc_action_default = [
    -1,  -640,  -639,  -640,    -2,  -626,    -4,    -5,  -640,    -8,
    -9,  -640,  -640,  -640,   -35,  -640,  -640,   -40,  -640,  -640,
  -294,   -51,  -628,  -640,   -56,   -61,   -62,   -63,   -67,  -273,
  -273,  -273,  -308,  -341,  -342,   -79,  -639,   -83,   -91,   -93,
  -640,  -533,  -534,  -640,  -640,  -640,  -640,  -232,  -640,  -628,
  -246,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -613,  -296,  -299,  -639,  -306,  -316,  -421,  -640,  -640,   -58,
   -58,  -626,  -640,  -326,  -333,  -640,  -343,  -344,  -346,  -347,
  -348,  -349,  -350,  -351,  -352,  -353,  -354,  -355,  -364,  -466,
  -467,  -468,  -469,  -470,  -471,  -639,  -474,  -639,  -639,  -639,
  -639,  -639,  -639,  -639,  -511,  -517,  -518,  -611,  -522,  -523,
  -612,  -525,  -526,  -527,  -528,  -529,  -530,  -531,  -532,  -537,
  -538,  1086,    -3,  -627,  -635,  -636,  -637,    -7,  -640,  -640,
  -640,  -640,  -640,  -640,   -23,  -640,  -122,  -123,  -124,  -125,
  -126,  -127,  -128,  -129,  -130,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,
  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,
  -199,  -200,  -201,  -202,  -203,  -204,  -205,   -28,  -131,  -639,
  -640,  -640,  -640,  -640,  -640,  -639,  -640,  -640,  -623,  -640,
  -640,  -628,  -629,   -55,  -640,  -533,  -534,  -640,  -294,  -640,
  -640,  -238,  -640,  -639,  -640,  -640,  -640,  -640,  -640,  -640,
  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -640,
  -640,  -640,  -640,  -640,  -640,  -640,  -640,  -247,  -248,  -249,
  -250,  -640,  -357,  -450,  -429,  -640,  -624,  -625,   -68,  -640,
  -315,  -356,  -640,  -443,  -445,   -74,  -639,  -440,   -75,  -628,
   -76,  -253,  -268,  -639,  -639,  -272,  -640,  -278,  -640,  -606,
  -640,  -640,   -77,   -78,  -626,   -16,   -17,  -640,   -20,   -21,
   -81,  -639,  -628,  -640,   -84,   -87,  -639,   -99,  -100,  -640,
  -640,  -107,  -308,  -311,  -628,  -433,  -341,  -342,  -345,  -441,
  -640,   -89,  -640,   -95,  -304,  -519,  -520,  -640,  -226,  -227,
  -640,  -239,  -640,  -639,  -298,  -640,  -640,  -254,  -632,  -632,
  -640,  -639,  -317,  -318,  -565,   -57,  -640,  -640,  -640,  -639,
  -639,  -626,  -640,  -627,  -533,  -534,  -640,  -640,  -294,  -640,
  -374,  -375,  -640,  -329,  -640,  -122,  -123,  -165,  -166,  -167,
  -183,  -188,  -195,  -198,  -336,  -640,  -533,  -534,  -601,  -602,
  -472,  -640,  -495,  -640,  -497,  -640,  -499,  -640,  -640,  -479,
  -640,  -640,  -485,  -640,  -640,  -491,  -640,  -640,  -493,  -640,
  -510,  -512,  -513,  -514,  -515,    -6,  -638,   -29,   -30,   -31,
   -32,   -33,   -10,  -639,  -640,   -25,   -26,   -27,  -132,  -640,
   -36,   -38,   -39,  -640,  -640,   -37,  -640,   -41,  -640,  -294,
   -49,   -50,  -206,  -258,  -278,   -52,   -53,   -42,  -207,  -258,
  -628,  -263,  -264,  -639,  -639,  -614,  -615,  -273,  -438,  -616,
  -617,  -615,  -614,  -273,  -437,  -439,  -616,  -617,   -48,  -215,
   -54,  -628,  -314,  -640,  -640,  -639,  -304,  -640,  -640,  -640,
  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -228,  -229,
  -230,  -231,  -233,  -234,  -235,  -236,  -237,  -240,  -241,  -242,
  -243,  -628,  -251,  -640,  -451,  -273,  -614,  -615,   -65,   -69,
  -274,  -434,  -447,  -450,  -628,  -628,  -310,  -269,  -640,  -277,
  -270,  -640,  -275,  -640,  -279,  -609,  -610,   -15,  -627,   -19,
  -640,  -628,   -80,  -302,   -96,   -85,  -640,  -628,  -639,  -640,
  -640,  -106,  -640,  -519,  -520,  -640,   -92,   -97,  -640,  -640,
  -640,  -640,  -640,  -252,  -244,  -640,  -458,  -640,  -300,  -630,
  -255,  -634,  -633,  -257,  -634,  -305,  -640,  -604,  -632,  -640,
  -422,  -565,  -425,  -600,  -600,  -548,  -550,  -550,  -550,  -564,
  -566,  -567,  -568,  -569,  -570,  -571,  -572,  -640,  -574,  -640,
  -580,  -582,  -583,  -585,  -590,  -592,  -593,  -595,  -596,  -597,
  -640,  -639,  -365,  -366,  -639,  -640,  -640,  -640,  -640,  -640,
  -360,  -453,  -639,  -640,  -640,  -304,   -58,  -117,  -118,  -640,
  -120,  -640,  -294,  -639,  -640,  -334,  -543,  -338,  -621,  -622,
  -640,  -473,  -496,  -501,  -502,  -504,  -475,  -498,  -476,  -500,
  -477,  -478,  -640,  -481,  -483,  -640,  -484,  -487,  -488,  -640,
  -489,  -490,  -640,  -516,  -640,   -24,  -640,   -34,  -284,  -640,
  -640,  -639,  -640,  -640,  -640,  -442,  -640,  -265,  -267,  -640,
  -640,   -70,  -261,  -262,  -435,  -640,  -640,   -72,  -436,  -313,
  -614,  -615,  -614,  -615,  -628,  -640,  -428,  -639,   -64,  -430,
  -447,  -640,  -448,  -640,  -260,  -309,  -639,  -276,  -280,  -640,
  -607,  -608,   -18,   -22,   -82,  -640,   -88,   -94,  -628,  -614,
  -615,  -639,  -103,  -105,  -640,   -90,  -640,  -640,  -224,  -225,
  -628,  -639,  -358,  -639,  -297,  -363,  -628,  -632,  -307,  -605,
  -640,  -628,  -640,  -546,  -547,  -640,  -640,  -557,  -640,  -560,
  -640,  -562,  -640,  -376,  -640,  -378,  -380,  -387,  -571,  -628,
  -576,  -584,  -594,  -598,  -639,  -367,  -639,   -59,  -368,  -369,
  -321,  -322,  -640,  -324,  -640,  -628,  -614,  -615,  -618,  -303,
  -639,  -117,  -118,  -119,  -640,  -640,  -639,  -327,  -539,  -541,
  -330,  -639,  -639,  -565,  -565,  -640,  -628,  -640,  -639,  -480,
  -482,  -486,  -492,  -494,   -11,  -133,  -282,  -640,  -628,  -614,
  -615,  -615,  -614,  -259,  -640,  -631,  -639,   -44,  -209,   -45,
  -210,   -71,   -46,  -212,   -47,  -211,   -73,  -640,  -640,  -640,
  -640,  -442,  -640,  -410,  -411,  -628,  -413,  -639,  -432,  -431,
  -640,  -444,  -639,  -446,  -271,  -281,   -86,  -101,   -98,  -214,
  -312,   -12,   -14,  -359,  -361,  -639,  -465,  -459,  -639,  -460,
  -461,  -301,  -256,  -423,  -639,  -639,  -415,  -628,  -600,  -581,
  -599,  -549,  -550,  -550,  -575,  -550,  -550,  -591,  -550,  -586,
  -628,  -640,  -385,  -640,  -573,  -640,  -362,  -370,  -640,  -372,
  -639,  -640,   -60,  -323,  -640,  -442,  -640,  -117,  -118,  -121,
  -628,  -639,  -640,  -640,  -640,  -640,  -628,  -640,  -339,  -603,
  -503,  -506,  -507,  -508,  -509,  -640,  -283,  -442,   -43,  -208,
  -266,  -640,  -245,  -600,  -600,  -392,  -639,  -639,  -639,  -409,
  -640,  -628,  -571,  -640,  -578,  -588,  -452,   -66,  -639,  -639,
  -464,  -640,  -640,  -463,  -640,  -640,  -640,  -424,  -545,  -640,
  -553,  -640,  -555,  -640,  -558,  -640,  -561,  -563,  -377,  -379,
  -383,  -640,  -388,  -319,  -640,  -373,  -320,  -640,  -639,  -325,
  -442,  -640,  -640,  -331,  -335,  -337,  -542,  -544,  -543,  -505,
  -640,  -390,  -391,  -400,  -394,  -402,  -640,  -405,  -640,  -407,
  -412,  -640,  -640,  -577,  -640,  -449,  -639,  -639,  -108,  -109,
  -640,  -640,  -116,  -462,  -426,  -427,  -628,  -417,  -419,  -420,
  -550,  -550,  -550,  -550,  -381,  -640,  -386,  -640,  -639,  -280,
  -639,  -328,  -540,  -639,  -639,  -600,  -579,  -393,  -639,  -639,
  -639,  -639,  -589,  -639,  -414,  -587,  -640,  -304,   -13,  -458,
  -639,  -640,  -640,  -115,  -416,  -640,  -640,  -551,  -554,  -556,
  -559,  -640,  -384,  -639,  -454,  -455,  -456,  -640,  -640,  -389,
  -640,  -397,  -640,  -399,  -640,  -403,  -640,  -406,  -408,  -303,
  -618,  -457,  -628,  -614,  -615,  -618,  -114,  -418,  -550,  -382,
  -371,  -332,  -340,  -639,  -639,  -639,  -639,  -442,  -552,  -640,
  -395,  -398,  -401,  -404,  -639,  -396 ]

clist = [
'6,450,230,126,352,292,292,292,328,328,384,721,274,344,287,4,233,520',
'609,226,355,355,139,139,355,601,604,276,422,342,432,435,293,293,293',
'509,142,142,411,314,782,144,144,328,356,357,359,360,361,9,560,563,278',
'285,288,9,557,123,875,134,218,347,514,348,122,441,312,724,441,126,431',
'444,546,441,331,313,579,503,310,881,447,355,355,355,355,468,139,867',
'700,749,949,857,773,392,665,394,396,399,402,405,408,394,863,32,865,417',
'418,419,420,32,572,842,691,917,139,827,760,761,697,763,864,697,127,1022',
'32,623,999,625,733,734,362,700,632,32,32,32,639,32,393,643,997,726,643',
'351,409,372,522,891,524,642,525,526,645,624,457,463,893,1013,374,781',
'626,785,968,369,353,566,388,919,32,32,9,689,32,350,340,445,446,520,656',
'421,921,690,472,470,471,920,290,302,303,275,882,918,757,996,2,1,570',
'1022,292,853,354,569,730,505,424,371,217,512,513,832,458,687,1044,430',
'440,764,952,440,848,931,434,434,440,451,32,999,949,390,391,32,32,32',
'32,32,473,700,395,415,467,1067,516,398,530,401,404,448,870,889,407,900',
'469,684,292,787,788,410,892,702,429,292,928,1018,292,532,762,929,511',
'697,697,862,729,841,883,859,1016,133,706,630,385,293,777,981,313,658',
'451,715,328,627,867,293,830,519,519,579,1006,343,345,,,,,,126,328,542',
'1000,,294,294,294,,355,,287,708,,,693,,539,32,32,32,32,32,32,32,731',
'821,864,32,32,32,1045,547,605,,551,349,1019,,531,1020,328,32,328,537',
'1070,1042,567,313,535,837,310,529,313,528,864,310,126,,,,527,,,613,',
'698,,,569,,701,,,1028,,,,32,,1014,790,1069,953,790,32,765,,32,956,558',
',,,959,,606,607,,457,463,,964,965,,,32,885,,698,32,938,569,,1073,32',
',834,608,6,679,,,703,,,811,852,666,,,510,816,139,654,798,662,750,864',
'673,907,515,32,836,32,678,292,142,,519,519,,144,672,,458,,32,32,32,',
',,694,695,711,971,972,9,1011,655,451,,,,700,,711,671,685,704,,1061,467',
'677,,707,673,,,,,894,895,,,469,,448,,858,672,441,579,579,328,720,796',
'697,292,,441,441,,328,698,569,441,441,,,458,32,807,809,,688,834,,812',
'814,849,960,458,451,,547,896,897,711,,860,,,860,547,,835,,467,890,958',
'294,,,1071,1072,,,,,467,294,,,,935,,1049,,,847,,,32,780,,,,,,786,,292',
'737,739,741,,457,463,869,770,,914,,458,,,987,,,758,961,,,,,,451,,,,444',
',,,,,,779,,1008,,467,568,,829,32,,,,,292,,915,,743,32,754,,,756,,,458',
'906,441,,,,,440,,,32,,,451,908,,440,440,666,,1046,139,440,440,,840,',
',467,828,328,851,,,,142,,,,823,144,328,666,,808,810,,,519,673,813,815',
'678,,874,,32,711,795,32,1077,547,,672,,856,,32,,,,,838,846,898,850,',
'434,,32,1047,1048,,,,32,,,,,,899,839,,1015,,,914,,666,914,,914,292,',
',879,,879,,,,,458,569,32,32,,884,,,,,,32,32,,,451,,32,32,666,,,860,',
',915,467,,915,,915,,,,696,,743,139,440,872,,,,,,519,856,1062,1009,937',
'886,,,,,,,,,,,914,948,914,,914,909,914,905,,,823,355,,,,,727,,808,810',
'815,813,,,,355,933,966,,914,,,,,,954,,,,,866,915,868,915,,915,926,915',
',962,666,32,940,942,,944,946,32,947,,,,32,32,930,,,,,32,915,963,,934',
'328,967,,,,,,856,,328,,32,29,,,,,,29,,974,974,974,,,955,,,743,,743,',
',29,32,,,,909,,,,29,29,29,,29,,806,,,,32,916,975,977,979,,,328,,32,32',
',,711,1012,,,,,,,985,986,,,29,29,,,29,1034,,,32,,32,,,846,,,,,,1031',
',32,32,,,,1010,,,,1004,743,292,,,,,879,,1037,1038,1039,1040,,458,974',
'974,974,974,,974,,,,,1029,29,451,32,32,,29,29,29,29,29,467,,,,879,666',
'467,,,,1043,,,1051,1053,1055,1057,,1058,743,,743,32,,1001,,1002,,1003',
',,,,,974,974,974,974,,,,1078,,,,974,,,,,,32,,,,743,,,,,,1021,,1023,',
',,,1080,1081,1082,1083,32,,,,,32,32,1085,,,,,,,29,29,29,29,29,29,29',
',32,,29,29,29,,,,,,,,,,,,29,,,,,,,,,,,1068,,,,,,,,,,,,,,1074,,1075,',
'1076,,,,,,,29,,,,,,,29,,,29,,,,,,,,1084,,,,,,,,,,29,,,,29,,,,,29,,,',
',,,,,,,,,,,,,,,,,,,,,,,29,,29,,,,,,,,,,,,,29,29,29,,,,,,,,19,,,,,,19',
',,,,,,,,,,,,,,234,,,,,,,,,234,234,234,,19,319,319,,,,,,,,,,,,,,,,,,',
'29,,,,,,,,,,234,234,,,234,366,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29',
',,,,,,,,,,,,,19,,,,,234,234,234,234,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'29,,,,,,,,,,29,,,,,,,,,,,,,,,,,29,,,16,,,,,,16,,,,,,,,,,,,,,,,,,,,,19',
'234,438,234,234,438,234,16,,,438,234,234,,,,29,,,29,,,,,19,,,29,,,,',
',,,,,,,29,,,,370,,29,,,,,,,,,,,,,,,234,,,,,,,234,,,234,,,,,29,29,,,',
',,,,29,29,,,19,,29,29,19,,16,,319,19,,,,,,16,,,,,,,,,,319,,,,,,,,,,',
'19,,19,,,,,,,,,,,,,234,19,19,,,,,,,,,,,,621,,621,,,,,,,,,,,,,,,,41,',
',,,,41,,,,,,,,29,,,,,16,29,436,,,436,29,29,,,436,,,29,19,41,317,317',
',,,,,,16,,,,,29,,,,,,,,,,,,,,,,,,,,,,364,29,,386,,,,,,,,,,,,234,,,,29',
',,,,,,,,29,29,,,,,,,,16,,,,16,,,,,16,,,,,41,29,,29,,,,,,41,,,,,29,29',
',19,,,,,16,,16,319,,234,,,,,,,319,,,,16,16,,,,,234,,,,,,,29,29,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,19,,,19,,,41,,,,,234,16,,,,,,,,29',
',,234,,,,,,234,41,,,,,,,,,,,29,,,,,29,29,,,,,,,,,,,,438,234,,,29,,,',
',438,438,,,,,438,438,,,,,,,,,,,,,,,,,,,41,,,,41,,,,317,41,319,,,,,,',
',,,,319,,16,,317,,,,,,,,,,,41,,41,,,,,,,,,,,,,,41,41,,,,,,,,,,,,386',
',386,,,,20,,,,19,,20,,,,234,,,,,19,19,,,,,,19,,,16,,,16,,,,,,20,321',
'321,,438,,,,,,,41,,,,,,,,,,,,,,,,19,,,,,,,,,368,,,,,,,,,19,,,,,436,',
',,19,19,,,,436,436,,,,,436,436,,,,,,,,,,,,234,,19,,,,,,,20,,,,19,234',
',,,20,,,,,,,,,,,,,,,,,,,,41,,,,,,,983,317,,,,19,19,18,,990,317,,,18',
',,,,,,,,,,,,,,,,,,,,,19,,16,,,,18,,,,,,,16,16,,,,,,16,,,,1025,20,,439',
',19,439,41,,,41,439,436,,,,,,,,,,,,,20,19,,,,,19,19,,,16,,,,,,,,,,,',
',234,,,,,16,,,,,,,,,16,16,,,,,,18,,,,,,,,,18,,,,,,,,,,16,20,,,,20,,',
',321,20,16,,,,,,,,,,,,317,,42,321,,,,,42,,,317,,,20,,20,,,,,,,,,16,16',
',,993,20,20,,,,,42,318,318,,,,,622,,622,,,,,,,,,18,16,18,,,18,,,,,18',
'41,,,,,,,365,,,387,41,41,18,,,,,41,16,,,,,,,,,,20,,,,,,,,,,,16,,,,,16',
'16,,,,,,,,,,,41,42,,,,,,,,,42,,,,,,,,41,,18,,,,18,,,41,41,18,,,,,,,',
',,,,,,,,,,,,,,,,41,,,18,,18,,,,,,41,,,,,,,,18,18,,,,20,,,,,,,,321,,',
',,,,,,321,,386,42,,,,41,41,,,988,,,,,,,,,,,,,,,,42,,,,,,,,,,41,,,,,18',
',,,,,,,,,,,,,20,,,20,,386,,,,,41,,,,,,,,,,,,,,,,,,,,,41,,,,42,41,41',
',42,,,,318,42,,,,,,,,,,,,,,,439,318,,,,,,,,439,439,,42,,42,439,439,',
',,,,,,,,,,42,42,,,18,,,,,,,,,387,,387,,321,,,,,,,,,,,321,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,18,,,18,,20,,,,,,,,,,,20,20,',
',,,904,20,,,,,,,,,,,,,,,,439,,,,,,,,,,,,,,,,,,,,18,,,20,,,,,,18,18,',
',,,18,18,241,,,,20,,,,,291,291,291,,20,20,,42,,,,,,338,339,318,341,',
',,,,,,318,,,,,,20,291,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,622',
',,,,20,20,42,,992,42,18,,,,,,,,,,,18,18,,,,,,18,,,,,,20,,,,,,,,,,18',
',,,,,,,,,,,,,622,,,,,20,,,,18,,,,,,,,,,,,,,,,,20,18,,,,20,20,,,,18,18',
',,,,,,,,,,,,,,318,,,,291,443,,,449,291,18,318,,449,,,,,,,,18,,,,,241',
',,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496',
'497,498,499,500,501,,,,,502,,,18,18,,,,291,,42,,,,,291,,,291,,,42,42',
',,291,,291,42,291,291,,,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,42,,553',
',554,,,,,,,,,291,,,18,,42,,,18,18,,,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,',
'42,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,387,,,,,42,42,,,989',
',,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,291,,449,449,449,,,,,,,,,,,,,,387,',
',,,42,,,,,,,,,,,,,,,,,,,,291,42,,291,,291,42,42,,,,,,,,,,,,,291,,,,',
',,,,,,718,719,,,,,,,,,,,291,,,291,,,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,',
',,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291',
'449,291,,,803,,,291,291,449,449,,,,,449,449,,,,,,,,,,,,,,,,,,,,,,,291',
',,,,,,,,,,,,,,,,,449,,,,,,291,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,',
',,,,,291,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,291,,,,,,,449,,,,,,,,,,',
',,449,449,449,449,,912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291,449,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,291' ]
        racc_goto_table = arr = ::Array.new(3883, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,35,39,118,102,45,45,45,78,78,69,14,169,60,85,2,26,87,113,37,30,30',
'70,70,30,106,106,37,10,39,28,28,82,82,82,51,73,73,69,62,121,74,74,78',
'23,23,41,41,23,9,83,83,50,50,50,9,12,8,107,21,21,6,35,82,5,24,59,100',
'24,118,29,29,64,24,63,13,200,170,58,109,32,30,30,30,30,32,70,209,214',
'146,144,160,67,6,36,6,6,6,6,6,6,6,157,56,157,23,23,23,23,56,168,16,52',
'156,70,158,100,100,88,100,205,88,7,210,56,68,163,68,151,151,5,214,191',
'56,56,56,191,56,187,191,162,126,191,127,187,128,29,129,29,190,29,29',
'190,130,49,49,131,132,133,134,135,136,137,115,104,101,98,148,56,56,9',
'86,56,81,79,30,30,87,75,9,154,54,60,30,30,160,57,57,57,48,44,157,42',
'161,3,1,164,210,45,165,166,29,167,49,31,25,22,173,174,176,85,178,179',
'26,26,180,147,26,181,182,82,82,26,6,56,163,144,185,186,56,56,56,56,56',
'37,214,188,7,70,162,60,189,20,192,193,76,146,67,194,195,76,35,45,196',
'197,198,199,19,13,45,158,156,45,60,113,17,85,88,88,204,83,15,100,206',
'207,11,64,213,122,82,117,160,13,29,6,64,78,123,209,82,52,6,6,200,147',
'124,125,,,,,,118,78,39,157,,84,84,84,,30,,85,35,,,170,,37,56,56,56,56',
'56,56,56,168,36,205,56,56,56,109,62,23,,37,84,157,,59,157,78,56,78,59',
'107,147,6,13,63,36,58,9,13,8,205,58,118,,,,5,,,37,,29,,,29,,29,,,16',
',,,56,,121,191,147,100,191,56,35,,56,100,9,,,,100,,13,13,,49,49,,100',
'100,,,56,36,,29,56,151,29,,157,56,,87,5,6,60,,,10,,,51,83,39,,,57,51',
'70,2,35,37,29,205,85,36,57,56,64,56,85,45,73,,6,6,,74,6,,85,,56,56,56',
',,,60,60,49,151,151,9,100,21,6,,,,214,,49,50,39,60,,14,70,50,,60,85',
',,,,12,12,,,76,,76,,150,6,24,200,200,78,30,29,88,45,,24,24,,78,29,29',
'24,24,,,85,56,32,32,,50,87,,32,32,28,36,85,6,,62,168,168,49,,152,,,152',
'62,,29,,70,35,106,84,,,100,100,,,,,70,84,,,,12,,151,,,29,,,56,30,,,',
',,30,,45,203,203,203,,49,49,29,41,,150,,85,,,106,,,118,12,,,,,,6,,,',
'29,,,,,,,6,,106,,70,84,,102,56,,,,,45,,152,,145,56,13,,,13,,,85,29,24',
',,,,26,,,56,,,6,32,,26,26,39,,113,70,26,26,,60,,,70,169,78,60,,,,73',
',,,6,74,78,39,,76,76,,,6,85,76,76,85,,60,,56,49,21,56,36,62,,6,,39,',
'56,,,,,62,6,69,6,,82,,56,12,12,,,,56,,,,,,60,76,,150,,,150,,39,150,',
'150,45,,,6,,6,,,,,85,29,56,56,,82,,,,,,56,56,,,6,,56,56,39,,,152,,,152',
'70,,152,,152,,,,84,,145,70,26,145,,,,,,6,39,35,29,60,13,,,,,,,,,,,150',
'60,150,,150,76,150,13,,,6,30,,,,,84,,76,76,76,76,,,,30,6,60,,150,,,',
',,23,,,,,155,152,155,152,,152,13,152,,23,39,56,203,203,,203,203,56,203',
',,,56,56,13,,,,,56,152,118,,13,78,118,,,,,,39,,78,,56,53,,,,,,53,,6',
'6,6,,,13,,,145,,145,,,53,56,,,,76,,,,53,53,53,,53,,84,,,,56,155,153',
'153,153,,,78,,56,56,,,49,118,,,,,,,13,13,,,53,53,,,53,39,,,56,,56,,',
'6,,,,,,37,,56,56,,,,13,,,,145,145,45,,,,,6,,203,203,203,203,,85,6,6',
'6,6,,6,,,,,13,53,6,56,56,,53,53,53,53,53,70,,,,6,39,70,,,,13,,,153,153',
'153,153,,153,145,,145,56,,155,,155,,155,,,,,,6,6,6,6,,,,203,,,,6,,,',
',,56,,,,145,,,,,,155,,155,,,,,153,153,153,153,56,,,,,56,56,153,,,,,',
',53,53,53,53,53,53,53,,56,,53,53,53,,,,,,,,,,,,53,,,,,,,,,,,155,,,,',
',,,,,,,,,155,,155,,155,,,,,,,53,,,,,,,53,,,53,,,,,,,,155,,,,,,,,,,53',
',,,53,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,53,,,,,,,,,,,,,53,53,53,',
',,,,,,34,,,,,,34,,,,,,,,,,,,,,,34,,,,,,,,,34,34,34,,34,34,34,,,,,,,',
',,,,,,,,,,,53,,,,,,,,,,34,34,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,53,,,,,,,,,,,,,,34,,,,,34,34,34,34,34,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,53,,,,,,,,,,53,,,,,,,,,,,,,,,,,53,,,27,,,,,,27,,,,,,,,,,,,,,,,,',
',,,34,34,34,34,34,34,34,27,,,34,34,34,,,,53,,,53,,,,,34,,,53,,,,,,,',
',,,,53,,,,27,,53,,,,,,,,,,,,,,,34,,,,,,,34,,,34,,,,,53,53,,,,,,,,53',
'53,,,34,,53,53,34,,27,,34,34,,,,,,27,,,,,,,,,,34,,,,,,,,,,,34,,34,,',
',,,,,,,,,,34,34,34,,,,,,,,,,,,34,,34,,,,,,,,,,,,,,,,65,,,,,,65,,,,,',
',,53,,,,,27,53,27,,,27,53,53,,,27,,,53,34,65,65,65,,,,,,,27,,,,,53,',
',,,,,,,,,,,,,,,,,,,,65,53,,65,,,,,,,,,,,,34,,,,53,,,,,,,,,53,53,,,,',
',,,27,,,,27,,,,,27,,,,,65,53,,53,,,,,,65,,,,,53,53,,34,,,,,27,,27,34',
',34,,,,,,,34,,,,27,27,,,,,34,,,,,,,53,53,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',53,,,,,,,,,34,,,34,,,65,,,,,34,27,,,,,,,,53,,,34,,,,,,34,65,,,,,,,',
',,,53,,,,,53,53,,,,,,,,,,,,34,34,,,53,,,,,34,34,,,,,34,34,,,,,,,,,,',
',,,,,,,,65,,,,65,,,,65,65,34,,,,,,,,,,,34,,27,,65,,,,,,,,,,,65,,65,',
',,,,,,,,,,,,65,65,,,,,,,,,,,,65,,65,,,,38,,,,34,,38,,,,34,,,,,34,34',
',,,,,34,,,27,,,27,,,,,,38,38,38,,34,,,,,,,65,,,,,,,,,,,,,,,,34,,,,,',
',,,38,,,,,,,,,34,,,,,27,,,,34,34,,,,27,27,,,,,27,27,,,,,,,,,,,,34,,34',
',,,,,,38,,,,34,34,,,,38,,,,,,,,,,,,,,,,,,,,65,,,,,,,34,65,,,,34,34,33',
',34,65,,,33,,,,,,,,,,,,,,,,,,,,,,34,,27,,,,33,,,,,,,27,27,,,,,,27,,',
',34,38,,38,,34,38,65,,,65,38,27,,,,,,,,,,,,,38,34,,,,,34,34,,,27,,,',
',,,,,,,,,34,,,,,27,,,,,,,,,27,27,,,,,,33,,,,,,,,,33,,,,,,,,,,27,38,',
',,38,,,,38,38,27,,,,,,,,,,,,65,,66,38,,,,,66,,,65,,,38,,38,,,,,,,,,27',
'27,,,27,38,38,,,,,66,66,66,,,,,38,,38,,,,,,,,,33,27,33,,,33,,,,,33,65',
',,,,,,66,,,66,65,65,33,,,,,65,27,,,,,,,,,,38,,,,,,,,,,,27,,,,,27,27',
',,,,,,,,,,65,66,,,,,,,,,66,,,,,,,,65,,33,,,,33,,,65,65,33,,,,,,,,,,',
',,,,,,,,,,,,,65,,,33,,33,,,,,,65,,,,,,,,33,33,,,,38,,,,,,,,38,,,,,,',
',,38,,65,66,,,,65,65,,,65,,,,,,,,,,,,,,,,66,,,,,,,,,,65,,,,,33,,,,,',
',,,,,,,,38,,,38,,65,,,,,65,,,,,,,,,,,,,,,,,,,,,65,,,,66,65,65,,66,,',
',66,66,,,,,,,,,,,,,,,38,66,,,,,,,,38,38,,66,,66,38,38,,,,,,,,,,,,66',
'66,,,33,,,,,,,,,66,,66,,38,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,66,,,,,,,,,,,,,33,,,33,,38,,,,,,,,,,,38,38,,,,,38,38,,,,,,,,',
',,,,,,,38,,,,,,,,,,,,,,,,,,,,33,,,38,,,,,,33,33,,,,,33,33,40,,,,38,',
',,,40,40,40,,38,38,,66,,,,,,40,40,66,40,,,,,,,,66,,,,,,38,40,,,,,,,',
',,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,38,38,66,,38,66,33,,,,,,',
',,,,33,33,,,,,,33,,,,,,38,,,,,,,,,,33,,,,,,,,,,,,,,38,,,,,38,,,,33,',
',,,,,,,,,,,,,,,38,33,,,,38,38,,,,33,33,,,,,,,,,,,,,,,66,,,,40,40,,,40',
'40,33,66,,40,,,,,,,,33,,,,,40,,,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,40,40,40,40,,,,,40,,,33,33,,,,40,,66,,,,,40,,,40,',
',66,66,,,40,,40,66,40,40,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,66',
',40,,40,,,,,,,,,40,,,33,,66,,,33,33,,,,,66,66,,,,,,,,,,,,,,,,,,,,,,',
',,66,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,66,,,,,66,66,,,66',
',,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,40,,40,40,40,,,,,,,,,,,,,,66,,,,,66',
',,,,,,,,,,,,,,,,,,,40,66,,40,,40,66,66,,,,,,,,,,,,,40,,,,,,,,,,,40,40',
',,,,,,,,,,40,,,40,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,40,,,40,40',
'40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,40,,,,,,40',
',,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,',
',,,,,,,,,,,40,,,,,,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3883, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   195,    13,   194,   nil,    59,    -2,   114,    52,    47,
  -105,   265,  -287,    39,  -545,  -450,  -610,  -576,   nil,  -271,
   -67,    48,   194,   -23,  -156,   133,    -7,  1460,  -190,  -150,
   -47,    70,  -144,  2198,  1270,  -224,  -356,     0,  2034,   -20,
  2852,   -23,  -413,   nil,  -567,   -27,   nil,   nil,   162,   -72,
    23,  -243,  -400,   904,  -327,   nil,   101,   154,    42,    30,
   -49,   nil,     2,    36,  -260,  1658,  2363,  -527,  -247,   -65,
    11,   nil,   nil,    25,    30,  -250,    21,   nil,   -29,   127,
   nil,   110,     0,  -298,   275,   -16,  -334,  -277,  -400,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    91,   nil,
  -490,  -186,   -61,   nil,    98,   nil,  -331,  -696,   nil,  -677,
   nil,   nil,   nil,  -344,   nil,    91,   nil,  -343,    -2,   nil,
   nil,  -586,   203,   -98,   234,   234,  -417,    79,    72,  -630,
  -220,  -624,  -806,    84,  -466,  -224,  -466,  -736,   nil,   nil,
   nil,   nil,   nil,   nil,  -781,    51,  -498,  -657,  -658,   nil,
  -230,  -445,  -189,    32,  -645,   122,  -712,  -634,  -572,   nil,
  -640,  -743,  -796,  -810,  -158,  -531,   134,  -368,  -244,   -13,
  -196,   nil,   nil,   -76,   -76,   nil,  -483,   nil,  -293,  -798,
  -396,  -505,  -629,   nil,   nil,   135,   133,    41,   138,   142,
  -249,  -259,   143,   143,   146,  -538,  -381,  -381,   152,  -522,
  -278,   nil,   nil,    10,  -467,  -616,  -459,  -696,   nil,  -651,
  -853,   nil,   nil,  -112,  -433 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   305,     7,   363,   308,
   nil,   nil,   nil,   556,   nil,   nil,   nil,   nil,   304,   306,
   nil,   nil,   nil,   nil,    14,    15,    21,   239,   nil,   297,
    17,   nil,   437,   240,   337,   nil,   nil,   775,   238,   346,
    24,   nil,   nil,   358,   nil,    25,    26,    27,   nil,   714,
   nil,   nil,   nil,   325,   nil,    28,   322,   452,    35,   nil,
   nil,    37,    40,    39,   nil,   235,   236,   620,   nil,   141,
   460,   140,   143,    90,    91,   nil,   442,    47,    50,   271,
   548,   nil,   453,   nil,   454,   465,   674,   517,   295,   279,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
   nil,   nil,   280,    65,   nil,    67,   nil,   nil,    68,   877,
    69,    70,    71,   nil,    72,   nil,    73,   nil,   602,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   284,   273,
   723,   845,   611,   878,   745,   586,   nil,   746,  1017,   913,
   574,   nil,   575,   nil,   nil,   576,   nil,   578,   nil,   824,
   nil,   nil,   nil,   584,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   464,   282,   nil,   nil,   692,   nil,   504,   nil,   nil,
   nil,   nil,   nil,    89,    92,    94,   nil,   nil,   nil,   nil,
   nil,   637,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   861,   784,   573,   nil,   577,   588,   590,   924,   593,   594,
   925,   597,   600,   nil,   299 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 145, :_reduce_1,
  2, 143, :_reduce_2,
  2, 144, :_reduce_3,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_6,
  2, 146, :_reduce_none,
  1, 149, :_reduce_8,
  0, 153, :_reduce_9,
  3, 149, :_reduce_10,
  3, 152, :_reduce_11,
  0, 159, :_reduce_12,
  6, 154, :_reduce_13,
  3, 154, :_reduce_14,
  2, 155, :_reduce_15,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_18,
  2, 160, :_reduce_19,
  1, 161, :_reduce_none,
  0, 162, :_reduce_21,
  3, 161, :_reduce_22,
  0, 173, :_reduce_23,
  4, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  2, 151, :_reduce_28,
  3, 151, :_reduce_29,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  3, 151, :_reduce_32,
  3, 151, :_reduce_33,
  4, 151, :_reduce_34,
  1, 151, :_reduce_none,
  3, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  1, 151, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  6, 166, :_reduce_43,
  5, 166, :_reduce_44,
  5, 166, :_reduce_45,
  5, 166, :_reduce_46,
  5, 166, :_reduce_47,
  3, 166, :_reduce_48,
  1, 174, :_reduce_49,
  1, 174, :_reduce_none,
  1, 172, :_reduce_none,
  3, 172, :_reduce_52,
  3, 172, :_reduce_53,
  3, 172, :_reduce_54,
  2, 172, :_reduce_55,
  1, 172, :_reduce_none,
  1, 165, :_reduce_57,
  0, 185, :_reduce_58,
  0, 186, :_reduce_59,
  4, 183, :_reduce_60,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 188, :_reduce_none,
  4, 188, :_reduce_64,
  0, 196, :_reduce_65,
  4, 193, :_reduce_66,
  1, 195, :_reduce_67,
  2, 187, :_reduce_68,
  3, 187, :_reduce_69,
  4, 187, :_reduce_70,
  5, 187, :_reduce_71,
  4, 187, :_reduce_72,
  5, 187, :_reduce_73,
  2, 187, :_reduce_74,
  2, 187, :_reduce_75,
  2, 187, :_reduce_76,
  2, 187, :_reduce_77,
  2, 187, :_reduce_78,
  1, 167, :_reduce_none,
  3, 167, :_reduce_80,
  1, 201, :_reduce_none,
  3, 201, :_reduce_82,
  1, 200, :_reduce_83,
  2, 200, :_reduce_84,
  3, 200, :_reduce_85,
  5, 200, :_reduce_86,
  2, 200, :_reduce_87,
  4, 200, :_reduce_88,
  2, 200, :_reduce_89,
  4, 200, :_reduce_90,
  1, 200, :_reduce_91,
  3, 200, :_reduce_92,
  1, 204, :_reduce_none,
  3, 204, :_reduce_94,
  2, 203, :_reduce_95,
  3, 203, :_reduce_96,
  1, 206, :_reduce_97,
  3, 206, :_reduce_98,
  1, 205, :_reduce_99,
  1, 205, :_reduce_100,
  4, 205, :_reduce_101,
  3, 205, :_reduce_102,
  3, 205, :_reduce_103,
  3, 205, :_reduce_104,
  3, 205, :_reduce_105,
  2, 205, :_reduce_106,
  1, 205, :_reduce_107,
  1, 169, :_reduce_108,
  1, 169, :_reduce_109,
  4, 169, :_reduce_110,
  3, 169, :_reduce_111,
  3, 169, :_reduce_112,
  3, 169, :_reduce_113,
  3, 169, :_reduce_114,
  2, 169, :_reduce_115,
  1, 169, :_reduce_116,
  1, 209, :_reduce_117,
  1, 209, :_reduce_none,
  2, 210, :_reduce_119,
  1, 210, :_reduce_120,
  3, 210, :_reduce_121,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_125,
  1, 211, :_reduce_126,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 163, :_reduce_129,
  1, 163, :_reduce_none,
  1, 164, :_reduce_131,
  0, 217, :_reduce_132,
  4, 164, :_reduce_133,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  3, 182, :_reduce_206,
  3, 182, :_reduce_207,
  6, 182, :_reduce_208,
  5, 182, :_reduce_209,
  5, 182, :_reduce_210,
  5, 182, :_reduce_211,
  5, 182, :_reduce_212,
  0, 222, :_reduce_213,
  5, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  3, 182, :_reduce_223,
  4, 182, :_reduce_224,
  4, 182, :_reduce_225,
  2, 182, :_reduce_226,
  2, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_229,
  3, 182, :_reduce_230,
  3, 182, :_reduce_231,
  1, 182, :_reduce_none,
  3, 182, :_reduce_233,
  3, 182, :_reduce_234,
  3, 182, :_reduce_235,
  3, 182, :_reduce_236,
  3, 182, :_reduce_237,
  2, 182, :_reduce_238,
  2, 182, :_reduce_239,
  3, 182, :_reduce_240,
  3, 182, :_reduce_241,
  3, 182, :_reduce_242,
  3, 182, :_reduce_243,
  3, 182, :_reduce_244,
  6, 182, :_reduce_245,
  1, 182, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_251,
  3, 219, :_reduce_252,
  1, 171, :_reduce_253,
  1, 223, :_reduce_none,
  2, 223, :_reduce_255,
  4, 223, :_reduce_256,
  2, 223, :_reduce_257,
  1, 218, :_reduce_none,
  3, 218, :_reduce_259,
  3, 227, :_reduce_260,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 177, :_reduce_263,
  1, 177, :_reduce_264,
  2, 177, :_reduce_265,
  4, 177, :_reduce_266,
  2, 177, :_reduce_267,
  1, 199, :_reduce_268,
  2, 199, :_reduce_269,
  2, 199, :_reduce_270,
  4, 199, :_reduce_271,
  1, 199, :_reduce_272,
  0, 231, :_reduce_273,
  2, 192, :_reduce_274,
  2, 230, :_reduce_275,
  2, 229, :_reduce_276,
  1, 229, :_reduce_none,
  1, 224, :_reduce_278,
  2, 224, :_reduce_279,
  3, 224, :_reduce_280,
  4, 224, :_reduce_281,
  3, 170, :_reduce_282,
  4, 170, :_reduce_283,
  2, 170, :_reduce_284,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_295,
  0, 266, :_reduce_296,
  4, 220, :_reduce_297,
  2, 220, :_reduce_298,
  0, 267, :_reduce_299,
  0, 268, :_reduce_300,
  5, 220, :_reduce_301,
  3, 220, :_reduce_302,
  3, 220, :_reduce_303,
  2, 220, :_reduce_304,
  3, 220, :_reduce_305,
  0, 269, :_reduce_306,
  4, 220, :_reduce_307,
  1, 220, :_reduce_308,
  4, 220, :_reduce_309,
  3, 220, :_reduce_310,
  1, 220, :_reduce_311,
  5, 220, :_reduce_312,
  4, 220, :_reduce_313,
  3, 220, :_reduce_314,
  2, 220, :_reduce_315,
  1, 220, :_reduce_none,
  2, 220, :_reduce_317,
  2, 220, :_reduce_318,
  6, 220, :_reduce_319,
  6, 220, :_reduce_320,
  4, 220, :_reduce_321,
  4, 220, :_reduce_322,
  5, 220, :_reduce_323,
  4, 220, :_reduce_324,
  6, 220, :_reduce_325,
  0, 270, :_reduce_326,
  0, 271, :_reduce_327,
  7, 220, :_reduce_328,
  0, 272, :_reduce_329,
  0, 273, :_reduce_330,
  0, 274, :_reduce_331,
  9, 220, :_reduce_332,
  0, 275, :_reduce_333,
  0, 276, :_reduce_334,
  6, 220, :_reduce_335,
  0, 277, :_reduce_336,
  6, 220, :_reduce_337,
  0, 278, :_reduce_338,
  0, 279, :_reduce_339,
  9, 220, :_reduce_340,
  1, 220, :_reduce_341,
  1, 220, :_reduce_342,
  1, 220, :_reduce_343,
  1, 220, :_reduce_344,
  1, 176, :_reduce_345,
  1, 241, :_reduce_none,
  1, 247, :_reduce_none,
  1, 250, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 256, :_reduce_none,
  1, 258, :_reduce_none,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 280, :_reduce_none,
  1, 281, :_reduce_none,
  1, 282, :_reduce_none,
  1, 283, :_reduce_none,
  1, 284, :_reduce_none,
  1, 157, :_reduce_none,
  1, 285, :_reduce_none,
  1, 242, :_reduce_none,
  1, 198, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  2, 248, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 249, :_reduce_none,
  5, 249, :_reduce_371,
  1, 251, :_reduce_none,
  2, 251, :_reduce_373,
  1, 257, :_reduce_none,
  1, 257, :_reduce_375,
  1, 286, :_reduce_none,
  3, 286, :_reduce_377,
  1, 289, :_reduce_378,
  3, 289, :_reduce_379,
  1, 288, :_reduce_380,
  4, 288, :_reduce_381,
  6, 288, :_reduce_382,
  3, 288, :_reduce_383,
  5, 288, :_reduce_384,
  2, 288, :_reduce_385,
  4, 288, :_reduce_386,
  1, 288, :_reduce_387,
  3, 288, :_reduce_388,
  4, 290, :_reduce_389,
  2, 290, :_reduce_390,
  2, 290, :_reduce_391,
  1, 290, :_reduce_392,
  2, 295, :_reduce_393,
  1, 295, :_reduce_none,
  6, 296, :_reduce_395,
  8, 296, :_reduce_396,
  4, 296, :_reduce_397,
  6, 296, :_reduce_398,
  4, 296, :_reduce_399,
  2, 296, :_reduce_400,
  6, 296, :_reduce_401,
  2, 296, :_reduce_402,
  4, 296, :_reduce_403,
  6, 296, :_reduce_404,
  2, 296, :_reduce_405,
  4, 296, :_reduce_406,
  2, 296, :_reduce_407,
  4, 296, :_reduce_408,
  1, 296, :_reduce_409,
  1, 300, :_reduce_410,
  1, 300, :_reduce_411,
  3, 301, :_reduce_412,
  1, 301, :_reduce_413,
  4, 301, :_reduce_414,
  1, 302, :_reduce_none,
  4, 302, :_reduce_416,
  1, 303, :_reduce_417,
  3, 303, :_reduce_418,
  1, 304, :_reduce_419,
  1, 304, :_reduce_none,
  0, 308, :_reduce_421,
  0, 309, :_reduce_422,
  4, 246, :_reduce_423,
  4, 306, :_reduce_424,
  1, 306, :_reduce_425,
  3, 307, :_reduce_426,
  3, 307, :_reduce_427,
  3, 311, :_reduce_428,
  2, 189, :_reduce_429,
  4, 189, :_reduce_430,
  5, 189, :_reduce_431,
  5, 189, :_reduce_432,
  0, 314, :_reduce_433,
  3, 245, :_reduce_434,
  4, 245, :_reduce_435,
  4, 245, :_reduce_436,
  3, 245, :_reduce_437,
  3, 245, :_reduce_438,
  3, 245, :_reduce_439,
  2, 245, :_reduce_440,
  1, 245, :_reduce_441,
  4, 245, :_reduce_442,
  0, 315, :_reduce_443,
  4, 244, :_reduce_444,
  0, 316, :_reduce_445,
  4, 244, :_reduce_446,
  0, 317, :_reduce_447,
  0, 318, :_reduce_448,
  4, 194, :_reduce_449,
  0, 319, :_reduce_450,
  0, 320, :_reduce_451,
  4, 312, :_reduce_452,
  0, 322, :_reduce_453,
  6, 255, :_reduce_454,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  6, 156, :_reduce_457,
  0, 156, :_reduce_458,
  1, 323, :_reduce_459,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  2, 324, :_reduce_462,
  1, 324, :_reduce_none,
  2, 158, :_reduce_464,
  1, 158, :_reduce_none,
  1, 232, :_reduce_466,
  1, 232, :_reduce_467,
  1, 232, :_reduce_none,
  1, 233, :_reduce_469,
  1, 326, :_reduce_470,
  1, 326, :_reduce_none,
  2, 326, :_reduce_472,
  3, 327, :_reduce_473,
  1, 327, :_reduce_474,
  3, 234, :_reduce_475,
  3, 235, :_reduce_476,
  3, 236, :_reduce_477,
  3, 236, :_reduce_478,
  1, 331, :_reduce_479,
  3, 331, :_reduce_480,
  1, 332, :_reduce_none,
  2, 332, :_reduce_482,
  3, 238, :_reduce_483,
  3, 238, :_reduce_484,
  1, 334, :_reduce_485,
  3, 334, :_reduce_486,
  3, 237, :_reduce_487,
  3, 237, :_reduce_488,
  3, 239, :_reduce_489,
  3, 239, :_reduce_490,
  1, 335, :_reduce_491,
  3, 335, :_reduce_492,
  1, 336, :_reduce_493,
  3, 336, :_reduce_494,
  1, 328, :_reduce_495,
  2, 328, :_reduce_496,
  1, 329, :_reduce_497,
  2, 329, :_reduce_498,
  1, 330, :_reduce_499,
  2, 330, :_reduce_500,
  1, 333, :_reduce_501,
  0, 338, :_reduce_502,
  3, 333, :_reduce_503,
  0, 339, :_reduce_504,
  4, 333, :_reduce_505,
  1, 337, :_reduce_506,
  1, 337, :_reduce_507,
  1, 337, :_reduce_508,
  1, 337, :_reduce_none,
  2, 215, :_reduce_510,
  1, 215, :_reduce_511,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  3, 216, :_reduce_516,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 325, :_reduce_519,
  2, 325, :_reduce_520,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_526,
  1, 208, :_reduce_527,
  1, 208, :_reduce_528,
  1, 208, :_reduce_529,
  1, 208, :_reduce_530,
  1, 208, :_reduce_531,
  1, 208, :_reduce_532,
  1, 240, :_reduce_533,
  1, 240, :_reduce_534,
  1, 175, :_reduce_535,
  1, 175, :_reduce_536,
  1, 180, :_reduce_537,
  1, 180, :_reduce_538,
  0, 341, :_reduce_539,
  4, 259, :_reduce_540,
  1, 259, :_reduce_541,
  3, 263, :_reduce_542,
  0, 343, :_reduce_543,
  3, 263, :_reduce_544,
  4, 342, :_reduce_545,
  2, 342, :_reduce_546,
  2, 342, :_reduce_547,
  1, 342, :_reduce_none,
  2, 345, :_reduce_549,
  0, 345, :_reduce_550,
  6, 310, :_reduce_551,
  8, 310, :_reduce_552,
  4, 310, :_reduce_553,
  6, 310, :_reduce_554,
  4, 310, :_reduce_555,
  6, 310, :_reduce_556,
  2, 310, :_reduce_557,
  4, 310, :_reduce_558,
  6, 310, :_reduce_559,
  2, 310, :_reduce_560,
  4, 310, :_reduce_561,
  2, 310, :_reduce_562,
  4, 310, :_reduce_563,
  1, 310, :_reduce_564,
  0, 310, :_reduce_565,
  1, 305, :_reduce_566,
  1, 305, :_reduce_567,
  1, 305, :_reduce_568,
  1, 305, :_reduce_569,
  1, 287, :_reduce_none,
  1, 287, :_reduce_571,
  1, 347, :_reduce_none,
  3, 347, :_reduce_573,
  1, 297, :_reduce_574,
  3, 297, :_reduce_575,
  2, 348, :_reduce_576,
  2, 349, :_reduce_577,
  1, 291, :_reduce_none,
  3, 291, :_reduce_579,
  1, 344, :_reduce_none,
  3, 344, :_reduce_581,
  1, 350, :_reduce_none,
  1, 350, :_reduce_none,
  2, 292, :_reduce_584,
  1, 292, :_reduce_585,
  3, 351, :_reduce_586,
  3, 352, :_reduce_587,
  1, 298, :_reduce_588,
  3, 298, :_reduce_589,
  1, 346, :_reduce_590,
  3, 346, :_reduce_591,
  1, 353, :_reduce_none,
  1, 353, :_reduce_none,
  2, 299, :_reduce_594,
  1, 299, :_reduce_595,
  1, 354, :_reduce_none,
  1, 354, :_reduce_none,
  2, 294, :_reduce_598,
  2, 293, :_reduce_599,
  0, 293, :_reduce_600,
  1, 264, :_reduce_none,
  0, 355, :_reduce_602,
  4, 264, :_reduce_603,
  1, 243, :_reduce_604,
  2, 243, :_reduce_605,
  1, 226, :_reduce_none,
  3, 226, :_reduce_607,
  3, 356, :_reduce_608,
  2, 356, :_reduce_609,
  2, 356, :_reduce_610,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 313, :_reduce_none,
  1, 313, :_reduce_none,
  1, 313, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 179, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 202, :_reduce_none,
  2, 178, :_reduce_none,
  0, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 260, :_reduce_635,
  1, 260, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_638,
  0, 148, :_reduce_639 ]

racc_reduce_n = 640

racc_shift_n = 1086

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tEQL => 140,
  :tLOWEST => 141 }

racc_nt_base = 142

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@3",
  "stmts",
  "stmt_or_begin",
  "@4",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "@27",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      _, _, block = val
                      result = block
                    
    result
end

def _reduce_11(val, _values, result)
                      _, stmt, _ = val
                      result = new_iter s(:preexe), 0, stmt
                    
    result
end

def _reduce_12(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res
                    
    result
end

def _reduce_13(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]
                    
    result
end

def _reduce_14(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_22(val, _values, result)
                      _, _, stmt = val
                      result = stmt
                    
    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME
                      result = self.lexer.lineno
                    
    result
end

def _reduce_24(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_28(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_29(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_30(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val
                      result = new_rescue body, new_resbody(s(:array), resbody)
                    
    result
end

def _reduce_34(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_37(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_43(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_48(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_49(val, _values, result)
                      expr, = val
                      result = value_expr expr
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_53(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_55(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend
                    
    result
end

def _reduce_67(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_70(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_88(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_89(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_90(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_91(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_97(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_109(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_110(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_111(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_114(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_115(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_121(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]
                    
    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym
                    
    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = EXPR_FNAME
                    
    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_208(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_211(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_212(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]
                    
    result
end

def _reduce_213(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_214(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]
                    
    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn
                    
    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

# reduce 232 omitted

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_238(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_239(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_240(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_252(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

# reduce 258 omitted

def _reduce_259(val, _values, result)
                      body, _, resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody
                      result  = new_rescue(body, new_resbody(s(:array), resbody))
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_266(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_268(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_269(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_273(val, _values, result)
                      result = lexer.cmdarg.store true
                    
    result
end

def _reduce_274(val, _values, result)
                      lexer.cmdarg.restore val[0]
                      result = val[1]
                    
    result
end

def _reduce_275(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_280(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_296(val, _values, result)
                      result = self.lexer.lineno
                      # TODO:
                      # $<val>1 = cmdarg_stack;
                      # CMDARG_SET(0);
                    
    result
end

def _reduce_297(val, _values, result)
                      # TODO: CMDARG_SET($<val>1);
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_298(val, _values, result)
                      # TODO: lex_state = EXPR_ENDARG in between
                      debug20 13, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      result = lexer.cmdarg.store false
                      # result = self.lexer.cmdarg.stack.dup
                      # lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                    
    result
end

def _reduce_301(val, _values, result)
                      _, cmdarg, stmt, _, _, = val
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.restore cmdarg
                      result = stmt
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_303(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_304(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_306(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_308(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_312(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_314(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_315(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 316 omitted

def _reduce_317(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_318(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f
                    
    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t
                    
    result
end

def _reduce_321(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true
                    
    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true
                    
    result
end

def _reduce_323(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_324(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_325(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_331(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_334(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_337(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_338(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = EXPR_FNAME
                    
    result
end

def _reduce_339(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = EXPR_ENDFN # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_340(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_343(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_345(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_380(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_381(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_382(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_383(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_384(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_385(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_386(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_387(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_388(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_389(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_410(val, _values, result)
 result = 0 
    result
end

def _reduce_411(val, _values, result)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:args)
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_417(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_418(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.cmdarg.store(false), self.lexer.lineno]
                    
    result
end

def _reduce_423(val, _values, result)
                      lpar, args, (cmdarg, lineno), body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.lexpop

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      result.line = lineno
                      self.env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_425(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      # TODO: maybe fix lineno to kDO's lineno?
                      result = val[1]
                    
    result
end

def _reduce_429(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_431(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_432(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_443(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_444(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_447(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_448(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_449(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?
                    
    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                    
    result
end

def _reduce_453(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 455 omitted

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_470(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_487(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_494(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_496(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_502(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_503(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG
                    
    result
end

def _reduce_505(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_506(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_507(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_508(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_520(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

def _reduce_526(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_527(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_528(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_529(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_530(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_531(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_532(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_533(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_534(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_535(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_537(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_538(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_539(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true
                    
    result
end

def _reduce_543(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL
                    
    result
end

def _reduce_544(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

# reduce 548 omitted

def _reduce_549(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_551(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_552(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_553(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_554(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_555(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_556(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_557(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_558(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_559(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_560(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_562(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_564(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_566(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_567(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_574(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_575(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_576(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_577(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      result = args val
                    
    result
end

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"
                    
    result
end

def _reduce_585(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_586(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_587(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_588(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_595(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 596 omitted

# reduce 597 omitted

def _reduce_598(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_599(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_600(val, _values, result)
                      result = nil
                    
    result
end

# reduce 601 omitted

def _reduce_602(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_603(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_604(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_605(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_608(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_609(val, _values, result)
                      (label, _), arg = val
                      result = s(:array, s(:lit, label.to_sym), arg)
                    
    result
end

def _reduce_610(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

def _reduce_635(val, _values, result)
 yyerrok 
    result
end

# reduce 636 omitted

# reduce 637 omitted

def _reduce_638(val, _values, result)
 yyerrok 
    result
end

def _reduce_639(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
