#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby26Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-628,658,885,889,609,-111,285,-628,-628,-628,285,-108,-639,-628,-628',
'-101,-628,-110,-112,-102,256,833,885,889,920,-628,225,226,-535,225,226',
'-94,655,225,226,-535,-628,-628,-111,-628,-628,-628,-628,-628,851,95',
'-80,236,-103,128,852,863,253,96,127,832,255,254,225,226,-113,-104,765',
'-113,657,-115,609,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-110,-101,-628,-628,-628,-102,683,-109,-108,-116',
'-628,-115,287,-628,654,-624,287,653,-628,-114,-628,285,-628,-628,-628',
'-628,-628,-628,-628,-102,-628,-628,-628,-624,-103,236,-101,128,236,-101',
'-102,-101,127,-102,-108,-628,-628,-104,-103,-108,-628,-112,-628,-109',
'-101,609,-112,-628,-102,-628,-628,-628,-628,-112,-628,-628,-628,236',
'-628,-103,-110,-111,-103,-116,609,862,-111,-628,-628,-628,-628,128,-104',
'609,-104,-104,127,-103,-628,-628,650,-628,-628,-628,-628,-628,-113,-625',
'-115,128,-104,-113,966,-115,127,-112,646,-114,287,235,-533,231,-100',
'-99,-107,919,-106,-533,281,-628,-628,-628,-628,-628,-628,-628,-628,-628',
'-628,-628,-628,-628,-628,-114,3,-628,-628,-628,-114,826,-628,106,107',
'-628,233,236,-628,-628,285,-628,777,-628,-540,-628,778,-628,-628,-628',
'-628,-628,-628,-628,936,-628,-628,-628,-541,-109,-540,128,-534,-624',
'-109,-625,127,639,232,-534,-628,-628,-628,-628,639,-628,-110,-628,-107',
'-116,128,-110,-628,-306,-116,127,-99,-628,-112,128,-306,-306,-306,-116',
'127,-306,-306,-306,833,-306,-100,-108,-103,639,-105,-436,273,274,724',
'-306,-306,-306,108,109,-532,-109,-622,-108,-541,-306,-306,-532,-306',
'-306,-306,-306,-306,287,641,640,637,236,832,-279,1044,641,640,639,482',
'106,107,272,271,639,797,233,225,226,-621,709,-306,-306,-306,-306,-306',
'-306,-306,-306,-306,-306,-306,-306,-306,-306,641,640,-306,-306,-306',
'-529,827,-306,-531,795,-306,-109,-529,-306,-306,-531,-306,-622,-306',
'941,-306,-529,-306,-306,-306,-306,-306,-306,-306,-213,-306,-116,-306',
'622,641,640,652,-526,-116,-622,641,640,647,945,-526,-306,-306,-306,-306',
'-621,-306,-306,-306,-526,108,109,236,-306,-306,-306,-306,594,-306,-114',
'-306,-306,889,-306,616,594,-529,-621,597,589,-526,586,585,584,-529,587',
'597,-526,-536,824,-628,-529,-115,-306,-306,-536,-306,-306,-306,-306',
'-306,589,231,586,585,584,231,587,-526,620,742,605,604,230,948,825,634',
'676,618,605,604,677,228,635,-306,-306,-306,-306,-306,-306,-306,-306',
'-306,-306,-306,-306,-306,-306,950,811,-306,-306,-306,-628,682,598,-111',
'-537,-306,639,-628,-306,-213,598,-537,-624,-306,882,-306,-628,-306,-306',
'-306,-306,-306,-306,-306,232,-306,-306,-306,232,-113,231,-111,-307,-306',
'-628,-113,1014,556,-625,-307,-306,-306,-306,-105,639,-306,480,-526,-307',
'605,604,-106,-306,-110,-526,-526,-526,-306,-114,-526,-526,-526,952,-526',
'954,-628,-115,641,640,642,954,-526,236,-526,-526,-526,910,911,-307,960',
'912,122,123,-526,-526,-307,-526,-526,-526,-526,-526,-306,-306,128,-307',
'232,231,-307,127,-306,732,639,621,780,-625,641,640,637,-306,420,566',
'732,782,568,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,128,616,-526,-526,-526,127,-526,-526,566,732,-526,568,128',
'-526,-526,-307,-526,127,-526,256,-526,569,-526,-526,-526,-526,-526,-526',
'-526,-306,-526,236,-526,232,641,640,659,732,589,732,586,585,584,594',
'587,-526,-526,-526,-526,676,-526,253,-526,-297,597,255,254,-526,-529',
'236,-297,639,-526,-526,644,-529,-529,-529,128,-297,-529,-529,-529,127',
'-529,256,592,1007,978,586,585,584,-529,587,-529,-529,-529,605,604,-539',
'566,-102,-282,568,-529,-529,-539,-529,-529,-529,-529,-529,1065,231,128',
'-539,-111,253,-538,127,546,255,254,251,252,-538,563,566,-297,544,565',
'598,641,640,-538,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529,-529',
'-529,-529,-529,256,231,-529,-529,-529,231,-529,-529,1035,554,-529,979',
'479,-529,-529,-539,-529,782,-529,742,-529,480,-529,-529,-529,-529,-529',
'-529,-529,232,-529,982,-529,589,-538,586,585,584,594,587,225,226,985',
'677,987,-529,-529,-529,-529,597,-529,-628,-529,989,236,991,811,-529',
'-628,-628,-628,550,-529,-529,-628,-628,232,-628,231,290,232,592,429',
'236,293,1041,-628,431,430,231,602,601,605,604,1039,-104,1035,-628,-628',
'547,-628,-628,-628,-628,-628,782,231,1003,-101,1004,-113,-348,540,669',
'539,236,-79,1016,-348,528,526,732,667,-110,789,523,598,-348,-628,-628',
'-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,-628,290,232',
'-628,-628,-628,589,683,586,585,584,-628,587,232,-628,513,235,1033,484',
'-628,483,-628,1036,-628,-628,-628,-628,-628,-628,-628,232,-628,-628',
'-628,589,-348,586,585,584,594,587,851,481,432,751,427,-628,-628,1042',
'-628,597,-628,-306,754,410,1045,954,954,-628,-306,-306,-306,954,-628',
'-112,-306,-306,589,-306,586,585,584,592,587,589,1050,586,585,584,1016',
'587,602,601,605,604,407,404,401,-306,-306,742,-306,-306,-306,-306,-306',
'1059,1061,1063,1065,589,1065,586,585,584,751,587,589,377,586,585,584',
'751,587,959,729,236,598,339,-306,-306,-306,-306,-306,-306,-306,-306',
'-306,-306,-306,-306,-306,-306,338,1016,-306,-306,-306,751,682,732,732',
'276,-306,227,751,-306,754,-625,-624,256,-306,236,-306,224,-306,-306',
'-306,-306,-306,-306,-306,223,-306,589,-306,586,585,584,594,587,589,222',
'586,585,584,954,587,-306,-306,597,-306,253,-306,1016,-444,255,254,251',
'252,-306,1088,-444,-444,-444,-306,-114,-444,-444,-444,256,-444,592,131',
'132,133,134,135,732,751,-444,-444,-444,605,604,616,266,267,732,732,761',
'-444,-444,758,-444,-444,-444,-444,-444,759,757,784,253,789,259,749,255',
'254,251,252,747,745,257,798,258,799,800,598,743,-280,742,739,-444,-444',
'-444,-444,-444,-444,-444,-444,-444,-444,-444,-444,-444,-444,528,735',
'-444,-444,-444,732,1065,-444,812,290,-444,729,725,-444,-444,724,-444',
'513,-444,559,-444,236,-444,-444,-444,-444,-444,-444,-444,513,-444,-444',
'-444,1007,1065,586,585,584,589,587,586,585,584,1065,587,-444,-444,-650',
'-444,713,-444,-94,236,829,-650,-650,-650,-444,276,-650,-650,-650,-444',
'-650,236,256,-651,-651,-651,-651,273,274,-650,-650,-651,-651,751,838',
'840,526,528,266,267,-650,-650,427,-650,-650,-650,-650,-650,236,589,724',
'586,585,584,253,587,259,236,255,254,251,252,272,271,257,589,258,586',
'585,584,594,587,131,132,133,134,135,236,693,290,290,597,-650,724,-314',
'256,236,751,236,-650,880,-314,-314,-314,290,-650,-314,-314,-314,236',
'-314,889,732,592,131,132,133,134,135,236,-314,-314,602,601,605,604,-650',
'-650,256,256,-314,-314,256,-314,-314,-314,-314,-314,256,290,-650,675',
'674,236,670,-650,666,665,-279,-281,236,663,-650,236,124,656,,-650,598',
',,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314',
',,-314,-314,-314,,,-314,,293,-314,,,-314,-314,,-314,,-314,,-314,,-314',
'-314,-314,-314,-314,-314,-314,,-314,,-314,131,132,133,134,135,,,,,,',
',-314,-314,-629,-314,,-314,,,,-629,-629,-629,-314,,-629,-629,-629,-314',
'-629,256,,,,,,,,-629,-629,-629,-629,,,,,266,267,,-629,-629,,-629,-629',
'-629,-629,-629,,,,,,253,,259,,255,254,251,252,,,257,,258,,,,,,-629,-629',
'-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,-629,,,-629,-629',
'-629,,,-629,,,-629,,,-629,-629,,-629,,-629,,-629,,-629,-629,-629,-629',
'-629,-629,-629,,-629,-629,-629,589,,586,585,584,594,587,,,,,,-629,-629',
'-629,-629,597,-629,-630,-629,,,,,-629,-630,-630,-630,,-629,-630,-630',
'-630,,-630,256,,,592,,,,,-630,-630,-630,-630,,,605,604,266,267,,-630',
'-630,,-630,-630,-630,-630,-630,,,,,,253,,259,,255,254,251,252,,,,,,',
',,598,,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630,-630',
'-630,,,-630,-630,-630,,,-630,,,-630,,,-630,-630,,-630,,-630,,-630,,-630',
'-630,-630,-630,-630,-630,-630,,-630,-630,-630,589,,586,585,584,594,587',
',,,,,-630,-630,-630,-630,597,-630,-298,-630,,,,,-630,-298,-298,-298',
',-630,-298,-298,-298,,-298,256,,,592,,,,,,-298,-298,-298,602,601,605',
'604,266,267,,-298,-298,,-298,-298,-298,-298,-298,,,,,,253,,,,255,254',
'251,252,,,,,,,,,598,,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,,,-298,-298,-298,,,-298,,,-298,,,-298,-298,,-298',
',-298,,-298,,-298,-298,-298,-298,-298,-298,-298,,-298,,-298,589,,586',
'585,584,594,587,,,,,,-298,-298,-298,-298,597,-298,-650,-298,,,,,-298',
'-650,-650,-650,,-298,-650,-650,-650,,-650,256,,,592,,,,,-650,-650,-650',
',602,601,605,604,266,267,,-650,-650,,-650,-650,-650,-650,-650,,,,,,253',
',259,,255,254,251,252,,,,,,,,,598,,-650,-650,-650,-650,-650,-650,-650',
'-650,-650,-650,-650,-650,-650,-650,,,-650,-650,-650,,,-650,,290,-650',
',,-650,-650,,-650,,-650,,-650,,-650,-650,-650,-650,-650,-650,-650,,-650',
'-650,-650,,,,,,,,,,,,,-650,-650,,-650,,-650,312,85,86,87,12,78,-650',
',,79,80,-650,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,671,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249',
'250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252',
'272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,-254,,,66',
',,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,671,11,49,314,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261',
'262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63',
',,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97',
'98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249',
'250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252',
'272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,236,270,,,,,66,',
',93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262',
'263,273,274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64',
',38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,',
',266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271',
'257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274',
'268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
'256,260,261,262,263,273,274,268,269,264,265,,-651,-651,,,266,267,,43',
',,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265',
',-651,-651,,,266,267,,43,,,316,,,62,63,,,64,,38,253,,259,48,255,254',
'251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262',
'263,273,274,,,264,265,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,268,,264,265,,,,,,266,267,,43,,,36,,,62,63,',
',64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,256,-651,-651,-651,-651,273,274,,,-651,-651,,,,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,-651,-651,-651,-651,273',
'274,,,-651,-651,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,-651',
'-651,-651,-651,273,274,,,-651,-651,,,,,,266,267,,43,,,316,,,62,63,,',
'64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,256,-651,-651,-651,-651,273,274,,,-651,-651,,,,,,266,267',
',43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,-651,-651,-651,-651,273,274,,,-651',
'-651,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80,',
',,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'316,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,',
',,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,236,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,993,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,',
',,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,',
'120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,',
',103,303,97,98,99,101,,,,96,104,236,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,706,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,420,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',,,335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,542,,,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,706,,300',
',48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,1000',
',,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,',
',,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246',
',,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,803,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,706,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,',
'66,,306,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,',
',,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66',
',306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99',
'101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,320,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,337,,,66,,,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,706,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,',
',,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
',,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,371,,,36,,,62',
'63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,420,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,437,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',437,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,',
',,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335,,',
',,,,,,,,,,,,,,,,,993,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,559,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
',,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,',
'103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,437',
',,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,',
',247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120',
'119,121,623,60,112,111,624,,114,122,123,,106,107,,,,335,,,,,,,,,,,,',
',,,,,,,625,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,',
'329,,,120,119,121,623,60,112,111,624,,114,122,123,,106,107,,,,335,,',
',,,,,,,,,,,,,,,,,625,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,',
',,,,184,191,182,183,179,180,181,139,141,138,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,',
'104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140',
',,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,',
',154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203,',
',,,,184,191,182,183,179,180,181,139,141,417,416,140,,418,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,',
',,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,',
',,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140',
',,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,',
',154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200',
'190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198,187',
'201,205,207,199,192,,,,208,215,210,386,385,387,384,185,204,203,,,,,',
'184,191,182,183,381,382,383,379,141,112,111,380,,114,,,,,,,173,174,',
'169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,393,,',
',,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,',
',,,,,687,464,,,688,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,774,471,,,775,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,772,464,,,773,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1074,471,,,1075',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1072,464,,,1073,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',1069,471,,,1068,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,460,464,,,461,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,467,471,,,466,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,589,177,586,585,584,594,587',
',,,,511,464,,,512,597,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,592,575,,175,176,161,162,,,602,601,605,604,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,598,689',
'471,,,690,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,511,464,,,512,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,896,471,,,897,,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,717,464,,,718,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,720,471,,,721,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,687,464,,,688',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,689,471,,,690,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',808,471,,,807,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,805,464,,,806,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',589,177,586,585,584,594,587,589,,586,585,584,594,587,,,597,,,,,170',
',597,,589,178,586,585,584,594,587,,,,,,,592,,,597,,,,592,,602,601,605',
'604,,,,602,601,605,604,,,,,589,592,586,585,584,594,587,,,,,,605,604',
',,597,,,,589,598,586,585,584,594,587,589,598,586,585,584,594,587,,,597',
',592,,,,,597,,,598,,,605,604,589,,586,585,584,594,587,592,,,,,,,592',
',597,,605,604,,,,602,601,605,604,,,,,,598,,,,,589,592,586,585,584,594',
'587,,,,602,601,605,604,,598,597,,,,,589,598,586,585,584,594,587,589',
',586,585,584,594,587,,,597,592,,,,,,597,,598,,,605,604,589,,586,585',
'584,594,587,589,592,586,585,584,594,587,,592,597,,,605,604,,,597,,,605',
'604,,,,,598,,,,,,592,,,,,,,592,,602,601,605,604,,,598,,,605,604,,,598',
',,,,,,,,,,,,,,,,,,,,,,598,,,,,,,598' ]
        racc_action_table = arr = ::Array.new(26351, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'467,411,760,760,360,772,65,467,467,467,330,997,62,467,467,845,467,894',
'1074,717,487,839,1052,1052,828,467,727,727,382,792,792,712,408,786,786',
'382,467,467,1072,467,467,467,467,467,728,92,712,62,720,902,728,737,487',
'92,902,839,487,487,476,476,773,718,611,1073,411,1042,893,467,467,467',
'467,467,467,467,467,467,467,467,467,467,467,828,845,467,467,467,717',
'467,369,368,372,467,621,65,467,408,1074,330,407,467,1075,467,696,467',
'467,467,467,467,467,467,772,467,467,467,720,720,727,845,360,792,845',
'717,894,360,717,997,467,467,718,467,997,467,1074,689,998,845,361,1074',
'467,717,689,689,689,467,467,689,689,689,476,689,720,1086,1072,720,1001',
'940,737,1072,689,689,689,689,611,718,963,773,718,611,720,689,689,404',
'689,689,689,689,689,1073,1075,1042,893,718,1073,893,1042,893,774,401',
'775,696,22,387,27,369,368,372,813,621,387,27,689,689,689,689,689,689',
'689,689,689,689,689,689,689,689,1075,1,689,689,689,1075,689,689,335',
'335,689,20,22,689,689,29,689,625,689,41,689,625,689,689,689,689,689',
'689,689,837,689,689,689,42,998,239,361,384,774,998,775,361,530,27,384',
'689,689,689,689,651,689,1086,689,20,1001,940,1086,689,690,1001,940,41',
'689,689,963,690,690,690,20,963,690,690,690,694,690,42,41,774,648,775',
'29,47,47,844,690,690,690,335,335,386,42,624,239,240,690,690,386,690',
'690,690,690,690,29,530,530,530,1005,694,855,1005,651,651,405,242,44',
'44,47,47,402,651,444,359,359,623,530,690,690,690,690,690,690,690,690',
'690,690,690,690,690,690,648,648,690,690,690,624,690,690,385,648,690',
'240,624,690,690,385,690,624,690,856,690,624,690,690,690,690,690,690',
'690,481,690,242,690,373,405,405,405,623,444,624,402,402,402,864,623',
'690,690,690,690,623,690,466,690,623,44,44,865,690,466,466,466,739,690',
'690,466,466,1019,466,1019,979,624,623,739,754,379,754,754,754,380,754',
'979,379,381,687,896,380,481,466,466,381,466,466,466,466,466,959,370',
'959,959,959,19,959,623,370,866,739,739,19,870,688,389,805,370,979,979',
'806,19,389,466,466,466,466,466,466,466,466,466,466,466,466,466,466,871',
'916,466,466,466,896,466,739,687,383,466,397,896,466,339,979,383,896',
'466,754,466,896,466,466,466,466,466,466,466,370,466,897,466,19,688,341',
'805,547,897,896,806,959,341,897,547,466,466,897,466,395,466,341,110',
'547,742,742,339,466,916,110,110,110,466,466,110,110,110,873,110,874',
'896,339,397,397,397,876,110,879,110,110,110,793,793,778,881,793,793',
'793,110,110,778,110,110,110,110,110,897,721,906,778,341,627,547,906',
'721,884,413,371,627,721,395,395,395,721,367,734,890,627,734,110,110',
'110,110,110,110,110,110,110,110,110,110,110,110,5,366,110,110,110,5',
'110,110,572,895,110,572,365,110,110,778,110,365,110,488,110,354,110',
'110,110,110,110,110,110,721,110,899,110,627,413,413,413,903,747,904',
'747,747,747,747,747,110,110,110,110,460,110,488,110,326,747,488,488',
'110,113,905,326,399,110,110,399,113,113,113,309,326,113,113,113,309',
'113,503,747,945,914,945,945,945,113,945,113,113,113,747,747,323,353',
'460,915,353,113,113,323,113,113,113,113,113,1093,324,971,323,460,503',
'322,971,324,503,503,503,503,322,350,352,326,324,352,747,399,399,322',
'113,113,113,113,113,113,113,113,113,113,113,113,113,113,343,992,113',
'113,113,238,113,113,992,340,113,922,238,113,113,323,113,992,113,923',
'113,238,113,113,113,113,113,113,113,324,113,925,113,1059,322,1059,1059',
'1059,1059,1059,17,17,926,461,927,113,113,113,113,1059,113,808,113,929',
'930,931,672,113,808,808,808,336,113,113,808,808,992,808,999,334,238',
'1059,138,329,328,999,808,138,138,1034,1059,1059,1059,1059,999,461,1034',
'808,808,325,808,808,808,808,808,1034,443,943,672,944,461,50,319,443',
'318,317,315,961,50,301,298,970,443,672,977,297,1059,50,808,808,808,808',
'808,808,808,808,808,808,808,808,808,808,286,999,808,808,808,592,808',
'592,592,592,808,592,1034,808,282,248,990,244,808,243,808,993,808,808',
'808,808,808,808,808,443,808,808,808,575,50,575,575,575,575,575,995,241',
'220,592,136,808,808,1000,808,575,808,807,592,102,1009,1010,1011,808',
'807,807,807,1012,808,808,807,807,880,807,880,880,880,575,880,882,1013',
'882,882,882,1015,882,575,575,575,575,101,100,99,807,807,1024,807,807',
'807,807,807,1027,1028,1029,1030,751,1032,751,751,751,880,751,1014,73',
'1014,1014,1014,882,1014,880,1038,49,575,43,807,807,807,807,807,807,807',
'807,807,807,807,807,807,807,40,1051,807,807,807,751,807,1056,1057,25',
'807,18,1014,807,751,1068,1069,502,807,1071,807,16,807,807,807,807,807',
'807,807,15,807,1065,807,1065,1065,1065,1065,1065,1016,13,1016,1016,1016',
'1077,1016,807,807,1065,807,502,807,1078,30,502,502,502,502,807,1082',
'30,30,30,807,807,30,30,30,507,30,1065,535,535,535,535,535,615,1016,30',
'30,30,1065,1065,614,507,507,613,612,608,30,30,603,30,30,30,30,30,606',
'599,629,507,632,507,591,507,507,507,507,582,581,507,655,507,658,660',
'1065,580,664,578,577,30,30,30,30,30,30,30,30,30,30,30,30,30,30,573,570',
'30,30,30,561,1083,30,673,30,30,560,553,30,30,551,30,678,30,548,30,543',
'30,30,30,30,30,30,30,684,30,30,30,1044,1084,1044,1044,1044,1050,1044',
'1050,1050,1050,1085,1050,30,30,510,30,541,30,538,691,692,510,510,510',
'30,695,510,510,510,30,510,537,499,499,499,499,499,499,499,510,510,499',
'499,1050,698,700,703,705,499,499,510,510,536,510,510,510,510,510,520',
'960,714,960,960,960,499,960,499,716,499,499,499,499,499,499,499,832',
'499,832,832,832,832,832,313,313,313,313,313,519,508,719,722,832,510',
'723,31,726,733,960,738,510,753,31,31,31,510,510,31,31,31,755,31,762',
'768,832,562,562,562,562,562,771,31,31,832,832,832,832,510,510,492,491',
'31,31,490,31,31,31,31,31,489,468,510,459,458,455,445,510,441,438,436',
'802,832,433,510,804,3,410,,510,832,,,31,31,31,31,31,31,31,31,31,31,31',
'31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31,,31,,31,31,31,31,31',
'31,31,,31,,31,9,9,9,9,9,,,,,,,,31,31,471,31,,31,,,,471,471,471,31,,471',
'471,471,31,471,557,,,,,,,,471,471,471,471,,,,,557,557,,471,471,,471',
'471,471,471,471,,,,,,557,,557,,557,557,557,557,,,557,,557,,,,,,471,471',
'471,471,471,471,471,471,471,471,471,471,471,471,,,471,471,471,,,471',
',,471,,,471,471,,471,,471,,471,,471,471,471,471,471,471,471,,471,471',
'471,1045,,1045,1045,1045,1045,1045,,,,,,471,471,471,471,1045,471,472',
'471,,,,,471,472,472,472,,471,472,472,472,,472,494,,,1045,,,,,472,472',
'472,472,,,1045,1045,494,494,,472,472,,472,472,472,472,472,,,,,,494,',
'494,,494,494,494,494,,,,,,,,,1045,,472,472,472,472,472,472,472,472,472',
'472,472,472,472,472,,,472,472,472,,,472,,,472,,,472,472,,472,,472,,472',
',472,472,472,472,472,472,472,,472,472,472,745,,745,745,745,745,745,',
',,,,472,472,472,472,745,472,60,472,,,,,472,60,60,60,,472,60,60,60,,60',
'495,,,745,,,,,,60,60,60,745,745,745,745,495,495,,60,60,,60,60,60,60',
'60,,,,,,495,,,,495,495,495,495,,,,,,,,,745,,60,60,60,60,60,60,60,60',
'60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60,60,,60,,60,,60,,60,60,60',
'60,60,60,60,,60,,60,743,,743,743,743,743,743,,,,,,60,60,60,60,743,60',
'462,60,,,,,60,462,462,462,,60,462,462,462,,462,493,,,743,,,,,462,462',
'462,,743,743,743,743,493,493,,462,462,,462,462,462,462,462,,,,,,493',
',493,,493,493,493,493,,,,,,,,,743,,462,462,462,462,462,462,462,462,462',
'462,462,462,462,462,,,462,462,462,,,462,,462,462,,,462,462,,462,,462',
',462,,462,462,462,462,462,462,462,,462,462,462,,,,,,,,,,,,,462,462,',
'462,,462,967,967,967,967,967,967,462,,,967,967,462,,,967,,967,967,967',
'967,967,967,967,,,,,,967,967,967,967,967,967,967,,,967,,,,,448,967,967',
'967,967,967,967,967,967,967,967,967,967,,967,967,967,,967,967,,967,967',
'967,448,448,448,448,448,448,448,448,448,448,448,,448,448,,,448,448,',
'967,,,967,,,967,967,,,967,,967,448,,448,967,448,448,448,448,448,448',
'448,967,448,,,,967,967,967,967,967,967,,,,967,967,,448,,448,,,967,,',
'967,967,967,,,967,967,996,996,996,996,996,996,,,,996,996,,,,996,,996',
'996,996,996,996,996,996,,,,,,996,996,996,996,996,996,996,,,996,,,,,454',
'996,996,996,996,996,996,996,996,996,996,996,996,,996,996,996,,996,996',
',996,996,996,454,454,454,454,454,454,454,454,454,454,454,,454,454,,',
'454,454,,996,,,996,,,996,996,,,996,,996,454,,454,996,454,454,454,454',
'454,454,454,996,454,,,,996,996,996,996,996,996,,,,996,996,,454,,,,,996',
',,996,996,996,,,996,996,900,900,900,900,900,900,,,,900,900,,,,900,,900',
'900,900,900,900,900,900,,,,,,900,900,900,900,900,900,900,,,900,,,,,',
'900,900,900,900,900,900,900,900,900,900,900,900,,900,900,900,,900,900',
',900,900,900,506,506,506,506,506,506,506,506,506,506,506,,506,506,,',
'506,506,,900,,,900,,,900,900,,,900,,900,506,,506,900,506,506,506,506',
'506,506,506,900,506,,,,900,900,900,900,900,900,,,,900,900,506,506,,',
',,900,,,900,900,900,,,900,900,1023,1023,1023,1023,1023,1023,,,,1023',
'1023,,,,1023,,1023,1023,1023,1023,1023,1023,1023,,,,,,1023,1023,1023',
'1023,1023,1023,1023,,,1023,,,,,,1023,1023,1023,1023,1023,1023,1023,1023',
'1023,1023,1023,1023,,1023,1023,1023,,1023,1023,,1023,1023,1023,921,921',
'921,921,921,921,921,921,921,921,921,,921,921,,,921,921,,1023,,,1023',
',,1023,1023,,,1023,,1023,921,,921,1023,921,921,921,921,921,921,921,1023',
'921,,,,1023,1023,1023,1023,1023,1023,,,,1023,1023,,921,,,,,1023,,,1023',
'1023,1023,,,1023,1023,1022,1022,1022,1022,1022,1022,,,,1022,1022,,,',
'1022,,1022,1022,1022,1022,1022,1022,1022,,,,,,1022,1022,1022,1022,1022',
'1022,1022,,,1022,,,,,,1022,1022,1022,1022,1022,1022,1022,1022,1022,1022',
'1022,1022,,1022,1022,1022,,1022,1022,,1022,1022,1022,810,810,810,810',
'810,810,810,810,810,810,810,,810,810,,,810,810,,1022,,,1022,,,1022,1022',
',,1022,,1022,810,,810,1022,810,810,810,810,810,810,810,1022,810,,,,1022',
'1022,1022,1022,1022,1022,,,,1022,1022,,810,,,,,1022,,,1022,1022,1022',
',,1022,1022,937,937,937,937,937,937,,,,937,937,,,,937,,937,937,937,937',
'937,937,937,,,,,,937,937,937,937,937,937,937,,,937,,,,,,937,937,937',
'937,937,937,937,937,937,937,937,937,,937,937,937,,937,937,,937,937,937',
'24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,937,,,937,,,937,937',
',,937,,937,24,,24,937,24,24,24,24,24,24,24,937,24,,,,937,937,937,937',
'937,937,,,,937,937,,24,,,,,937,,,937,937,937,,,937,937,247,247,247,247',
'247,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247',
'247,247,247,247,247,,,247,,,,,,247,247,247,247,247,247,247,247,247,247',
'247,247,,247,247,247,,247,247,,247,247,247,558,558,558,558,558,558,558',
'558,558,558,558,,558,558,,,558,558,,247,,,247,,,247,247,,,247,,247,558',
',558,247,558,558,558,558,558,558,558,247,558,,,,247,247,247,247,247',
'247,,,,247,247,,558,,,,,247,,,247,247,247,,,247,247,1017,1017,1017,1017',
'1017,1017,,,,1017,1017,,,,1017,,1017,1017,1017,1017,1017,1017,1017,',
',,,,1017,1017,1017,1017,1017,1017,1017,,,1017,,,,,,1017,1017,1017,1017',
'1017,1017,1017,1017,1017,1017,1017,1017,,1017,1017,1017,,1017,1017,',
'1017,1017,1017,295,295,295,295,295,295,295,295,295,295,295,,295,295',
',,295,295,,1017,,,1017,,,1017,1017,,,1017,,1017,295,,295,1017,295,295',
'295,295,295,295,295,1017,295,,,,1017,1017,1017,1017,1017,1017,,,,1017',
'1017,,295,,,,,1017,,,1017,1017,1017,,,1017,1017,853,853,853,853,853',
'853,,,,853,853,,,,853,,853,853,853,853,853,853,853,,,,,,853,853,853',
'853,853,853,853,,,853,,,,,,853,853,853,853,853,853,853,853,853,853,853',
'853,,853,853,853,,853,853,,853,853,853,486,486,486,486,486,486,486,486',
'486,486,486,,486,486,,,486,486,,853,,,853,,,853,853,,,853,,853,486,',
'486,853,486,486,486,486,486,486,486,853,486,,,,853,853,853,853,853,853',
',,,853,853,,,,,,,853,,,853,853,853,,,853,853,316,316,316,316,316,316',
',,,316,316,,,,316,,316,316,316,316,316,316,316,,,,,,316,316,316,316',
'316,316,316,,,316,,,,,,316,316,316,316,316,316,316,316,316,316,316,316',
',316,316,316,,316,316,,316,316,316,485,485,485,485,485,485,485,485,485',
'485,485,,485,485,,,485,485,,316,,,316,,,316,316,,,316,,316,485,,485',
'316,485,485,485,485,485,485,485,316,485,,,,316,316,316,316,316,316,',
',,316,316,,,,,,,316,,,316,316,316,,,316,316,862,862,862,862,862,862',
',,,862,862,,,,862,,862,862,862,862,862,862,862,,,,,,862,862,862,862',
'862,862,862,,,862,,,,,,862,862,862,862,862,862,862,862,862,862,862,862',
',862,862,862,,862,862,,862,862,862,504,504,504,504,504,504,504,,,504',
'504,,,,,,504,504,,862,,,862,,,862,862,,,862,,862,504,,504,862,504,504',
'504,504,504,504,504,862,504,,,,862,862,862,862,862,862,,,,862,862,,',
',,,,862,,,862,862,862,,,862,862,776,776,776,776,776,776,,,,776,776,',
',,776,,776,776,776,776,776,776,776,,,,,,776,776,776,776,776,776,776',
',,776,,,,,,776,776,776,776,776,776,776,776,776,776,776,776,,776,776',
'776,,776,776,,776,776,776,505,505,505,505,505,505,505,505,,505,505,',
',,,,505,505,,776,,,776,,,776,776,,,776,,776,505,,505,776,505,505,505',
'505,505,505,505,776,505,,,,776,776,776,776,776,776,,,,776,776,,,,,,',
'776,,,776,776,776,,,776,776,794,794,794,794,794,794,,,,794,794,,,,794',
',794,794,794,794,794,794,794,,,,,,794,794,794,794,794,794,794,,,794',
',,,,,794,794,794,794,794,794,794,794,794,794,794,794,,794,794,794,,794',
'794,,794,794,794,496,496,496,496,496,496,496,,,496,496,,,,,,496,496',
',794,,,794,,,794,794,,,794,,794,496,,496,794,496,496,496,496,496,496',
'496,794,496,,,,794,794,794,794,794,794,,,,794,794,,,,,,,794,,,794,794',
'794,,,794,794,938,938,938,938,938,938,,,,938,938,,,,938,,938,938,938',
'938,938,938,938,,,,,,938,938,938,938,938,938,938,,,938,,,,,,938,938',
'938,938,938,938,938,938,938,938,938,938,,938,938,938,,938,938,,938,938',
'938,497,497,497,497,497,497,497,,,497,497,,,,,,497,497,,938,,,938,,',
'938,938,,,938,,938,497,,497,938,497,497,497,497,497,497,497,938,497',
',,,938,938,938,938,938,938,,,,938,938,,,,,,,938,,,938,938,938,,,938',
'938,321,321,321,321,321,321,,,,321,321,,,,321,,321,321,321,321,321,321',
'321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,321,321,321,321,321',
'321,321,321,321,321,321,321,,321,321,321,,321,321,,321,321,321,500,500',
'500,500,500,500,500,,,500,500,,,,,,500,500,,321,,,321,,,321,321,,,321',
',321,500,,500,321,500,500,500,500,500,500,500,321,500,,,,321,321,321',
'321,321,321,,,,321,321,,,,,,,321,,,321,321,321,,,321,321,863,863,863',
'863,863,863,,,,863,863,,,,863,,863,863,863,863,863,863,863,,,,,,863',
'863,863,863,863,863,863,,,863,,,,,,863,863,863,863,863,863,863,863,863',
'863,863,863,,863,863,863,,863,863,,863,863,863,498,498,498,498,498,498',
'498,,,498,498,,,,,,498,498,,863,,,863,,,863,863,,,863,,863,498,,498',
'863,498,498,498,498,498,498,498,863,498,,,,863,863,863,863,863,863,',
',,863,863,,,,,,,863,,,863,863,863,,,863,863,889,889,889,889,889,889',
',,,889,889,,,,889,,889,889,889,889,889,889,889,,,,,,889,889,889,889',
'889,889,889,,,889,,,,,,889,889,889,889,889,889,889,889,889,889,889,889',
',889,889,889,,889,889,,889,889,889,501,501,501,501,501,501,501,,,501',
'501,,,,,,501,501,,889,,,889,,,889,889,,,889,,889,501,,501,889,501,501',
'501,501,501,501,501,889,501,,,,889,889,889,889,889,889,,,,889,889,,',
',,,,889,,,889,889,889,,,889,889,222,222,222,222,222,222,,,,222,222,',
',,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222',
',,222,,,,,,222,222,222,222,222,222,222,222,222,222,222,222,,222,222',
'222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222',
',222,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,,,,,,',
'222,,,222,222,222,,,222,222,427,427,427,427,427,427,,,,427,427,,,,427',
',427,427,427,427,427,427,427,,,,,,427,427,427,427,427,427,427,,,427',
',,,,,427,427,427,427,427,427,427,427,427,427,427,427,,427,427,427,,427',
'427,,427,427,427,,,,,,,,,,,,,,,,,,,,427,,,427,,,427,427,,,427,,427,',
',,427,,,,,,,,427,,,,,427,427,427,427,427,427,,,,427,427,,,,,,,427,,',
'427,427,427,,,427,427,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2',
'2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,,,,',
',,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2',
'2,,,,,,,2,,,2,2,2,,,2,2,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36',
'36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,36,36,36,36,36,36',
'36,36,36,36,,36,36,36,,36,36,,36,36,36,,,,,,,,,,,,,,,,,,,,36,,,36,,',
'36,36,,,36,,36,,,,36,,,,,,,,36,,,,,36,36,36,36,36,36,,,,36,36,,,,,,',
'36,,,36,36,36,,,36,36,364,364,364,364,364,364,,,,364,364,,,,364,,364',
'364,364,364,364,364,364,,,,,,364,364,364,364,364,364,364,,,364,,,,,',
'364,364,364,364,364,364,364,364,364,364,364,364,,364,364,364,,364,364',
',364,364,364,,,,,,,,,,,,,,,,,,,,364,,,364,,,364,364,,,364,,364,,,,364',
',,,,,,,364,,,,,364,364,364,364,364,364,,,,364,364,,,,,,,364,,,364,364',
'364,,,364,364,610,610,610,610,610,610,,,,610,610,,,,610,,610,610,610',
'610,610,610,610,,,,,,610,610,610,610,610,610,610,,,610,,,,,,610,610',
'610,610,610,610,610,610,610,610,610,610,,610,610,610,,610,610,,610,610',
'610,,,,,,,,,,,,,,,,,,,,610,,,610,,,610,610,,,610,,610,,,,610,,,,,,,',
'610,,,,,610,610,610,610,610,610,,,,610,610,,,,,,,610,,,610,610,610,',
',610,610,347,347,347,347,347,347,,,,347,347,,,,347,,347,347,347,347',
'347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,347,347,347',
'347,347,347,347,347,347,347,347,347,,347,347,347,,347,347,,347,347,347',
',,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,347,,,,347,,,,,,,,347',
',,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,,,347,347,347,,,347',
'347,788,788,788,788,788,788,,,,788,788,,,,788,,788,788,788,788,788,788',
'788,,,,,,788,788,788,788,788,788,788,,,788,,,,,,788,788,788,788,788',
'788,788,788,788,788,788,788,,788,788,788,,788,788,,788,788,788,,,,,',
',,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,788,,,,788,,,,,,,,788,,,,,788',
'788,788,788,788,788,,,,788,788,,,,,,,788,,,788,788,788,,,788,788,787',
'787,787,787,787,787,,,,787,787,,,,787,,787,787,787,787,787,787,787,',
',,,,787,787,787,787,787,787,787,,,787,,,,,,787,787,787,787,787,787,787',
'787,787,787,787,787,,787,787,787,,787,787,,787,787,787,,,,,,,,,,,,,',
',,,,,,787,,,787,,,787,787,,,787,,787,,,,787,,,,,,,,787,,,,,787,787,787',
'787,787,787,,,,787,787,,,,,,,787,,,787,787,787,,,787,787,607,607,607',
'607,607,607,,,,607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607',
'607,607,607,607,607,607,,,607,,,,,,607,607,607,607,607,607,607,607,607',
'607,607,607,,607,607,607,,607,607,,607,607,607,,,,,,,,,,,,,,,,,,,,607',
',,607,,,607,607,,,607,,607,,,,607,,,,,,,,607,,,,,607,607,607,607,607',
'607,,,,607,607,,,,,,,607,,,607,607,607,,,607,607,834,834,834,834,834',
'834,,,,834,834,,,,834,,834,834,834,834,834,834,834,,,,,,834,834,834',
'834,834,834,834,,,834,,,,,,834,834,834,834,834,834,834,834,834,834,834',
'834,,834,834,834,,834,834,,834,834,834,,,,,,,,,,,,,,,,,,,,834,,,834',
',,834,834,,,834,,834,,,,834,,,,,,,,834,,,,,834,834,834,834,834,834,',
',,834,834,,,,,,,834,,,834,834,834,,,834,834,363,363,363,363,363,363',
',,,363,363,,,,363,,363,363,363,363,363,363,363,,,,,,363,363,363,363',
'363,363,363,,,363,,,,,,363,363,363,363,363,363,363,363,363,363,363,363',
',363,363,363,,363,363,,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,,,363',
'363,,,363,,363,,,,363,,,,,,,,363,,,,,363,363,363,363,363,363,,,,363',
'363,,,,,,,363,,,363,363,363,,,363,363,228,228,228,,228,,,,228,228,,',
',228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228,',
',228,,,,,,,228,,,228,228,228,228,228,228,228,228,228,228,228,228,,228',
'228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,228,',
'228,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,,,,,228',
',228,228,228,228,,,228,228,233,233,233,,233,,,,233,233,,,,233,,233,233',
'233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233',
',,233,233,233,233,233,233,233,233,,233,233,233,,233,233,,233,233,233',
',,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,',
',233,233,233,233,233,233,,,,233,233,,,,,,,233,,,233,233,233,,,233,233',
'234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234,234,234,,,,',
',234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234',
'234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,',
'234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234',
',,,234,234,,,,,,,234,,,234,234,234,,,234,234,235,235,235,,235,,,,235',
'235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235',
'235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,',
'235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,235,,,,,,235',
',,235,235,235,,,235,235,550,550,550,,550,,,,550,550,,,,550,,550,550',
'550,550,550,550,550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,,550',
',,550,550,550,550,550,550,550,550,,550,550,550,,550,550,,,,550,,,,,',
',,,,,,,,,,,,,,550,,,550,,,550,550,,,550,,,,,,,,,,,,,,,,,,,550,550,550',
'550,550,550,,,,550,550,,,,,,,550,,,550,550,550,,,550,550,8,8,8,8,8,',
',,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8',
'8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,',
',,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,682,682,682',
',682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,,,682,682,682',
'682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682,682,682,682,,682',
'682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682',
',,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682,682,,,',
',,,682,,,682,682,682,,,682,682,991,991,991,,991,,,,991,991,,,,991,,991',
'991,991,991,991,991,991,,,,,,991,991,991,991,991,991,991,,,991,,,,,',
',991,,,991,991,991,991,991,991,991,991,,991,991,991,,991,991,,,,991',
',,,,,,,,,,,,,,,,,,,991,,,991,,,991,991,,,991,,,,,,,,,,,,,,,,,,,991,991',
'991,991,991,991,,,,991,991,,,,,,,991,,,991,991,991,,,991,991,246,246',
'246,,246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246',
'246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246',
',246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246',
'246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246',
',,,,,,246,,,246,246,246,,,246,246,544,544,544,,544,,,,544,544,,,,544',
',544,544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,544',
',,,,,,544,,,544,544,544,544,544,544,544,544,544,544,544,544,,544,544',
',544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,544,,544',
',544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544,544,,,,,,,544,,544',
'544,544,544,,,544,544,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250',
'250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250',
'250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250',
'250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250',
',,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250',
'250,,,,,,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,',
',251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,',
',251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251',
',251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,',
',,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251',
'251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,',
',,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252',
'252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253',
',253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253',
'253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253',
'253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253',
',,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,',
',,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254',
',,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254',
'254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255',
',,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255',
',,,255,255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256',
'256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256',
'256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,',
'256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,',
',,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,',
',256,256,256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257',
'257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257',
'257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,',
',,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257',
'257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,258',
'258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258',
'258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258',
'258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258',
',,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258',
'258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,',
',259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,',
',259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259',
',259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,',
',,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259',
'259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260',
'260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260',
'260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,',
',,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260',
'260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,261,261,261',
',261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261',
'261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261',
'261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261',
',,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,',
',,,261,,,261,261,261,,,261,261,262,262,262,,262,,,,262,262,,,,262,,262',
'262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,',
',262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,,262,262',
'262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262',
',,,,262,262,262,262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,,262',
'262,263,263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263',
',,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263',
'263,263,263,,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263',
',,263,,,263,263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263',
',,,263,263,,,,,,,263,,,263,263,263,,,263,263,264,264,264,,264,,,,264',
'264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264',
'264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,,264,264,264,',
'264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,',
',,,264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,',
',264,264,264,,,264,264,265,265,265,,265,,,,265,265,,,,265,,265,265,265',
'265,265,265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265',
'265,265,265,265,265,265,265,,265,265,265,,265,265,,265,265,265,,,,,',
',,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265',
'265,265,265,265,265,,,,265,265,,,,,,,265,,,265,265,265,,,265,265,266',
'266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266',
'266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266',
'266,,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266',
',,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266',
'266,,,,,,,266,,,266,266,266,,,266,266,267,267,267,,267,,,,267,267,,',
',267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267,',
',267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,,267,267',
',267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,',
',,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267',
'267,,,267,267,268,268,268,,268,,,,268,268,,,,268,,268,268,268,268,268',
'268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268',
'268,268,268,268,268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,',
',,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268',
'268,268,268,,,,268,268,,,,,,,268,,,268,268,268,,,268,268,269,269,269',
',269,,,,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269,269,269',
'269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269',
'269,269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269',
',,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,',
',,,269,,,269,269,269,,,269,269,270,270,270,,270,,,,270,270,,,,270,,270',
'270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,,,270,,,,,',
',270,,,270,270,270,270,270,270,270,270,,270,270,270,,270,270,,270,270',
'270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,,,270',
',,,,270,270,270,270,270,270,,,,270,270,,,,,,,270,,,270,270,270,,,270',
'270,275,275,275,,275,,,,275,275,,,,275,,275,275,275,275,275,275,275',
',,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275,275,275,275,275',
'275,275,275,,275,275,275,,275,275,,275,275,275,,,,,,,,,,,,,,,,,,,,275',
',,275,,,275,275,,,275,,,,,,275,,,,,,,,275,,,,,275,275,275,275,275,275',
',,,275,275,,,,,,,275,,,275,275,275,,,275,275,683,683,683,,683,,,,683',
'683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683,683,683,683,683',
'683,,,683,,,,,,,683,,,683,683,683,683,683,683,683,683,,683,683,683,',
'683,683,,683,683,683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683,683,,,683,,',
',,,683,,,,,,,,683,,,,,683,683,683,683,683,683,,,,683,683,,,,,,,683,',
',683,683,683,,,683,683,283,283,283,,283,,,,283,283,,,,283,,283,283,283',
'283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283',
'283,283,283,283,283,283,283,283,283,283,283,,283,283,,283,283,283,,',
',,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,283,,283,,283,,,,,,,,283',
',,,,283,283,283,283,283,283,,,,283,283,,,,,,,283,,283,283,283,283,,',
'283,283,542,542,542,,542,,,,542,542,,,,542,,542,542,542,542,542,542',
'542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542,542,542',
'542,542,542,542,,542,542,542,,542,542,,,,542,,,,,,,,,,,,,,,,,,,,542',
',,542,,,542,542,,,542,,,,,,,,,,,,,,,,,,,542,542,542,542,542,542,,,,542',
'542,,,,,,,542,,,542,542,542,,,542,542,290,290,290,,290,,,,290,290,,',
',290,,290,290,290,290,290,290,290,,,,,,290,290,290,290,290,290,290,',
',290,,,,,,,290,,,290,290,290,290,290,290,290,290,290,290,290,290,,290',
'290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,290,',
'290,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,,,,,290',
',290,290,290,290,,,290,290,293,293,293,,293,,,,293,293,,,,293,,293,293',
'293,293,293,293,293,,,,,,293,293,293,293,293,293,293,,,293,,,,,,,293',
',,293,293,293,293,293,293,293,293,293,293,293,293,,293,293,,293,293',
'293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,,293,,293,,293,,293,,,,',
',,,293,,,,,293,293,293,293,293,293,,,,293,293,293,,,,,,293,,293,293',
'293,293,,,293,293,300,300,300,,300,,,,300,300,,,,300,,300,300,300,300',
'300,300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,,300,,,300,300',
'300,300,300,300,300,300,,300,300,300,,300,300,,300,300,300,,,,,,,,,',
',,,,,,,,,,300,,,300,,,300,300,,,300,,,,,,300,,,,,,,,300,,,,,300,300',
'300,300,300,300,,,,300,300,,,,,,,300,,,300,300,300,,,300,300,966,966',
'966,,966,,,,966,966,,,,966,,966,966,966,966,966,966,966,,,,,,966,966',
'966,966,966,966,966,,,966,,,,,,,966,,,966,966,966,966,966,966,966,966',
',966,966,966,,966,966,,966,966,966,,,,,,,,,,,,,,,,,,,,966,,,966,,,966',
'966,,,966,,966,,,,966,,,,,,,,966,,,,,966,966,966,966,966,966,,,,966',
'966,,,,,,,966,,,966,966,966,,,966,966,302,302,302,,302,,,,302,302,,',
',302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302,302,',
',302,,,,,,,302,,,302,302,302,302,302,302,302,302,,302,302,302,,302,302',
',302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,,,,302,',
',,,,,,302,,,,,302,302,302,302,302,302,,,,302,302,,,,,,,302,,,302,302',
'302,,,302,302,305,305,305,,305,,,,305,305,,,,305,,305,305,305,305,305',
'305,305,,,,,,305,305,305,305,305,305,305,,,305,,,,,,,305,,,305,305,305',
'305,305,305,305,305,,305,305,305,,305,305,,305,305,305,,,,,,,,,,,,,',
',,,,,,305,,,305,,,305,305,,,305,,,,,,305,,,,,,,,305,,,,,305,305,305',
'305,305,305,,,,305,305,,,,,,,305,,,305,305,305,,,305,305,306,306,306',
',306,,,,306,306,,,,306,,306,306,306,306,306,306,306,,,,,,306,306,306',
'306,306,306,306,,,306,,,,,,,306,,,306,306,306,306,306,306,306,306,,306',
'306,306,,306,306,,306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,306',
',,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306,306,306,,,,306,306,,,',
',,,306,,,306,306,306,,,306,306,312,312,312,312,312,,,,312,312,,,,312',
',312,312,312,312,312,312,312,,,,,,312,312,312,312,312,312,312,,,312',
',,,,,312,312,,312,312,312,312,312,312,312,312,312,,312,312,312,,312',
'312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,312,,,312,,312,',
',,312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312,312,,,,,,,312,,',
'312,312,312,,,312,312,706,706,706,,706,,,,706,706,,,,706,,706,706,706',
'706,706,706,706,,,,,,706,706,706,706,706,706,706,,,706,,,,,,,706,,,706',
'706,706,706,706,706,706,706,,706,706,706,,706,706,,706,706,706,,,,,',
',,,,,,,,,,,,,,706,,,706,,,706,706,,,706,,,,,,706,,,,,,,,706,,,,,706',
'706,706,706,706,706,,,,706,706,,,,,,,706,,,706,706,706,,,706,706,709',
'709,709,,709,,,,709,709,,,,709,,709,709,709,709,709,709,709,,,,,,709',
'709,709,709,709,709,709,,,709,,,,,,,709,,,709,709,709,709,709,709,709',
'709,,709,709,709,,709,709,,709,709,709,,,,,,,,,,,,,,,,,,,,709,,,709',
',,709,709,,,709,,,,,,709,,,,,,,,709,,,,,709,709,709,709,709,709,,,,709',
'709,,,,,,,709,,,709,709,709,,,709,709,534,534,534,534,534,,,,534,534',
',,,534,,534,534,534,534,534,534,534,,,,,,534,534,534,534,534,534,534',
',,534,,,,,,534,534,534,534,534,534,534,534,534,534,534,534,,534,534',
'534,,534,534,,534,534,534,,,,,,,,,,,,,,,,,,,,534,,,534,,,534,534,,,534',
',534,,,,534,,,,,,,,534,,,,,534,534,534,534,534,534,,,,534,534,,,,,,534',
'534,,,534,534,534,,,534,534,528,528,528,,528,,,,528,528,,,,528,,528',
'528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,',
',528,,,528,528,528,528,528,528,528,528,,528,528,528,,528,528,,528,528',
'528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,528,,,,,,,,528',
',,,,528,528,528,528,528,528,,,,528,528,,,,,,,528,,,528,528,528,,,528',
'528,526,526,526,,526,,,,526,526,,,,526,,526,526,526,526,526,526,526',
',,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526,526,526,526,526',
'526,526,526,526,526,526,526,,526,526,,526,526,526,,,,,,,,,,,,,,,,,,',
',526,,,526,,,526,526,,,526,,,,526,,526,,,,,,,,526,,,,,526,526,526,526',
'526,526,,,,526,526,,,,,,,526,,526,526,526,526,,,526,526,320,320,320',
',320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320',
'320,320,320,320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320,,320',
'320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320,,,320',
',,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320,320,,,,320,,,320,,',
'320,320,320,,,320,320,523,523,523,,523,,,,523,523,,,,523,,523,523,523',
'523,523,523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,,,523,,,523',
'523,523,523,523,523,523,523,523,523,523,523,,523,523,,523,523,523,,',
',,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,,523,,523,,523,,,,,,,,523',
',,,,523,523,523,523,523,523,,,,523,523,,,,,,,523,,523,523,523,523,,',
'523,523,713,713,713,,713,,,,713,713,,,,713,,713,713,713,713,713,713',
'713,,,,,,713,713,713,713,713,713,713,,,713,,,,,,,713,,,713,713,713,713',
'713,713,713,713,,713,713,713,,713,713,,,,713,,,,,,,,,,,,,,,,,,,,713',
',,713,,,713,713,,,713,,,,,,,,,,,,,,,,,,,713,713,713,713,713,713,,,,713',
'713,,,,,,,713,,,713,713,713,,,713,713,941,941,941,,941,,,,941,941,,',
',941,,941,941,941,941,941,941,941,,,,,,941,941,941,941,941,941,941,',
',941,,,,,,,941,,,941,941,941,941,941,941,941,941,,941,941,941,,941,941',
',,,941,,,,,,,,,,,,,,,,,,,,941,,,941,,,941,941,,,941,,,,,,,,,,,,,,,,',
',,941,941,941,941,941,941,,,,941,941,,,,,,,941,,,941,941,941,,,941,941',
'826,826,826,,826,,,,826,826,,,,826,,826,826,826,826,826,826,826,,,,',
',826,826,826,826,826,826,826,,,826,,,,,,,826,,,826,826,826,826,826,826',
'826,826,,826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826,,',
'826,,,826,826,,,826,,,,,,826,,,,,,,,826,,,,,826,826,826,826,826,826',
',,,826,826,,,,,,,826,,,826,826,826,,,826,826,782,782,782,,782,,,,782',
'782,,,,782,,782,782,782,782,782,782,782,,,,,,782,782,782,782,782,782',
'782,,,782,,,,,,,782,,,782,782,782,782,782,782,782,782,782,782,782,782',
',782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,,782,',
'782,,782,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782,,,,',
',,782,,782,782,782,782,,,782,782,595,595,595,,595,,,,595,595,,,,595',
',595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595',
',,,,,,595,,,595,595,595,595,595,595,595,595,,595,595,595,,595,595,,595',
'595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595,,,,,,595,,,,,,',
',595,,,,,595,595,595,595,595,595,,,,595,595,,,,,,,595,,,595,595,595',
',,595,595,636,636,636,,636,,,,636,636,,,,636,,636,636,636,636,636,636',
'636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636',
'636,636,636,636,,636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,',
',,636,,,636,,,636,636,,,636,,,,,,636,,,,,,,,636,,,,,636,636,636,636',
'636,636,,,,636,636,,,,,,,636,,,636,636,636,,,636,636,618,618,618,,618',
',,,618,618,,,,618,,618,618,618,618,618,618,618,,,,,,618,618,618,618',
'618,618,618,,,618,,,,,,,618,,,618,618,618,618,618,618,618,618,618,618',
'618,618,,618,618,,618,618,618,,,,,,,,,,,,,,,,,,,,618,,,618,,,618,618',
',,618,,618,,618,,618,,,,,,,,618,,,,,618,618,618,618,618,618,,,,618,618',
',,,,,,618,,618,618,618,618,,,618,618,665,665,665,,665,,,,665,665,,,',
'665,,665,665,665,665,665,665,665,,,,,,665,665,665,665,665,665,665,,',
'665,,,,,,,665,,,665,665,665,665,665,665,665,665,,665,665,665,,665,665',
',665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,665,,,,665',
',,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,,,665,665',
'665,,,665,665,666,666,666,,666,,,,666,666,,,,666,,666,666,666,666,666',
'666,666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666',
'666,666,666,666,666,,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,',
',,,,,,666,,,666,,,666,666,,,666,,,,,,666,,,,,,,,666,,,,,666,666,666',
'666,666,666,,,,666,666,,,,,,,666,,,666,666,666,,,666,666,23,23,23,,23',
',,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23',
',,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,',
',,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23',
'23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,667,667,667,,667,,,,667,667',
',,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667,667,667,667',
',,667,,,,,,,667,,,667,667,667,667,667,667,667,667,667,667,667,667,,667',
'667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667,,,667,,667,',
'667,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667,,,,,,,667',
',667,667,667,667,,,667,667,568,568,568,,568,,,,568,568,,,,568,,568,568',
'568,568,568,568,568,,,,,,568,568,568,568,568,568,568,,,568,,,,,,,568',
',,568,568,568,568,568,568,568,568,568,568,568,568,,568,568,,568,568',
'568,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,568,,,568,,,,,,568,,,,,,,,568',
',,,,568,568,568,568,568,568,,,,568,568,,,,,,,568,,568,568,568,568,,',
'568,568,565,565,565,,565,,,,565,565,,,,565,,565,565,565,565,565,565',
'565,,,,,,565,565,565,565,565,565,565,,,565,,,,,,,565,,,565,565,565,565',
'565,565,565,565,565,565,565,565,,565,565,,565,565,565,,,,,,,,,,,,,,',
',,,,,565,,,565,,,565,565,,,565,,565,,,,565,,,,,,,,565,,,,,565,565,565',
'565,565,565,,,,565,565,,,,,,,565,,565,565,565,565,,,565,565,670,670',
'670,670,670,,,,670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670',
'670,670,670,670,670,670,,,670,,,,,,670,670,,670,670,670,670,670,670',
'670,670,670,,670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670',
',,670,,,670,670,,,670,,670,,,,670,,,,,,,,670,,,,,670,670,670,670,670',
'670,,,,670,670,,,,,,,670,,,670,670,670,,,670,670,32,32,32,,32,,,,32',
'32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,',
'32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,',
',,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32',
'32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,',
',,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,',
',33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,',
',,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33',
',,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,',
'34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34',
'34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34',
',,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34',
'34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37',
'37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37',
'37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37',
',,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37',
'37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,671,671',
'671,,671,,,,671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671',
'671,671,671,671,671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671',
',671,671,671,,671,671,,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671',
'671,,,671,,,,,,671,,,,,,,,671,,,,,671,671,671,671,671,671,,,,671,671',
',,,,,,671,,,671,671,671,,,671,671,674,674,674,,674,,,,674,674,,,,674',
',674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,,,674',
',,,,,,674,,,674,674,674,674,674,674,674,674,674,674,674,674,,674,674',
',674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,674,,674',
',674,,,,,,,,674,,,,,674,674,674,674,674,674,,,,674,674,,,,,,,674,,674',
'674,674,674,,,674,674,559,559,559,,559,,,,559,559,,,,559,,559,559,559',
'559,559,559,559,,,,,,559,559,559,559,559,559,559,,,559,,,,,,,559,,,559',
'559,559,559,559,559,559,559,,559,559,559,,559,559,,559,559,559,,,,,',
',,,,,,,,,,,,,,559,,,559,,,559,559,,,559,,,,,,559,,,,,,,,559,,,,,559',
'559,559,559,559,559,,,,559,559,,,,,,,559,,,559,559,559,,,559,559,45',
'45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45',
'45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45',
',,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45',
'45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46',
'46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,',
'46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,',
',,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46',
',,,46,46,,,,,,,46,,,46,46,46,,,46,46,48,48,48,,48,,,,48,48,,,,48,,48',
'48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,,48,,,48,48,48',
'48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,,,,,,,,,48,,,48',
',,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48,,,,48,48,,,,,,',
'48,,,48,48,48,,,48,48,675,675,675,,675,,,,675,675,,,,675,,675,675,675',
'675,675,675,675,,,,,,675,675,675,675,675,675,675,,,675,,,,,,,675,,,675',
'675,675,675,675,675,675,675,675,675,675,675,,675,675,,675,675,675,,',
',,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,,,675,,675,,,,,,,,675,,',
',,675,675,675,675,675,675,,,,675,675,,,,,,,675,,675,675,675,675,,,675',
'675,1039,1039,1039,,1039,,,,1039,1039,,,,1039,,1039,1039,1039,1039,1039',
'1039,1039,,,,,,1039,1039,1039,1039,1039,1039,1039,,,1039,,,,,,,1039',
',,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,,1039',
'1039,,1039,1039,1039,,,,,,,,,,,,,,,,,,,,1039,,,1039,,,1039,1039,,,1039',
',1039,,1039,,1039,,,,,,,,1039,,,,,1039,1039,1039,1039,1039,1039,,,,1039',
'1039,,,,,,,1039,,1039,1039,1039,1039,,,1039,1039,63,63,63,,63,,,,63',
'63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,',
'63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,',
',,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,63,,,,,,,,63,,,,,63,63,63,63,63',
'63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,554,554,554,,554,,,,554,554',
',,,554,,554,554,554,554,554,554,554,,,,,,554,554,554,554,554,554,554',
',,554,,,,,,,554,,,554,554,554,554,554,554,554,554,,554,554,554,,554',
'554,,554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554,,,,,,554',
',,,,,,,554,,,,,554,554,554,554,554,554,,,,554,554,,,,,,,554,,,554,554',
'554,,,554,554,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,',
',67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67',
'67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67',
',,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67',
'68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68',
'68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,68,68',
'68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,68,,,,,68',
'68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,,68,68,71,71,71,,71,,,',
'71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,',
',,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71,71,71,,,,,,,,,',
',,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,,71,71,71,71,71',
'71,,,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72,72,72,,72,,,,72,72,,',
',72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,',
'72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,,,,,,,,,,,,,,,72',
',,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72,72,72,,,,72,72,,,',
',,,72,,,72,72,72,,,72,72,676,676,676,,676,,,,676,676,,,,676,,676,676',
'676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676,,,,,,,676',
',,676,676,676,676,676,676,676,676,,676,676,676,,676,676,,676,676,676',
',,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,676,,,,,,,,676,,,',
',676,676,676,676,676,676,,,,676,676,,,,,,,676,,,676,676,676,,,676,676',
'126,126,126,126,126,,,,126,126,,,,126,,126,126,126,126,126,126,126,',
',,,,126,126,126,126,126,126,126,,,126,,,,,,126,126,126,126,126,126,126',
'126,126,126,126,126,,126,126,126,,126,126,,126,126,126,,,,,,,,,,,,,',
',,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,,,,,,126,,,,,126,126,126',
'126,126,126,,,,126,126,,,,,,126,126,,,126,126,126,,,126,126,131,131',
'131,,131,,,,131,131,,,,131,,131,131,131,131,131,131,131,,,,,,131,131',
'131,131,131,131,131,,,131,,,,,,,131,,,131,131,131,131,131,131,131,131',
',131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131',
'131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131,131,131,,,,131,131',
',,,,,,131,,,131,131,131,,,131,131,132,132,132,,132,,,,132,132,,,,132',
',132,132,132,132,132,132,132,,,,,,132,132,132,132,132,132,132,,,132',
',,,,,,132,,,132,132,132,132,132,132,132,132,,132,132,132,,132,132,,132',
'132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132,,,,,,132,,,,,,',
',132,,,,,132,132,132,132,132,132,,,,132,132,,,,,,,132,,,132,132,132',
',,132,132,133,133,133,,133,,,,133,133,,,,133,,133,133,133,133,133,133',
'133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,,133,,,133,133,133,133',
'133,133,133,133,,133,133,133,,133,133,,133,133,133,,,,,,,,,,,,,,,,,',
',,133,,,133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,,,133,133,133,133',
'133,133,,,,133,133,,,,,,,133,,,133,133,133,,,133,133,134,134,134,,134',
',,,134,134,,,,134,,134,134,134,134,134,134,134,,,,,,134,134,134,134',
'134,134,134,,,134,,,,,,,134,,,134,134,134,134,134,134,134,134,,134,134',
'134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134,134,,,134',
',,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134,134,,,,,,,134',
',,134,134,134,,,134,134,135,135,135,135,135,,,,135,135,,,,135,,135,135',
'135,135,135,135,135,,,,,,135,135,135,135,135,135,135,,,135,,,,,,135',
'135,,135,135,135,135,135,135,135,135,135,,135,135,135,,135,135,,135',
'135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135,,,135,,135,,,,135,,,',
',,,,135,,,,,135,135,135,135,135,135,,,,135,135,,,,,,,135,,,135,135,135',
',,135,135,677,677,677,,677,,,,677,677,,,,677,,677,677,677,677,677,677',
'677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677',
'677,677,677,677,,677,677,677,,677,677,,677,677,677,,,,,,,,,,,,,,,,,',
',,677,,,677,,,677,677,,,677,,,,,,677,,,,,,,,677,,,,,677,677,677,677',
'677,677,,,,677,677,,,,,,,677,,,677,677,677,,,677,677,223,223,223,,223',
',,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223',
'223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223',
'223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223',
',223,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,,,,,,',
'223,,,223,223,223,,,223,223,224,224,224,,224,,,,224,224,,,,224,,224',
'224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,',
',224,,,224,224,224,224,224,224,224,224,,224,224,224,,224,224,,224,224',
'224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,224,,,,224,,,,,,,',
'224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,,,224,224,224,',
',224,224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225',
'225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225',
'225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,',
',,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225',
'225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225,225,226,226,226,,226',
',,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226',
'226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226',
'226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226',
',,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226',
',,226,226,226,,,226,226,227,227,227,,227,,,,227,227,,,,227,,227,227',
'227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227',
',,227,227,227,227,227,227,227,227,,227,227,227,,227,227,,227,227,227',
',,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,',
',227,227,227,227,227,227,,,,227,227,,,,,,,227,,,227,227,227,,,227,227',
'932,932,932,,932,,,,932,932,,,,932,,932,932,932,932,932,932,932,,,,',
',932,932,932,932,932,932,932,,,932,,,,,,,932,,,932,932,932,932,932,932',
'932,932,,932,932,932,,932,932,,,,932,,,,,,,,,,,,,,,,,,,,932,,,932,,',
'932,932,,,932,,,,,,,,,,,,,,,,,,,932,932,932,932,932,932,,,,932,932,',
',,,,,932,,,932,932,932,,,932,932,337,337,337,,337,,,,337,337,,,,337',
',337,337,337,337,337,337,337,,,,,,337,337,337,337,337,337,337,,,337',
',,,,,,337,,,337,337,337,337,337,337,337,337,,337,337,337,,337,337,,',
',337,,,,,,,,,,,,,,,,,,,,337,,,337,,,337,337,,,337,,,,,,,,,,,,,,,,,,',
'337,337,337,337,337,337,,,,337,337,,,,,,,337,,,337,337,337,,,337,337',
'724,724,724,,724,,,,724,724,,,,724,,724,724,724,724,724,724,724,,,,',
',724,724,724,724,724,724,724,,,724,,,,,,,724,,,724,724,724,724,724,724',
'724,724,,724,724,724,,724,724,,,,724,,,,,,,,,,,,,,,,,,,,724,,,724,,',
'724,724,,,724,,,,,,,,,,,,,,,,,,,724,724,724,724,724,724,,,,724,724,',
',,,,,724,,,724,724,724,,,724,724,725,725,725,,725,,,,725,725,,,,725',
',725,725,725,725,725,725,725,,,,,,725,725,725,725,725,725,725,,,725',
',,,,,,725,,,725,725,725,725,725,725,725,725,,725,725,725,,725,725,,725',
'725,725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725,,,725,,,,,,725,,,,,,',
',725,,,,,725,725,725,725,725,725,,,,725,725,,,,,,,725,,,725,725,725',
',,725,725,920,920,920,,920,,,,920,920,,,,920,,920,920,920,920,920,920',
'920,,,,,,920,920,920,920,920,920,920,,,920,,,,,,,920,,,920,920,920,920',
'920,920,920,920,,920,920,920,,920,920,,920,920,920,,,,,,,,,,,,,,,,,',
',,920,,,920,,,920,920,,,920,,,,,,920,,,,,,,,920,,,,,920,920,920,920',
'920,920,,,,920,920,,,,,,,920,,,920,920,920,,,920,920,344,344,344,,344',
',,,344,344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344',
'344,344,344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344',
'344,,344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344',
',,,,,344,,,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344',
',,344,344,344,,,344,344,346,346,346,,346,,,,346,346,,,,346,,346,346',
'346,346,346,346,346,,,,,,346,346,346,346,346,346,346,,,346,,,,,,,346',
',,346,346,346,346,346,346,346,346,,346,346,346,,346,346,,346,346,346',
',,,,,,,,,,,,,,,,,,,346,,,346,346,,346,346,,,346,,,,,,346,,,,,,,,346',
',,,,346,346,346,346,346,346,,,,346,346,,,,,,,346,,,346,346,346,,,346',
'346,349,349,349,349,349,,,,349,349,,,,349,,349,349,349,349,349,349,349',
',,,,,349,349,349,349,349,349,349,,,349,,,,,,349,349,,349,349,349,349',
'349,349,349,349,349,,349,349,349,,349,349,,349,349,349,,,,,,,,,,,,,',
',,,,,,349,,,349,,,349,349,,,349,,349,,,,349,,,,,,,,349,,,,,349,349,349',
'349,349,349,,,,349,349,,,,,,,349,,,349,349,349,,,349,349,919,919,919',
',919,,,,919,919,,,,919,,919,919,919,919,919,919,919,,,,,,919,919,919',
'919,919,919,919,,,919,,,,,,,919,,,919,919,919,919,919,919,919,919,919',
'919,919,919,,919,919,,919,919,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919',
'919,,,919,,,,919,,919,,,,,,,,919,,,,,919,919,919,919,919,919,,,,919',
'919,,,,,,,919,,919,919,919,919,,,919,919,901,901,901,,901,,,,901,901',
',,,901,,901,901,901,901,901,901,901,,,,,,901,901,901,901,901,901,901',
',,901,,,,,,,901,,,901,901,901,901,901,901,901,901,,901,901,901,,901',
'901,,901,901,901,,,,,,,,,,,,,,,,,,,,901,,,901,,,901,901,,,901,,,,,,901',
',,,,,,,901,,,,,901,901,901,901,901,901,,,,901,901,,,,,,,901,,,901,901',
'901,,,901,901,355,355,355,,355,,,,355,355,,,,355,,355,355,355,355,355',
'355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,,355,,,355,355,355',
'355,355,355,355,355,355,355,355,355,,355,355,,355,355,355,,,,,,,,,,',
',,,,,,,,,355,,,355,,,355,355,,,355,,,,,,355,,,,,,,,355,,,,,355,355,355',
'355,355,355,,,,355,355,,,,,,,355,,355,355,355,355,,,355,355,730,730',
'730,,730,,,,730,730,,,,730,,730,730,730,730,730,730,730,,,,,,730,730',
'730,730,730,730,730,,,730,,,,,,,730,,,730,730,730,730,730,730,730,730',
',730,730,730,,730,730,,730,730,730,,,,,,,,,,,,,,,,,,,,730,,,730,,,730',
'730,,,730,,730,,,,730,,,,,,,,730,,,,,730,730,730,730,730,730,,,,730',
'730,,,,,,,730,,,730,730,730,,,730,730,362,362,362,,362,,,,362,362,,',
',362,,362,362,362,362,362,362,362,,,,,,362,362,362,362,362,362,362,',
',362,,,,,,,362,,,362,362,362,362,362,362,362,362,,362,362,362,,362,362',
',362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,362,,,362,,,,,,362,',
',,,,,,362,,,,,362,362,362,362,362,362,,,,362,362,,,,,,,362,,,362,362',
'362,,,362,362,887,887,887,,887,,,,887,887,,,,887,,887,887,887,887,887',
'887,887,,,,,,887,887,887,887,887,887,887,,,887,,,,,,,887,,,887,887,887',
'887,887,887,887,887,,887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,',
',,,,,,887,,,887,,,887,887,,,887,,,,,,887,,,,,,,,887,,,,,887,887,887',
'887,887,887,,,,887,887,,,,,,,887,,,887,887,887,,,887,887,376,376,376',
',376,,,,376,376,,,,376,,376,376,376,376,376,376,376,,,,,,376,376,376',
'376,376,376,376,,,376,,,,,,,376,,,376,376,376,376,376,376,376,376,,376',
'376,376,,376,376,,,,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376,376,,,376',
',,,,,,,,,,,,,,,,,,376,376,376,376,376,376,,,,376,376,,,,,,,376,,,376',
'376,376,,,376,376,378,378,378,,378,,,,378,378,,,,378,,378,378,378,378',
'378,378,378,,,,,,378,378,378,378,378,378,378,,,378,,,,,,,378,,,378,378',
'378,378,378,378,378,378,,378,378,378,,378,378,,,,378,,,,,,,,,,,,,,,',
',,,,378,,,378,,,378,378,,,378,,,,,,,,,,,,,,,,,,,378,378,378,378,378',
'378,,,,378,378,,,,,,,378,,,378,378,378,,,378,378,749,749,749,,749,,',
',749,749,,,,749,,749,749,749,749,749,749,749,,,,,,749,749,749,749,749',
'749,749,,,749,,,,,,,749,,,749,749,749,749,749,749,749,749,,749,749,749',
',749,749,,749,749,749,,,,,,,,,,,,,,,,,,,,749,,,749,,,749,749,,,749,',
',,,,749,,,,,,,,749,,,,,749,749,749,749,749,749,,,,749,749,,,,,,,749',
',,749,749,749,,,749,749,829,829,829,,829,,,,829,829,,,,829,,829,829',
'829,829,829,829,829,,,,,,829,829,829,829,829,829,829,,,829,,,,,,,829',
',,829,829,829,829,829,829,829,829,,829,829,829,,829,829,,829,829,829',
',,,,,,,,,,,,,,,,,,,829,,,829,,,829,829,,,829,,,,,,829,,,,,,,,829,,,',
',829,829,829,829,829,829,,,,829,829,,,,,,,829,,,829,829,829,,,829,829',
'827,827,827,,827,,,,827,827,,,,827,,827,827,827,827,827,827,827,,,,',
',827,827,827,827,827,827,827,,,827,,,,,,,827,,,827,827,827,827,827,827',
'827,827,,827,827,827,,827,827,,827,827,827,,,,,,,,,,,,,,,,,,,,827,,',
'827,,,827,827,,,827,,,,,,827,,,,,,,,827,,,,,827,827,827,827,827,827',
',,,827,827,,,,,,,827,,,827,827,827,,,827,827,825,825,825,,825,,,,825',
'825,,,,825,,825,825,825,825,825,825,825,,,,,,825,825,825,825,825,825',
'825,,,825,,,,,,,825,,,825,825,825,825,825,825,825,825,,825,825,825,',
'825,825,,825,825,825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825,825,,,825,,',
',,,825,,,,,,,,825,,,,,825,825,825,825,825,825,,,,825,825,,,,,,,825,',
',825,825,825,,,825,825,824,824,824,,824,,,,824,824,,,,824,,824,824,824',
'824,824,824,824,,,,,,824,824,824,824,824,824,824,,,824,,,,,,,824,,,824',
'824,824,824,824,824,824,824,,824,824,824,,824,824,,824,824,824,,,,,',
',,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,,,,,824,,,,,,,,824,,,,,824',
'824,824,824,824,824,,,,824,824,,,,,,,824,,,824,824,824,,,824,824,770',
'770,770,,770,,,,770,770,,,,770,,770,770,770,770,770,770,770,,,,,,770',
'770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770,770,770,770,770',
'770,,770,770,770,,770,770,,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770',
',,770,770,,,770,,770,,,,770,,,,,,,,770,,,,,770,770,770,770,770,770,',
',,770,770,,,,,,,770,,,770,770,770,,,770,770,811,811,811,,811,,,,811',
'811,,,,811,,811,811,811,811,811,811,811,,,,,,811,811,811,811,811,811',
'811,,,811,,,,,,,811,,,811,811,811,811,811,811,811,811,,811,811,811,',
'811,811,,811,811,811,,,,,,,,,,,,,,,,,,,,811,,,811,,,811,811,,,811,,',
',,,811,,,,,,,,811,,,,,811,811,811,811,811,811,,,,811,811,,,,,,,811,',
',811,811,811,,,811,811,484,484,484,,484,,,,484,484,,,,484,,484,484,484',
'484,484,484,484,,,,,,484,484,484,484,484,484,484,,,484,,,,,,,484,,,484',
'484,484,484,484,484,484,484,,484,484,484,,484,484,,484,484,484,,,,,',
',,,,,,,,,,,,,,484,,,484,,,484,484,,,484,,,,,,484,,,,,,,,484,,,,,484',
'484,484,484,484,484,,,,484,484,,,,,,,484,,,484,484,484,,,484,484,483',
'483,483,,483,,,,483,483,,,,483,,483,483,483,483,483,483,483,,,,,,483',
'483,483,483,483,483,483,,,483,,,,,,,483,,,483,483,483,483,483,483,483',
'483,,483,483,483,,483,483,,483,483,483,,,,,,,,,,,,,,,,,,,,483,,,483',
',,483,483,,,483,,,,,,483,,,,,,,,483,,,,,483,483,483,483,483,483,,,,483',
'483,,,,,,,483,,,483,483,483,,,483,483,482,482,482,,482,,,,482,482,,',
',482,,482,482,482,482,482,482,482,,,,,,482,482,482,482,482,482,482,',
',482,,,,,,,482,,,482,482,482,482,482,482,482,482,,482,482,482,,482,482',
',482,482,482,,,,,,,,,,,,,,,,,,,,482,,,482,,,482,482,,,482,,,,,,482,',
',,,,,,482,,,,,482,482,482,482,482,482,,,,482,482,,,,,,,482,,,482,482',
'482,,,482,482,803,803,803,,803,,,,803,803,,,,803,,803,803,803,803,803',
'803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,,,803,,,803,803,803',
'803,803,803,803,803,,803,803,803,,803,803,,803,803,803,,,,,,,,,,,,,',
',,,,,,803,,,803,,,803,803,,,803,,,,,,803,,,,,,,,803,,,,,803,803,803',
'803,803,803,,,,803,803,,,,,,,803,,,803,803,803,,,803,803,437,437,437',
',437,,,,437,437,,,,437,,437,437,437,437,437,437,437,,,,,,437,437,437',
'437,437,437,437,,,437,,,,,,,437,,,437,437,437,437,437,437,437,437,,437',
'437,437,,437,437,,437,437,437,,,,,,,,,,,,,,,,,,,,437,,,437,,,437,437',
',,437,,,,,,437,,,,,,,,437,,,,,437,437,437,437,437,437,,,,437,437,,,',
',,,437,,,437,437,437,,,437,437,480,480,480,,480,,,,480,480,,,,480,,480',
'480,480,480,480,480,480,,,,,,480,480,480,480,480,480,480,,,480,,,,,',
',480,,,480,480,480,480,480,480,480,480,480,480,480,480,,480,480,,480',
'480,480,,,,,,,,,,,,,,,,,,,,480,,,480,,,480,480,,,480,,480,,480,,480',
',,,,,,,480,,,,,480,480,480,480,480,480,,,,480,480,,,,,,,480,,480,480',
'480,480,,,480,480,630,630,630,,630,,,,630,630,,,,630,,630,630,630,630',
'630,630,630,,,,,,630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630',
'630,630,630,630,630,630,,630,630,630,,630,630,,630,630,630,,,,,,,,,',
',,,,,,,,,,630,,,630,,,630,630,,,630,,,,,,630,,,,,,,,630,,,,,630,630',
'630,630,630,630,,,,630,630,,,,,,,630,,,630,630,630,,,630,630,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11',
'11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,',
',,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,',
',,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,',
',,11,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12',
'12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12',
'12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,',
',,,,,,,,12,,,,,,,,,12,,,,,12,662,662,662,662,662,662,662,662,662,662',
'662,662,662,662,662,662,662,662,662,662,662,662,662,662,,,,662,662,662',
'662,662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662,662,662',
',,662,,,,,,,,,662,662,,662,662,662,662,662,662,662,,,662,662,,,,662',
'662,662,662,,,,,,,,,,,,,,662,662,,662,662,662,662,662,662,662,662,662',
'662,662,,,662,662,,,,,,,,,,662,,,,,,,,,662,,,,,662,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,,,,103,103,103,103,103,103,103,103,103,103,,,,,,103,103,103',
'103,103,103,103,103,103,103,103,103,,103,,,,,,,103,103,,103,103,103',
'103,103,103,103,,,103,103,,,,103,103,103,103,,,,,,,,,,,,,,103,103,,103',
'103,103,103,103,103,103,103,103,103,103,,,103,,,,,,,,,,,,,,,,,,,,103',
',,,,103,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428',
'428,428,428,428,428,428,428,428,428,,,,428,428,428,428,428,428,428,428',
'428,428,,,,,,428,428,428,428,428,428,428,428,428,,,428,,,,,,,,,428,428',
',428,428,428,428,428,428,428,,,428,428,,,,428,428,428,428,,,,,,,,,,',
',,,428,428,,428,428,428,428,428,428,428,428,428,428,428,,,428,428,,',
',,,,,,,428,,,,,,,,,428,,,,,428,791,791,791,791,791,791,791,791,791,791',
'791,791,791,791,791,791,791,791,791,791,791,791,791,791,,,,791,791,791',
'791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791,791,791,791',
',,791,,,,,,,,,791,791,,791,791,791,791,791,791,791,,,791,791,,,,791',
'791,791,791,,,,,,,,,,,,,,791,791,,791,791,791,791,791,791,791,791,791',
'791,791,,,791,,,,,,,,,,,,,,,,,,,,791,,,,,791,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75',
'75,75,75,75,,,,,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75',
',75,75,75,75,75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75',
'75,75,75,75,75,75,75,75,75,75,,,75,,,,,,,,,,478,478,,,478,,,,,,75,,',
'478,478,75,478,478,478,478,478,478,478,,,478,478,,,,478,478,478,478',
',,,,,478,,,,,,,,478,478,,478,478,478,478,478,478,478,478,478,478,478',
',,478,,,,,,,,,,620,620,,,620,,,,,,478,,,620,620,478,620,620,620,620',
'620,620,620,,,620,620,,,,620,620,620,620,,,,,,620,,,,,,,,620,620,,620',
'620,620,620,620,620,620,620,620,620,620,,,620,,,,,,,,,,619,619,,,619',
',,,,,620,,,619,619,620,619,619,619,619,619,619,619,,,619,619,,,,619',
'619,619,619,,,,,,619,,,,,,,,619,619,,619,619,619,619,619,619,619,619',
'619,619,619,,,619,,,,,,,,,,1041,1041,,,1041,,,,,,619,,,1041,1041,619',
'1041,1041,1041,1041,1041,1041,1041,,,1041,1041,,,,1041,1041,1041,1041',
',,,,,1041,,,,,,,,1041,1041,,1041,1041,1041,1041,1041,1041,1041,1041',
'1041,1041,1041,,,1041,,,,,,,,,,1040,1040,,,1040,,,,,,1041,,,1040,1040',
'1041,1040,1040,1040,1040,1040,1040,1040,,,1040,1040,,,,1040,1040,1040',
'1040,,,,,,1040,,,,,,,,1040,1040,,1040,1040,1040,1040,1040,1040,1040',
'1040,1040,1040,1040,,,1040,,,,,,,,,,1035,1035,,,1035,,,,,,1040,,,1035',
'1035,1040,1035,1035,1035,1035,1035,1035,1035,,,1035,1035,,,,1035,1035',
'1035,1035,,,,,,1035,,,,,,,,1035,1035,,1035,1035,1035,1035,1035,1035',
'1035,1035,1035,1035,1035,,,1035,,,,,,,,,,229,229,,,229,,,,,,1035,,,229',
'229,1035,229,229,229,229,229,229,229,,,229,229,,,,229,229,229,229,,',
',,,229,,,,,,,,229,229,,229,229,229,229,229,229,229,229,229,229,229,',
',229,,,,,,,,,,230,230,,,230,,,,,,229,,,230,230,229,230,230,230,230,230',
'230,230,,,230,230,,,,230,230,230,230,,,,,,230,,,,,,,,230,230,,230,230',
'230,230,230,230,230,230,230,230,230,,358,230,358,358,358,358,358,,,',
',279,279,,,279,358,,,,,230,,,279,279,230,279,279,279,279,279,279,279',
',,279,279,358,358,,279,279,279,279,,,358,358,358,358,,,,,,,,279,279',
',279,279,279,279,279,279,279,279,279,279,279,,,279,,,,,,,,,358,479,479',
',,479,,,,,,279,,,479,479,279,479,479,479,479,479,479,479,,,479,479,',
',,479,479,479,479,,,,,,479,,,,,,,,479,479,,479,479,479,479,479,479,479',
'479,479,479,479,,,479,,,,,,,,,,781,781,,,781,,,,,,479,,,781,781,479',
'781,781,781,781,781,781,781,,,781,781,,,,781,781,781,781,,,,,,781,,',
',,,,,781,781,,781,781,781,781,781,781,781,781,781,781,781,,,781,,,,',
',,,,,780,780,,,780,,,,,,781,,,780,780,781,780,780,780,780,780,780,780',
',,780,780,,,,780,780,780,780,,,,,,780,,,,,,,,780,780,,780,780,780,780',
'780,780,780,780,780,780,780,,,780,,,,,,,,,,545,545,,,545,,,,,,780,,',
'545,545,780,545,545,545,545,545,545,545,,,545,545,,,,545,545,545,545',
',,,,,545,,,,,,,,545,545,,545,545,545,545,545,545,545,545,545,545,545',
',,545,,,,,,,,,,546,546,,,546,,,,,,545,,,546,546,545,546,546,546,546',
'546,546,546,,,546,546,,,,546,546,546,546,,,,,,546,,,,,,,,546,546,,546',
'546,546,546,546,546,546,546,546,546,546,,,546,,,,,,,,,,555,555,,,555',
',,,,,546,,,555,555,546,555,555,555,555,555,555,555,,,555,555,,,,555',
'555,555,555,,,,,,555,,,,,,,,555,555,,555,555,555,555,555,555,555,555',
'555,555,555,,,555,,,,,,,,,,556,556,,,556,,,,,,555,,,556,556,555,556',
'556,556,556,556,556,556,,,556,556,,,,556,556,556,556,,,,,,556,,,,,,',
',556,556,,556,556,556,556,556,556,556,556,556,556,556,,,556,,,,,,,,',
',669,669,,,669,,,,,,556,,,669,669,556,669,669,669,669,669,669,669,,',
'669,669,,,,669,669,669,669,,,,,,669,,,,,,,,669,669,,669,669,669,669',
'669,669,669,669,669,669,669,,,669,,,,,,,,,,668,668,,,668,,,,,,669,,',
'668,668,669,668,668,668,668,668,668,668,,,668,668,,,,668,668,668,668',
',,,,,668,,,,,,,,668,668,,668,668,668,668,668,668,668,668,668,668,668',
',790,668,790,790,790,790,790,948,,948,948,948,948,948,,,790,,,,,668',
',948,,950,668,950,950,950,950,950,,,,,,,790,,,950,,,,948,,790,790,790',
'790,,,,948,948,948,948,,,,,952,950,952,952,952,952,952,,,,,,950,950',
',,952,,,,954,790,954,954,954,954,954,982,948,982,982,982,982,982,,,954',
',952,,,,,982,,,950,,,952,952,985,,985,985,985,985,985,954,,,,,,,982',
',985,,954,954,,,,982,982,982,982,,,,,,952,,,,,987,985,987,987,987,987',
'987,,,,985,985,985,985,,954,987,,,,,1061,982,1061,1061,1061,1061,1061',
'1063,,1063,1063,1063,1063,1063,,,1061,987,,,,,,1063,,985,,,987,987,789',
',789,789,789,789,789,1088,1061,1088,1088,1088,1088,1088,,1063,789,,',
'1061,1061,,,1088,,,1063,1063,,,,,987,,,,,,789,,,,,,,1088,,789,789,789',
'789,,,1061,,,1088,1088,,,1063,,,,,,,,,,,,,,,,,,,,,,,789,,,,,,,1088' ]
        racc_action_check = arr = ::Array.new(26351, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   215,  4615,  1341,   nil,   492,   nil,   nil,  6724,  1356,
   nil, 23804, 23942,   948,   nil,   906,   898,   761,   945,   375,
   138,   nil,   100, 14424,  2641,  1003,   nil,   114,   nil,   204,
  1073,  1281, 15124, 15264, 15404,   nil,  4756, 15544, 15684,   nil,
   892,   146,   160,   951,   267, 16244, 16384,   223, 16524,   878,
   780,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1673,   nil,   -79, 16944,   nil,   -19,   nil, 17224, 17364,   nil,
   nil, 17504, 17644,   913,   nil, 24632,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -71,   nil,   nil,   nil,   nil,   nil,   nil,   845,
   844,   843,   812, 24218,   nil,   nil,   nil,   nil,   nil,   nil,
   537,   nil,   nil,   676,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 17924,   nil,   nil,   nil,
   nil, 18064, 18204, 18344, 18484, 18624,   821,   nil,   776,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   802,   nil,  4333, 18904, 19044, 19184, 19324, 19464,  6024, 25143,
 25216,   nil,   nil,  6164,  6304,  6444,   nil,   nil,   684,   162,
   220,   875,   240,   764,   819,   nil,  7144,  2782,   814,  7424,
  7564,  7704,  7844,  7984,  8124,  8264,  8404,  8544,  8684,  8824,
  8964,  9104,  9244,  9384,  9524,  9664,  9804,  9944, 10084, 10224,
 10364,   nil,   nil,   nil,   nil, 10504,   nil,   nil,   nil, 25289,
   nil,   nil,   806, 10784,   nil,   nil,   799,   nil,   nil,   nil,
 11064,   nil,   nil, 11204,   nil,  2923,   nil,   743,   738,   nil,
 11344,   778, 11624,   nil,   nil, 11764, 11904,   nil,   nil,   560,
   nil,   nil, 12044,  1230,   nil,   719,  3205,   736,   770,   730,
 12884,  3910,   648,   629,   643,   791,   593,   nil,   741,   704,
   -15,   nil,   nil,   nil,   736,   161,   689, 19744,   nil,   412,
   699,   442,   nil,   690, 20304,   nil, 20444,  5179,   nil, 20584,
   643,   nil,   609,   582,   544, 21004,   nil,   nil, 25278,   299,
    -8,   124, 21284,  5884,  4897,   504,   603,   468,    65,    64,
   371,   537,    66,   362,   nil,   nil, 21564,   nil, 21704,   349,
   353,   357,   -50,   416,   173,   283,   225,   113,   nil,   385,
   nil,   nil,   nil,   nil,   nil,   474,   nil,   436,   nil,   619,
   nil,    64,   272,   nil,    48,   266,   nil,   -25,   -28,   nil,
  1219,   -59,   nil,   531,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4474, 24356,   nil,
   nil,   nil,   nil,  1225,   nil,   nil,  1206, 23384,  1205,   nil,
   nil,  1189,   nil,   775,   247,  1288,   nil,   nil,  1936,   nil,
   nil,   nil,   nil,   nil,  2077,  1204,   nil,   nil,  1200,  1199,
   580,   713,  1805,   nil,   nil,   nil,   404,     0,  1236,   nil,
   nil,  1409,  1541,   nil,   nil,   nil,    22,   nil, 24705, 25362,
 23524,   295, 23104, 22964, 22824,  3205,  3064,   -47,   570,  1258,
  1252,  1249,  1248,  1755,  1491,  1623,  3628,  3769,  4051,  1152,
  3910,  4192,   971,   626,  3346,  3487,  2218,  1021,  1266,   nil,
  1201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1148,
  1119,   nil,   nil, 13024,   nil,   nil, 12744,   nil, 12604,   nil,
   196,   nil,   nil,   nil, 12464,  1052,  1127,  1092,  1076,   nil,
   nil,  1074, 10924,  1049,  7284, 25581, 25654,   444,  1083,   nil,
  6584,  1040,   nil,  1079, 17084, 25727, 25800,  1359,  2782, 16104,
  1158,  1150,  1262,   nil,   nil, 14844,   nil,   nil, 14704,   nil,
  1042,   nil,   500,  1066,   nil,   871,   nil,  1010,  1009,   nil,
  1007,  1000,   999,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   979,   843,   nil,   nil, 13724,   nil,   nil,   nil,  1067,
   nil,   nil,   nil,  1060,   nil,   nil,  1066,  5602,  1096,   nil,
  5038,    36,  1098,  1097,  1087,  1087,   nil,   nil, 14004, 24851,
 24778,    68,   nil,   312,   280,   180,   nil,   508,   nil,  1012,
 23664,   nil,  1031,   nil,   nil,   nil, 13864,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   232,   nil,
   nil,   203,   nil,   nil,   nil,  1001,   nil,   nil,  1003,   nil,
  1021,   nil, 24080,   nil,  1008, 14144, 14284, 14564, 25946, 25873,
 14984, 15824,   726,  1067, 15964, 16664, 17784, 18764,  1074,   nil,
   nil,   nil,  6864, 10644,  1086,   nil,   nil,   349,   375,   133,
   272,  1080,  1079,   nil,   212,  1185,    77,   nil,  1118,   nil,
  1223,   nil,   nil,  1104,   nil,  1146, 12184,   nil,   nil, 12324,
   nil,   nil,   -98, 13164,  1118,   nil,  1128,    -5,    37,  1186,
    24,   504,  1187,  1151, 19884, 20024,  1215,   -10,    36,   nil,
 21144,   nil,   nil,  1157,   474,   nil,   nil,    23,  1159,   358,
   nil,   nil,   439,  1736,   nil,  1604,   nil,   605,   nil, 21844,
   nil,   937,   nil,  1158,   375,  1170,   nil,   nil,   nil,   nil,
   -11,   nil,  1284,   nil,   nil,   nil,   nil,   nil,  1290,   nil,
 22544,  1180,   -19,    36,   162,   164,  3487,   nil,   490,   nil,
 25508, 25435, 13584,   nil,   nil,   nil,    -3,  5461,  5320, 26209,
 26008, 24494,    -7,   513,  3628,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1207, 23244,  1214,   377,   381,   940,   808,   nil,
  2500, 22684,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 22404, 22264, 13444, 22124,   -63, 21984,
   nil,   nil,  1211,   nil,  5743,   nil,   nil,   130,   nil,   -54,
   nil,   nil,   nil,   nil,   168,    -9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  3064,   nil,   193,   284,   nil,   nil,   nil,
   nil,   nil,  3346,  4051,   265,   283,   328,   nil,   nil,   nil,
   332,   356,   nil,   423,   425,   nil,   431,   nil,   nil,   436,
   904,   440,   911,   nil,   581,   nil,   nil, 21424,   nil,  4192,
   592,   nil,   nil,    54,    -7,   618,   412,   438,   nil,   523,
  2218, 20864,   -77,   646,   648,   551,   457,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   558,   581,   399,   nil,   nil, 20724,
 20164,  2359,   639,   647,   nil,   659,   670,   672,   nil,   701,
   685,   668, 19604,   nil,   nil,   nil,   nil,  2641,  3769,   nil,
   143, 13304,   nil,   741,   847,   644,   nil,   nil, 26015,   nil,
 26033,   nil, 26070,   nil, 26090,   nil,   nil,   nil,   nil,   397,
  1195,   735,   nil,   152,   nil,   nil, 11484,  1936,   nil,   nil,
   859,   596,   nil,   nil,   nil,   nil,   nil,   781,   nil,   366,
   nil,   nil, 26097,   nil,   nil, 26121,   nil, 26158,   nil,   nil,
   796,  7004,   680,   855,   nil,   921,  2077,    -1,   122,   747,
   881,   142,   nil,   nil,   nil,   194,   nil,   nil,   nil,   814,
   815,   816,   821,   834,   944,   838,  1008,  2923,   nil,   405,
   nil,   nil,  2500,  2359,   849,   nil,   nil,   855,   856,   857,
   858,   nil,   860,   nil,   758, 25070,   nil,   nil,   996, 16804,
 24997, 24924,    53,   nil,  1136,  1472,   nil,   nil,   nil,   nil,
  1141,   893,     9,   nil,   nil,   nil,  1019,  1020,   nil,   739,
   nil, 26179,   nil, 26186,   nil,  1001,   nil,   nil,   946,   947,
   nil,   914,    26,    51,     6,    88,   nil,   935,   943,   nil,
   nil,   nil,   950,  1031,  1059,  1068,   139,   nil, 26216,   nil,
   nil,   nil,   nil,   591,   nil ]

racc_action_default = [
    -1,  -651,  -650,  -651,    -2,  -637,    -4,    -5,  -651,    -8,
    -9,  -651,  -651,  -651,   -35,  -651,  -651,   -39,  -651,  -651,
  -297,   -51,  -639,  -651,   -56,   -61,   -62,   -63,   -67,  -274,
  -274,  -274,  -311,  -344,  -345,   -79,  -650,   -83,   -91,   -93,
  -651,  -538,  -539,  -651,  -651,  -651,  -651,  -233,  -651,  -639,
  -247,  -288,  -289,  -290,  -291,  -292,  -293,  -294,  -295,  -296,
  -623,  -299,  -302,  -650,  -309,  -319,  -424,  -651,  -651,   -58,
   -58,  -637,  -651,  -329,  -336,  -651,  -346,  -347,  -349,  -350,
  -351,  -352,  -353,  -354,  -355,  -356,  -357,  -358,  -367,  -469,
  -470,  -471,  -472,  -473,  -474,  -650,  -477,  -650,  -650,  -650,
  -650,  -650,  -650,  -650,  -514,  -520,  -522,  -523,  -524,  -525,
  -621,  -527,  -528,  -622,  -530,  -531,  -532,  -533,  -534,  -535,
  -536,  -537,  -542,  -543,  1095,    -3,  -638,  -646,  -647,  -648,
    -7,  -651,  -651,  -651,  -651,  -651,  -651,   -23,  -651,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -134,  -135,
  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,
  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
   -28,  -131,  -650,  -651,  -651,  -651,  -651,  -651,  -650,  -651,
  -651,  -633,  -634,  -651,  -651,  -639,  -640,   -55,  -651,  -538,
  -539,  -651,  -297,  -651,  -651,  -239,  -651,  -650,  -651,  -218,
  -219,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,
  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,  -651,
  -651,  -248,  -249,  -250,  -251,  -651,  -360,  -453,  -432,  -651,
  -635,  -636,   -68,  -651,  -318,  -359,  -651,  -446,  -448,   -74,
  -650,  -443,   -75,  -639,   -76,  -254,  -269,  -650,  -650,  -273,
  -651,  -279,  -651,  -650,  -615,  -651,  -651,   -77,   -78,  -637,
   -16,   -17,  -651,   -20,   -21,   -81,  -650,  -639,  -651,   -84,
   -87,  -650,   -99,  -100,  -651,  -651,  -107,  -311,  -314,  -639,
  -436,  -344,  -345,  -348,  -444,  -651,   -89,  -651,   -95,  -307,
  -521,  -651,  -227,  -228,  -651,  -240,  -651,  -650,  -301,  -651,
  -651,  -255,  -643,  -643,  -651,  -650,  -320,  -321,  -570,   -57,
  -651,  -651,  -651,  -650,  -650,  -637,  -651,  -638,  -538,  -539,
  -651,  -651,  -297,  -651,  -377,  -378,  -651,  -332,  -651,  -122,
  -123,  -165,  -166,  -167,  -183,  -188,  -195,  -198,  -339,  -651,
  -538,  -539,  -610,  -611,  -475,  -651,  -498,  -651,  -500,  -651,
  -502,  -651,  -651,  -482,  -651,  -651,  -488,  -651,  -651,  -494,
  -651,  -651,  -496,  -651,  -513,  -515,  -516,  -517,  -518,    -6,
  -649,   -29,   -30,   -31,   -32,   -33,   -10,  -650,  -651,   -25,
   -26,   -27,  -132,  -651,   -36,   -38,  -284,  -651,  -651,  -283,
   -37,  -651,   -40,  -651,  -297,   -48,   -50,  -206,  -259,  -279,
   -52,   -53,   -41,  -207,  -259,  -639,  -264,  -265,  -650,  -650,
  -624,  -625,  -274,  -441,  -626,  -627,  -625,  -624,  -274,  -440,
  -442,  -626,  -627,   -47,  -215,   -54,  -639,  -317,  -651,  -651,
  -650,  -307,  -651,  -651,  -651,  -216,  -217,  -220,  -221,  -222,
  -223,  -224,  -225,  -229,  -230,  -231,  -232,  -234,  -235,  -236,
  -237,  -238,  -241,  -242,  -243,  -244,  -639,  -252,  -651,  -454,
  -274,  -624,  -625,   -65,   -69,  -275,  -437,  -450,  -453,  -639,
  -639,  -313,  -270,  -651,  -278,  -271,  -651,  -276,  -651,  -280,
  -651,  -618,  -620,   -15,  -638,   -19,  -651,  -639,   -80,  -305,
   -96,   -85,  -651,  -639,  -650,  -651,  -651,  -106,  -651,  -521,
  -651,   -92,   -97,  -651,  -651,  -651,  -651,  -253,  -245,  -651,
  -461,  -651,  -303,  -641,  -256,  -645,  -644,  -258,  -645,  -308,
  -651,  -613,  -643,  -651,  -425,  -570,  -428,  -609,  -609,  -553,
  -555,  -555,  -555,  -569,  -571,  -572,  -573,  -574,  -575,  -576,
  -577,  -578,  -651,  -580,  -582,  -584,  -589,  -591,  -592,  -594,
  -599,  -601,  -602,  -604,  -605,  -606,  -651,  -650,  -368,  -369,
  -650,  -651,  -651,  -651,  -651,  -651,  -363,  -456,  -650,  -651,
  -651,  -307,   -58,  -117,  -118,  -651,  -120,  -651,  -297,  -650,
  -651,  -337,  -548,  -341,  -631,  -632,  -651,  -476,  -499,  -504,
  -505,  -507,  -478,  -501,  -479,  -503,  -480,  -481,  -651,  -484,
  -486,  -651,  -487,  -490,  -491,  -651,  -492,  -493,  -651,  -519,
  -651,   -24,  -651,   -34,  -287,  -651,  -651,  -650,  -651,  -651,
  -651,  -651,  -445,  -651,  -266,  -268,  -651,  -651,   -70,  -262,
  -263,  -438,  -651,  -651,   -72,  -439,  -316,  -624,  -625,  -624,
  -625,  -639,  -651,  -431,  -650,   -64,  -433,  -450,  -651,  -451,
  -651,  -261,  -312,  -650,  -277,  -281,  -651,  -616,  -617,  -651,
   -18,   -22,   -82,  -651,   -88,   -94,  -639,  -624,  -625,  -650,
  -628,  -105,  -651,   -90,  -651,  -651,  -226,  -639,  -650,  -361,
  -650,  -300,  -366,  -639,  -643,  -310,  -614,  -651,  -639,  -651,
  -551,  -552,  -651,  -651,  -562,  -651,  -565,  -651,  -567,  -651,
  -379,  -651,  -381,  -383,  -390,  -639,  -583,  -593,  -603,  -607,
  -650,  -370,  -650,   -59,  -371,  -372,  -324,  -325,  -651,  -327,
  -651,  -639,  -624,  -625,  -628,  -306,  -650,  -117,  -118,  -119,
  -651,  -651,  -650,  -330,  -544,  -546,  -333,  -650,  -650,  -570,
  -570,  -651,  -639,  -651,  -650,  -483,  -485,  -489,  -495,  -497,
   -11,  -133,  -285,  -651,  -639,  -624,  -625,  -625,  -624,   -49,
  -260,  -651,  -642,  -650,   -43,  -209,   -44,  -210,   -71,   -45,
  -212,   -46,  -211,   -73,  -651,  -651,  -651,  -651,  -445,  -651,
  -413,  -414,  -639,  -416,  -650,  -435,  -434,  -651,  -447,  -650,
  -449,  -272,  -282,  -619,   -86,  -445,   -98,  -214,  -315,   -12,
   -14,  -362,  -364,  -650,  -468,  -462,  -650,  -463,  -464,  -304,
  -257,  -426,  -650,  -650,  -418,  -639,  -609,  -590,  -608,  -554,
  -555,  -555,  -581,  -555,  -555,  -600,  -555,  -578,  -595,  -639,
  -651,  -388,  -651,  -579,  -651,  -365,  -373,  -651,  -375,  -650,
  -651,   -60,  -326,  -651,  -445,  -651,  -117,  -118,  -121,  -639,
  -650,  -651,  -651,  -651,  -651,  -639,  -651,  -342,  -612,  -506,
  -509,  -510,  -511,  -512,  -651,  -286,  -445,   -42,  -208,  -267,
  -651,  -246,  -609,  -609,  -395,  -650,  -650,  -650,  -412,  -651,
  -639,  -578,  -586,  -587,  -597,  -455,   -66,  -650,  -650,  -467,
  -651,  -651,  -466,  -651,  -651,  -651,  -427,  -550,  -651,  -558,
  -651,  -560,  -651,  -563,  -651,  -566,  -568,  -380,  -382,  -386,
  -651,  -391,  -322,  -651,  -376,  -323,  -651,  -650,  -328,  -445,
  -651,  -651,  -334,  -338,  -340,  -547,  -549,  -548,  -508,  -651,
  -393,  -394,  -403,  -397,  -405,  -651,  -408,  -651,  -410,  -415,
  -651,  -651,  -585,  -651,  -452,  -650,  -650,  -538,  -539,  -651,
  -651,  -297,  -465,  -429,  -430,  -639,  -420,  -422,  -423,  -555,
  -555,  -555,  -555,  -384,  -651,  -389,  -651,  -650,  -281,  -650,
  -331,  -545,  -650,  -650,  -609,  -588,  -396,  -650,  -650,  -650,
  -650,  -598,  -650,  -417,  -596,  -651,  -307,   -13,  -461,  -650,
  -651,  -651,  -307,  -419,  -651,  -651,  -556,  -559,  -561,  -564,
  -651,  -387,  -650,  -457,  -458,  -459,  -651,  -651,  -392,  -651,
  -400,  -651,  -402,  -651,  -406,  -651,  -409,  -411,  -306,  -628,
  -460,  -639,  -624,  -625,  -628,  -306,  -421,  -555,  -385,  -374,
  -335,  -343,  -650,  -650,  -650,  -650,  -445,  -557,  -651,  -398,
  -401,  -404,  -407,  -650,  -399 ]

clist = [
'6,237,234,388,333,333,229,278,455,462,468,551,142,142,280,672,356,296',
'296,296,9,360,361,615,426,365,9,561,728,346,4,415,583,147,147,707,129',
'363,364,333,452,29,126,291,137,221,473,29,607,610,564,567,576,145,145',
'704,514,866,704,510,788,351,29,340,884,508,319,525,439,440,519,29,29',
'29,125,29,142,707,317,348,336,740,741,850,890,421,422,423,424,875,395',
'865,779,396,926,398,400,403,406,409,412,398,129,834,142,315,29,29,1031',
'698,29,961,130,1008,453,1006,376,900,755,958,474,630,872,298,298,298',
'282,289,292,902,1022,294,307,308,378,591,446,397,648,446,366,651,787',
'413,9,446,297,297,297,629,923,631,632,425,353,791,977,389,783,373,357',
'928,570,392,696,29,354,930,344,662,29,29,29,29,29,697,279,352,1005,2',
'1,574,1031,861,707,929,358,737,32,1015,891,763,428,517,32,518,839,694',
'1053,770,856,434,445,940,394,445,704,704,435,32,399,445,1008,296,1076',
'402,714,375,32,32,32,405,32,408,723,478,456,411,525,909,419,472,793',
'794,414,901,220,536,870,710,938,849,463,1051,1027,867,1025,898,937,583',
'136,828,477,32,32,958,636,32,462,468,691,29,29,29,29,29,29,29,296,738',
'736,768,29,29,29,296,845,879,296,1078,347,633,349,990,733,355,29,333',
'456,837,,,875,,,524,524,1024,530,516,923,396,,923,333,923,700,,,548',
'521,545,32,,,,611,32,32,32,32,32,29,,716,719,,,555,29,535,894,29,872',
'538,719,,438,438,,129,1054,,333,,333,534,291,,,1037,29,591,571,549,29',
'1079,619,537,,29,872,541,543,916,,552,562,,474,947,453,359,359,298,',
'359,923,533,923,,923,515,923,298,315,29,844,29,,315,,520,,,,129,297',
'771,719,,29,29,29,,1023,923,297,32,32,32,32,32,32,32,,,,,32,32,32,,',
'711,6,980,981,707,142,668,,860,32,614,673,359,359,359,359,,,,,872,9',
'572,804,462,468,147,704,818,,,660,524,524,823,969,679,661,,583,583,296',
'29,903,904,32,145,,841,,,680,32,,456,32,472,685,,905,906,871,692,873',
',814,816,463,,686,,819,821,318,32,,,,32,,,,1070,32,679,333,643,,645',
',935,649,,333,649,29,591,,591,680,,,643,,1058,296,450,451,,32,,32,701',
'702,,475,476,,456,944,,,,472,32,32,32,,,,712,,,472,463,678,715,719,899',
'815,817,684,591,591,463,820,822,552,,29,927,857,,,446,552,970,967,841',
'29,,,,750,446,446,776,,,,446,446,,,29,,,,,296,,,,695,,931,,,847,32,703',
',456,,,,,472,,,917,,,785,996,,,1086,463,,,,,,,,,,764,,445,,29,836,,29',
',1017,296,,445,445,734,29,,,445,445,,142,,456,32,359,,29,472,673,,,',
'29,1055,835,,,333,463,,433,147,,,,809,,1009,333,830,,,801,673,,918,',
',524,1056,1057,145,29,29,,318,29,,815,817,822,820,29,29,679,864,907',
'32,29,29,446,1028,591,854,1029,858,,32,,680,,,685,,,,,,,552,,848,32',
'750,,,881,859,673,,846,,,,,888,931,888,796,931,,796,813,,296,,,,,883',
',,,,318,,,456,472,318,,673,,,,,445,,,142,32,463,,32,,,,,1082,,,32,,',
'918,,908,,524,864,,,29,32,,,1071,719,29,32,,612,613,29,29,,,,,,29,,',
'931,830,,,,963,,,438,,,,,,29,,32,32,942,971,32,,744,746,748,,32,32,727',
',,,32,32,,,,29,,750,,750,,673,,,946,19,893,,,,,19,,868,29,,868,,957',
',,333,,29,29,,238,,,,333,,864,,,238,238,238,,19,324,324,,,975,983,983',
'983,29,,29,,,,,972,,786,,976,,29,29,792,,,,,,,238,238,,,238,370,1013',
'750,,,333,,,,32,,,18,,,32,,,18,,32,32,,29,29,,,32,,,,924,1043,1040,',
',,,,,854,,,,32,,18,,,1021,,,,29,19,,750,,750,238,238,238,238,19,888',
',,32,,,,296,983,983,983,983,,983,874,,876,,29,472,456,,32,,,472,731',
',750,,,32,32,888,673,,463,,,29,,,,,29,29,,,,,,760,,,762,,32,,32,932',
',29,,983,983,983,983,,,32,32,,18,,983,,,766,767,,769,18,,,,,19,238,443',
'238,238,443,238,,,,,443,238,238,,925,,,,,32,32,,,,19,,,868,,,924,,,924',
',924,,,,,,,,,949,951,,953,955,32,956,,,,,,,,,,238,,,,,,,238,,,238,,',
',,,,,32,,,18,,18,,,18,,359,19,,,18,19,,,,324,19,32,,,359,,32,32,18,924',
',924,,924,,924,324,,,,,932,,32,932,42,19,932,19,932,,42,1010,,1011,895',
'1012,,924,,,238,19,19,,,,,892,,,,,914,,627,,627,,42,323,323,,,,,,,,1030',
',1032,,18,,,,18,,,,,18,,,1046,1047,1048,1049,,,,,,,369,,,391,,,932,',
'932,,932,19,932,18,,18,,939,,,,,,,,,943,,,18,18,,,,1077,932,,,,,,,,',
',,,,1083,41,1084,,1085,964,42,41,,,1087,984,986,988,,42,238,,,,,962',
',,,,,965,,1093,,,968,,,41,322,322,,,973,974,,,,18,,,,,,,,994,995,,,',
',,,,,,,,,,,,19,368,,,390,,,,324,,238,,,1019,,,324,,,,,,,,,238,,,,,,',
'42,,,,,1020,,,,,1038,1060,1062,1064,1066,,1067,,,,,,,41,,42,,,,,,1052',
'41,,,,,,,,,19,,,19,,,,,,18,,238,,,,,,,,,,,,238,,1089,1090,1091,1092',
'238,,,,,,,1094,,,,,,,,,,,,,42,1080,1081,,42,,,,323,42,443,238,,,19,',
',,,,443,443,,,,323,443,443,,41,,,,18,,42,18,42,,,,,,,,,,,,,,42,42,,41',
',,324,,,,,,,391,,391,,324,,,,,,,,,,,,,,,,,,,,,,,,18,,,,18,,,,,,18,18',
',,,,18,18,,,,,,42,,,,41,19,,,41,,,238,322,41,,,19,19,,,,,,19,,,,,,322',
',,,,,,,,16,41,443,41,,,16,,,,,,,,,,,41,41,,,,,,,19,,,,,390,,390,,16',
'436,449,,,,,,,,19,,,,,18,,,,19,19,,,,,,18,18,,,,,,18,,42,374,,,,,,,323',
'238,,19,41,,,18,323,,,,,,19,238,,,,,,,,,,,,,,,18,,,,,527,,529,,,531',
'532,20,,,,992,16,20,18,,19,19,,,999,16,,18,18,,,,,,42,,,42,,,,,,,,20',
'326,326,,,19,,,,18,,,,,573,,,,,,18,,,,,,,,,1034,,,,,19,41,372,,,,,,',
'322,,,,,,,,322,42,,,19,,18,18,,19,19,,,,,,16,,441,,,441,,,,,238,441',
',,,,,,,,18,,,20,,16,,,323,664,,,20,,,,,,,323,,41,,,41,,,,,18,,,,,,,',
',,,,,,,,,,,,,18,,,,,18,18,,,,,,,,,,,,,,16,42,,,16,,,,,16,,,42,42,41',
',,,,42,,,,,,705,,,573,20,708,444,,,444,16,,16,,,444,,,,,,,,,,,16,16',
',20,,,322,,42,,,,,,,,705,322,,573,,,,,,,,42,,,,,,,,,42,42,,,,,,,,,756',
',,,,,,,,,,,,,,,,42,16,,,,20,41,,,20,,42,,326,20,,,41,41,,,,,,41,,,,',
',326,,,,,,,,,,20,,20,391,,,,,42,42,,,998,802,,,20,20,,,,,705,573,41',
',,,,628,,628,,,,,,,42,,,,,41,,,,,,,,,41,41,842,,,843,,,,,391,,,,,42',
'16,,,,,,,,,,855,41,20,,,,,,,,42,,41,,,42,42,,,878,,,,,,,,,,,,,,,,,,',
',,449,,,,390,,,,,41,41,,,997,,,,,,,,,,16,,,16,,,,,,,915,,,,,,41,,,,',
',,,,,,,,,,,,,,,,,,,390,,,,,41,20,,,,,,,,326,,,,,441,,,326,16,,,41,,',
'441,441,41,41,,,441,441,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20',
',,20,,,,573,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,,,,1018,,,',
',444,,16,16,20,,,,,16,444,444,,,,,444,444,,,,,,,,,441,,,,,,,,,,,,,,',
',,,,,,326,,16,245,,,,,,,,326,295,295,295,,,,,,,16,,,,342,343,,345,,16',
'16,,,,,,,,,,,,295,,,,,,,,,,,,,,16,,,,,,20,,,,,16,,,,,,20,20,,,,,913',
'20,,,,,,,,,,,,,,,,,444,,,,,,,16,16,,,1002,,,,,,,,,,,,20,,,,,,,,,,,,',
',16,,,,,20,,,,,,,,,20,20,,,,,,,,,,,,,,16,,,,,,,,,,,,20,,,,,,,,,16,,20',
',,16,16,,,,,,,,,,,,295,448,,,454,295,,,,,454,,,,,,628,,,,,20,20,245',
',1001,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500',
'501,502,503,504,505,506,,,,20,507,,,,,,,,295,,,,,,,295,,,295,,,,,628',
',295,,295,20,,295,295,,,,,,,,,,,,,,,,,,20,,,,,20,20,,,,,,,,,,,,,,557',
',558,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,295,,454,454,454,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,',
',295,,295,,,,,,,,,,,,,,,,295,,,,,,,,,,726,,,,,,,,,,,295,,,295,,,,,,',
',,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,295,454,295,,,,810,,,295,295,454,454,,,',
',454,454,,,,,,,,,,,,,,,,,,,,,,,295,,,295,,,,,,,,,,,,,,,,454,,,,,295',
',,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,295,,,,,,,',
',,,,,,,,,,,,,295,,,,,,,,454,,,,,,,,,,,,,454,454,454,454,,921,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,295,454,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,295' ]
        racc_goto_table = arr = ::Array.new(3540, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,26,39,69,79,79,37,171,35,49,49,64,70,70,37,36,104,45,45,45,9,23,23',
'115,10,23,9,12,14,39,2,69,202,74,74,218,120,41,41,79,32,53,8,87,21,21',
'32,53,108,108,85,85,170,73,73,90,51,152,90,49,123,6,53,77,109,172,62',
'89,28,28,35,53,53,53,5,53,70,218,59,60,63,153,153,16,111,23,23,23,23',
'213,188,162,67,6,158,6,6,6,6,6,6,6,120,160,70,58,53,53,214,52,53,149',
'7,165,76,164,130,131,148,146,76,132,208,86,86,86,50,50,50,133,134,57',
'57,57,135,207,24,189,192,24,5,192,136,189,9,24,84,84,84,68,152,68,137',
'9,86,138,139,124,119,117,106,150,103,100,88,53,83,156,80,75,53,53,53',
'53,53,54,48,84,163,3,1,166,214,167,218,162,168,169,56,149,44,42,31,175',
'56,176,178,180,181,182,183,26,26,184,187,26,90,90,29,56,190,26,165,45',
'164,191,64,25,56,56,56,194,56,195,64,37,6,196,89,197,7,70,198,199,200',
'201,22,20,206,19,17,15,87,149,158,210,211,67,160,202,11,36,60,56,56',
'146,217,56,49,49,35,53,53,53,53,53,53,53,45,170,85,115,53,53,53,45,36',
'148,45,149,126,125,127,162,128,129,53,79,6,52,,,213,,,6,6,152,188,87',
'152,6,,152,79,152,172,,,39,60,37,56,,,,23,56,56,56,56,56,53,,35,49,',
',37,53,9,36,53,208,60,49,,84,84,,120,111,,79,,79,8,87,,,16,53,207,6',
'77,53,109,37,59,,53,208,63,59,36,,62,9,,76,153,76,30,30,86,,30,152,5',
'152,,152,57,152,86,58,53,64,53,,58,,57,,,,120,84,35,49,,53,53,53,,123',
'152,84,56,56,56,56,56,56,56,,,,,56,56,56,,,10,6,153,153,218,70,37,,85',
'56,5,39,30,30,30,30,,,,,208,9,86,35,49,49,74,90,51,,,2,6,6,51,36,6,21',
',202,202,45,53,12,12,56,73,,89,,,87,56,,6,56,70,87,,170,170,159,39,159',
',32,32,87,,60,,32,32,13,56,,,,56,,,,14,56,6,79,193,,193,,12,193,,79',
'193,53,207,,207,87,,,193,,153,45,30,30,,56,,56,60,60,,30,30,,6,12,,',
',70,56,56,56,,,,60,,,70,87,50,60,49,35,76,76,50,207,207,87,76,76,62',
',53,159,28,,,24,62,12,108,89,53,,,,147,24,24,41,,,,24,24,,,53,,,,,45',
',,,50,,207,,,76,56,86,,6,,,,,70,,,32,,,6,108,,,36,87,,,,,,,,,,120,,26',
',53,104,,53,,108,45,,26,26,86,53,,,26,26,,70,,6,56,30,,53,70,39,,,,53',
'115,171,,,79,87,,13,74,,,,9,,159,79,6,,,21,39,,76,,,6,12,12,73,53,53',
',13,53,,76,76,76,76,53,53,6,39,69,56,53,53,24,159,207,6,159,6,,56,,87',
',,87,,,,,,,62,,60,56,147,,,147,60,39,,62,,,,,6,207,6,193,207,,193,86',
',45,,,,,60,,,,,13,,,6,70,13,,39,,,,,26,,,70,56,87,,56,,,,,159,,,56,',
',76,,60,,6,39,,,53,56,,,35,49,53,56,,13,13,53,53,,,,,,53,,,207,6,,,',
'23,,,84,,,,,,53,,56,56,6,23,56,,205,205,205,,56,56,30,,,,56,56,,,,53',
',147,,147,,39,,,60,34,84,,,,,34,,154,53,,154,,60,,,79,,53,53,,34,,,',
'79,,39,,,34,34,34,,34,34,34,,,60,6,6,6,53,,53,,,,,120,,30,,120,,53,53',
'30,,,,,,,34,34,,,34,34,147,147,,,79,,,,56,,,33,,,56,,,33,,56,56,,53',
'53,,,56,,,,154,39,37,,,,,,,6,,,,56,,33,,,120,,,,53,34,,147,,147,34,34',
'34,34,34,6,,,56,,,,45,6,6,6,6,,6,157,,157,,53,70,6,,56,,,70,102,,147',
',,56,56,6,39,,87,,,53,,,,,53,53,,,,,,13,,,13,,56,,56,209,,53,,6,6,6',
'6,,,56,56,,33,,6,,,102,102,,102,33,,,,,34,34,34,34,34,34,34,,,,,34,34',
'34,,157,,,,,56,56,,,,34,,,154,,,154,,,154,,154,,,,,,,,,205,205,,205',
'205,56,205,,,,,,,,,,34,,,,,,,34,,,34,,,,,,,,56,,,33,,33,,,33,,30,34',
',,33,34,,,,34,34,56,,,30,,56,56,33,154,,154,,154,,154,34,,,,,209,,56',
'209,66,34,209,34,209,,66,157,,157,13,157,,154,,,34,34,34,,,,,102,,,',
',13,,34,,34,,66,66,66,,,,,,,,157,,157,,33,,,,33,,,,,33,,,205,205,205',
'205,,,,,,,66,,,66,,,209,,209,,209,34,209,33,,33,,13,,,,,,,,,13,,,33',
'33,,,,157,209,,,,,,,,,,,,,157,65,157,,157,13,66,65,,,205,155,155,155',
',66,34,,,,,102,,,,,,102,,157,,,102,,,65,65,65,,,102,102,,,,33,,,,,,',
',13,13,,,,,,,,,,,,,,,,34,65,,,65,,,,34,,34,,,13,,,34,,,,,,,,,34,,,,',
',,66,,,,,102,,,,,13,155,155,155,155,,155,,,,,,,65,,66,,,,,,13,65,,,',
',,,,,34,,,34,,,,,,33,,34,,,,,,,,,,,,34,,155,155,155,155,34,,,,,,,155',
',,,,,,,,,,,,66,102,102,,66,,,,66,66,34,34,,,34,,,,,,34,34,,,,66,34,34',
',65,,,,33,,66,33,66,,,,,,,,,,,,,,66,66,,65,,,34,,,,,,,66,,66,,34,,,',
',,,,,,,,,,,,,,,,,,,,33,,,,33,,,,,,33,33,,,,,33,33,,,,,,66,,,,65,34,',
',65,,,34,65,65,,,34,34,,,,,,34,,,,,,65,,,,,,,,,27,65,34,65,,,27,,,,',
',,,,,,65,65,,,,,,,34,,,,,65,,65,,27,82,82,,,,,,,,34,,,,,33,,,,34,34',
',,,,,33,33,,,,,,33,,66,27,,,,,,,66,34,,34,65,,,33,66,,,,,,34,34,,,,',
',,,,,,,,,,33,,,,,82,,82,,,82,82,38,,,,34,27,38,33,,34,34,,,34,27,,33',
'33,,,,,,66,,,66,,,,,,,,38,38,38,,,34,,,,33,,,,,82,,,,,,33,,,,,,,,,34',
',,,,34,65,38,,,,,,,65,,,,,,,,65,66,,,34,,33,33,,34,34,,,,,,27,,27,,',
'27,,,,,34,27,,,,,,,,,33,,,38,,27,,,66,82,,,38,,,,,,,66,,65,,,65,,,,',
'33,,,,,,,,,,,,,,,,,,,,,33,,,,,33,33,,,,,,,,,,,,,,27,66,,,27,,,,,27,',
',66,66,65,,,,,66,,,,,,82,,,82,38,82,38,,,38,27,,27,,,38,,,,,,,,,,,27',
'27,,38,,,65,,66,,,,,,,,82,65,,82,,,,,,,,66,,,,,,,,,66,66,,,,,,,,,82',
',,,,,,,,,,,,,,,,66,27,,,,38,65,,,38,,66,,38,38,,,65,65,,,,,,65,,,,,',
'38,,,,,,,,,,38,,38,66,,,,,66,66,,,66,82,,,38,38,,,,,82,82,65,,,,,38',
',38,,,,,,,66,,,,,65,,,,,,,,,65,65,82,,,82,,,,,66,,,,,66,27,,,,,,,,,',
'82,65,38,,,,,,,,66,,65,,,66,66,,,82,,,,,,,,,,,,,,,,,,,,,82,,,,65,,,',
',65,65,,,65,,,,,,,,,,27,,,27,,,,,,,82,,,,,,65,,,,,,,,,,,,,,,,,,,,,,',
',65,,,,,65,38,,,,,,,,38,,,,,27,,,38,27,,,65,,,27,27,65,65,,,27,27,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,38,,,,82,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,82,,,,,38,,27,27,38,,,,,27,38,38,',
',,,38,38,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,38,,27,40,,,,,,,,38,40,40,40',
',,,,,,27,,,,40,40,,40,,27,27,,,,,,,,,,,,40,,,,,,,,,,,,,,27,,,,,,38,',
',,,27,,,,,,38,38,,,,,38,38,,,,,,,,,,,,,,,,,38,,,,,,,27,27,,,27,,,,,',
',,,,,,38,,,,,,,,,,,,,,27,,,,,38,,,,,,,,,38,38,,,,,,,,,,,,,,27,,,,,,',
',,,,,38,,,,,,,,,27,,38,,,27,27,,,,,,,,,,,,40,40,,,40,40,,,,,40,,,,,',
'38,,,,,38,38,40,,38,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,40,40,40,,,,38,40,,,,,,,,40,,,,,,,40,,,40,,,,,38,,40,,40,38',
',40,40,,,,,,,,,,,,,,,,,,38,,,,,38,38,,,,,,,,,,,,,,40,,40,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40',
'40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,,',
'40,,,,,,,,,,40,,,,,,,,,,,40,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,',
',,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40',
'40,40,,,,40,,,40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,',
',,,,,,,,,,,,,40,,,,,40,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,',
',,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,40,,,,,,,,,,,,,40,40,40,40',
',40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3540, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   180,    28,   179,   nil,    69,    -2,   104,    37,    18,
  -112,   240,  -320,   461,  -532,  -487,  -645,  -609,   nil,  -295,
   -77,    33,   224,   -46,   -88,   145,   -22,  1688,  -155,   -15,
   305,    55,  -187,   963,   881,  -220,  -440,   -13,  1807,   -20,
  2500,   -32,  -420,   nil,  -573,   -15,   nil,   nil,   149,  -220,
    97,  -226,  -408,    39,  -338,   nil,   186,    99,    69,    42,
    17,   nil,    29,    42,  -326,  1344,  1225,  -533,  -227,   -72,
     1,   nil,   nil,    42,    22,  -263,  -113,    19,   nil,   -33,
   121,   nil,  1502,   103,   114,  -302,    91,    13,  -346,  -231,
  -468,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    88,   nil,   482,  -193,   -49,   nil,    94,   nil,  -312,  -696,
   nil,  -678,   nil,   nil,   nil,  -343,   nil,    87,   nil,  -471,
    31,   nil,   nil,  -572,    82,  -108,   219,   220,  -278,   221,
    43,  -666,  -256,  -657,  -842,    60,  -489,  -236,  -478,  -751,
   nil,   nil,   nil,   nil,   nil,   nil,  -761,    -5,  -474,  -771,
  -671,   nil,  -682,  -496,   152,   431,  -665,   286,  -738,  -258,
  -591,   nil,  -647,  -767,  -830,  -832,  -177,  -554,   120,  -387,
  -306,   -18,  -212,   nil,   nil,   -94,   -93,   nil,  -503,   nil,
  -312,  -821,  -418,  -530,  -653,   nil,   nil,   112,    -5,    40,
   112,   116,  -264,   113,   121,   122,   125,  -564,  -408,  -408,
   131,  -549,  -326,   nil,   nil,   278,  -505,  -223,  -621,   244,
  -494,  -733,   nil,  -656,  -877,   nil,   nil,  -137,  -491 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   310,     7,   367,   313,
   nil,   nil,   nil,   560,   nil,   nil,   nil,   nil,   309,   311,
   nil,   nil,   nil,   nil,    14,    15,    21,   243,   nil,   nil,
    17,   nil,   442,   244,   341,   nil,   nil,   781,   242,   350,
    24,   nil,   nil,   362,   nil,    25,    26,    27,   nil,   722,
   nil,   nil,   nil,   330,   nil,    28,   327,   457,    35,   nil,
   nil,    37,    40,    39,   nil,   239,   240,   626,   nil,   144,
   465,   143,   146,    90,    91,   nil,   447,   105,    47,    50,
   275,   553,   301,   nil,   458,   nil,   459,   470,   681,   522,
   299,   283,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   284,    65,   nil,    67,   nil,   nil,
    68,   886,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   608,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   288,   277,   730,   853,   617,   887,   752,   590,   nil,   753,
  1026,   922,   578,   nil,   579,   nil,   nil,   580,   nil,   582,
   nil,   831,   nil,   nil,   nil,   588,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   469,   286,   nil,   nil,   699,   nil,   509,
   nil,   nil,   nil,   nil,   nil,    89,    92,    94,   nil,   nil,
   nil,   nil,   nil,   638,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   869,   790,   577,   nil,   581,   877,   593,   595,
   596,   933,   599,   600,   934,   603,   606,   nil,   304 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  3, 153, :_reduce_10,
  3, 156, :_reduce_11,
  0, 163, :_reduce_12,
  6, 158, :_reduce_13,
  3, 158, :_reduce_14,
  2, 159, :_reduce_15,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_18,
  2, 164, :_reduce_19,
  1, 165, :_reduce_none,
  0, 166, :_reduce_21,
  3, 165, :_reduce_22,
  0, 177, :_reduce_23,
  4, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  2, 155, :_reduce_28,
  3, 155, :_reduce_29,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  4, 155, :_reduce_34,
  1, 155, :_reduce_none,
  3, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  1, 155, :_reduce_none,
  3, 170, :_reduce_40,
  3, 170, :_reduce_41,
  6, 170, :_reduce_42,
  5, 170, :_reduce_43,
  5, 170, :_reduce_44,
  5, 170, :_reduce_45,
  5, 170, :_reduce_46,
  3, 170, :_reduce_47,
  1, 178, :_reduce_48,
  3, 178, :_reduce_49,
  1, 178, :_reduce_none,
  1, 176, :_reduce_none,
  3, 176, :_reduce_52,
  3, 176, :_reduce_53,
  3, 176, :_reduce_54,
  2, 176, :_reduce_55,
  1, 176, :_reduce_none,
  1, 169, :_reduce_57,
  0, 189, :_reduce_58,
  0, 190, :_reduce_59,
  4, 187, :_reduce_60,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 192, :_reduce_none,
  4, 192, :_reduce_64,
  0, 200, :_reduce_65,
  4, 197, :_reduce_66,
  1, 199, :_reduce_67,
  2, 191, :_reduce_68,
  3, 191, :_reduce_69,
  4, 191, :_reduce_70,
  5, 191, :_reduce_71,
  4, 191, :_reduce_72,
  5, 191, :_reduce_73,
  2, 191, :_reduce_74,
  2, 191, :_reduce_75,
  2, 191, :_reduce_76,
  2, 191, :_reduce_77,
  2, 191, :_reduce_78,
  1, 171, :_reduce_none,
  3, 171, :_reduce_80,
  1, 205, :_reduce_none,
  3, 205, :_reduce_82,
  1, 204, :_reduce_83,
  2, 204, :_reduce_84,
  3, 204, :_reduce_85,
  5, 204, :_reduce_86,
  2, 204, :_reduce_87,
  4, 204, :_reduce_88,
  2, 204, :_reduce_89,
  4, 204, :_reduce_90,
  1, 204, :_reduce_91,
  3, 204, :_reduce_92,
  1, 208, :_reduce_none,
  3, 208, :_reduce_94,
  2, 207, :_reduce_95,
  3, 207, :_reduce_96,
  1, 210, :_reduce_97,
  3, 210, :_reduce_98,
  1, 209, :_reduce_99,
  1, 209, :_reduce_100,
  4, 209, :_reduce_101,
  3, 209, :_reduce_102,
  3, 209, :_reduce_103,
  3, 209, :_reduce_104,
  3, 209, :_reduce_105,
  2, 209, :_reduce_106,
  1, 209, :_reduce_107,
  1, 173, :_reduce_108,
  1, 173, :_reduce_109,
  4, 173, :_reduce_110,
  3, 173, :_reduce_111,
  3, 173, :_reduce_112,
  3, 173, :_reduce_113,
  3, 173, :_reduce_114,
  2, 173, :_reduce_115,
  1, 173, :_reduce_116,
  1, 213, :_reduce_117,
  1, 213, :_reduce_none,
  2, 214, :_reduce_119,
  1, 214, :_reduce_120,
  3, 214, :_reduce_121,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_125,
  1, 215, :_reduce_126,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 167, :_reduce_129,
  1, 167, :_reduce_none,
  1, 168, :_reduce_131,
  0, 221, :_reduce_132,
  4, 168, :_reduce_133,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  3, 186, :_reduce_206,
  3, 186, :_reduce_207,
  6, 186, :_reduce_208,
  5, 186, :_reduce_209,
  5, 186, :_reduce_210,
  5, 186, :_reduce_211,
  5, 186, :_reduce_212,
  0, 227, :_reduce_213,
  5, 186, :_reduce_214,
  3, 186, :_reduce_215,
  3, 186, :_reduce_216,
  3, 186, :_reduce_217,
  2, 186, :_reduce_218,
  2, 186, :_reduce_219,
  3, 186, :_reduce_220,
  3, 186, :_reduce_221,
  3, 186, :_reduce_222,
  3, 186, :_reduce_223,
  3, 186, :_reduce_224,
  3, 186, :_reduce_225,
  4, 186, :_reduce_226,
  2, 186, :_reduce_227,
  2, 186, :_reduce_228,
  3, 186, :_reduce_229,
  3, 186, :_reduce_230,
  3, 186, :_reduce_231,
  3, 186, :_reduce_232,
  1, 186, :_reduce_none,
  3, 186, :_reduce_234,
  3, 186, :_reduce_235,
  3, 186, :_reduce_236,
  3, 186, :_reduce_237,
  3, 186, :_reduce_238,
  2, 186, :_reduce_239,
  2, 186, :_reduce_240,
  3, 186, :_reduce_241,
  3, 186, :_reduce_242,
  3, 186, :_reduce_243,
  3, 186, :_reduce_244,
  3, 186, :_reduce_245,
  6, 186, :_reduce_246,
  1, 186, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  3, 224, :_reduce_252,
  3, 224, :_reduce_253,
  1, 228, :_reduce_254,
  1, 229, :_reduce_none,
  2, 229, :_reduce_256,
  4, 229, :_reduce_257,
  2, 229, :_reduce_258,
  1, 222, :_reduce_none,
  3, 222, :_reduce_260,
  3, 233, :_reduce_261,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 181, :_reduce_264,
  1, 181, :_reduce_265,
  2, 181, :_reduce_266,
  4, 181, :_reduce_267,
  2, 181, :_reduce_268,
  1, 203, :_reduce_269,
  2, 203, :_reduce_270,
  2, 203, :_reduce_271,
  4, 203, :_reduce_272,
  1, 203, :_reduce_273,
  0, 237, :_reduce_274,
  2, 196, :_reduce_275,
  2, 236, :_reduce_276,
  2, 235, :_reduce_277,
  1, 235, :_reduce_none,
  1, 230, :_reduce_279,
  2, 230, :_reduce_280,
  3, 230, :_reduce_281,
  4, 230, :_reduce_282,
  1, 175, :_reduce_283,
  1, 175, :_reduce_284,
  3, 174, :_reduce_285,
  4, 174, :_reduce_286,
  2, 174, :_reduce_287,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_298,
  0, 272, :_reduce_299,
  4, 225, :_reduce_300,
  2, 225, :_reduce_301,
  0, 273, :_reduce_302,
  0, 274, :_reduce_303,
  5, 225, :_reduce_304,
  3, 225, :_reduce_305,
  3, 225, :_reduce_306,
  2, 225, :_reduce_307,
  3, 225, :_reduce_308,
  0, 275, :_reduce_309,
  4, 225, :_reduce_310,
  1, 225, :_reduce_311,
  4, 225, :_reduce_312,
  3, 225, :_reduce_313,
  1, 225, :_reduce_314,
  5, 225, :_reduce_315,
  4, 225, :_reduce_316,
  3, 225, :_reduce_317,
  2, 225, :_reduce_318,
  1, 225, :_reduce_none,
  2, 225, :_reduce_320,
  2, 225, :_reduce_321,
  6, 225, :_reduce_322,
  6, 225, :_reduce_323,
  4, 225, :_reduce_324,
  4, 225, :_reduce_325,
  5, 225, :_reduce_326,
  4, 225, :_reduce_327,
  6, 225, :_reduce_328,
  0, 276, :_reduce_329,
  0, 277, :_reduce_330,
  7, 225, :_reduce_331,
  0, 278, :_reduce_332,
  0, 279, :_reduce_333,
  0, 280, :_reduce_334,
  9, 225, :_reduce_335,
  0, 281, :_reduce_336,
  0, 282, :_reduce_337,
  6, 225, :_reduce_338,
  0, 283, :_reduce_339,
  6, 225, :_reduce_340,
  0, 284, :_reduce_341,
  0, 285, :_reduce_342,
  9, 225, :_reduce_343,
  1, 225, :_reduce_344,
  1, 225, :_reduce_345,
  1, 225, :_reduce_346,
  1, 225, :_reduce_347,
  1, 180, :_reduce_348,
  1, 247, :_reduce_none,
  1, 253, :_reduce_none,
  1, 256, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 262, :_reduce_none,
  1, 264, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 161, :_reduce_none,
  1, 291, :_reduce_none,
  1, 248, :_reduce_none,
  1, 202, :_reduce_none,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 254, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 255, :_reduce_none,
  5, 255, :_reduce_374,
  1, 257, :_reduce_none,
  2, 257, :_reduce_376,
  1, 263, :_reduce_none,
  1, 263, :_reduce_378,
  1, 292, :_reduce_none,
  3, 292, :_reduce_380,
  1, 295, :_reduce_381,
  3, 295, :_reduce_382,
  1, 294, :_reduce_383,
  4, 294, :_reduce_384,
  6, 294, :_reduce_385,
  3, 294, :_reduce_386,
  5, 294, :_reduce_387,
  2, 294, :_reduce_388,
  4, 294, :_reduce_389,
  1, 294, :_reduce_390,
  3, 294, :_reduce_391,
  4, 296, :_reduce_392,
  2, 296, :_reduce_393,
  2, 296, :_reduce_394,
  1, 296, :_reduce_395,
  2, 301, :_reduce_396,
  1, 301, :_reduce_none,
  6, 302, :_reduce_398,
  8, 302, :_reduce_399,
  4, 302, :_reduce_400,
  6, 302, :_reduce_401,
  4, 302, :_reduce_402,
  2, 302, :_reduce_403,
  6, 302, :_reduce_404,
  2, 302, :_reduce_405,
  4, 302, :_reduce_406,
  6, 302, :_reduce_407,
  2, 302, :_reduce_408,
  4, 302, :_reduce_409,
  2, 302, :_reduce_410,
  4, 302, :_reduce_411,
  1, 302, :_reduce_412,
  1, 306, :_reduce_413,
  1, 306, :_reduce_414,
  3, 307, :_reduce_415,
  1, 307, :_reduce_416,
  4, 307, :_reduce_417,
  1, 308, :_reduce_none,
  4, 308, :_reduce_419,
  1, 309, :_reduce_420,
  3, 309, :_reduce_421,
  1, 310, :_reduce_422,
  1, 310, :_reduce_none,
  0, 314, :_reduce_424,
  0, 315, :_reduce_425,
  4, 252, :_reduce_426,
  4, 312, :_reduce_427,
  1, 312, :_reduce_428,
  3, 313, :_reduce_429,
  3, 313, :_reduce_430,
  3, 317, :_reduce_431,
  2, 193, :_reduce_432,
  4, 193, :_reduce_433,
  5, 193, :_reduce_434,
  5, 193, :_reduce_435,
  0, 320, :_reduce_436,
  3, 251, :_reduce_437,
  4, 251, :_reduce_438,
  4, 251, :_reduce_439,
  3, 251, :_reduce_440,
  3, 251, :_reduce_441,
  3, 251, :_reduce_442,
  2, 251, :_reduce_443,
  1, 251, :_reduce_444,
  4, 251, :_reduce_445,
  0, 321, :_reduce_446,
  4, 250, :_reduce_447,
  0, 322, :_reduce_448,
  4, 250, :_reduce_449,
  0, 323, :_reduce_450,
  0, 324, :_reduce_451,
  4, 198, :_reduce_452,
  0, 325, :_reduce_453,
  0, 326, :_reduce_454,
  4, 318, :_reduce_455,
  0, 328, :_reduce_456,
  6, 261, :_reduce_457,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  6, 160, :_reduce_460,
  0, 160, :_reduce_461,
  1, 329, :_reduce_462,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 330, :_reduce_465,
  1, 330, :_reduce_none,
  2, 162, :_reduce_467,
  1, 162, :_reduce_none,
  1, 238, :_reduce_469,
  1, 238, :_reduce_470,
  1, 238, :_reduce_none,
  1, 239, :_reduce_472,
  1, 332, :_reduce_473,
  1, 332, :_reduce_none,
  2, 332, :_reduce_475,
  3, 333, :_reduce_476,
  1, 333, :_reduce_477,
  3, 240, :_reduce_478,
  3, 241, :_reduce_479,
  3, 242, :_reduce_480,
  3, 242, :_reduce_481,
  1, 337, :_reduce_482,
  3, 337, :_reduce_483,
  1, 338, :_reduce_none,
  2, 338, :_reduce_485,
  3, 244, :_reduce_486,
  3, 244, :_reduce_487,
  1, 340, :_reduce_488,
  3, 340, :_reduce_489,
  3, 243, :_reduce_490,
  3, 243, :_reduce_491,
  3, 245, :_reduce_492,
  3, 245, :_reduce_493,
  1, 341, :_reduce_494,
  3, 341, :_reduce_495,
  1, 342, :_reduce_496,
  3, 342, :_reduce_497,
  1, 334, :_reduce_498,
  2, 334, :_reduce_499,
  1, 335, :_reduce_500,
  2, 335, :_reduce_501,
  1, 336, :_reduce_502,
  2, 336, :_reduce_503,
  1, 339, :_reduce_504,
  0, 344, :_reduce_505,
  3, 339, :_reduce_506,
  0, 345, :_reduce_507,
  4, 339, :_reduce_508,
  1, 343, :_reduce_509,
  1, 343, :_reduce_510,
  1, 343, :_reduce_511,
  1, 343, :_reduce_none,
  2, 219, :_reduce_513,
  1, 219, :_reduce_514,
  1, 346, :_reduce_none,
  1, 346, :_reduce_none,
  1, 346, :_reduce_none,
  1, 346, :_reduce_none,
  3, 220, :_reduce_519,
  1, 331, :_reduce_none,
  2, 331, :_reduce_521,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_531,
  1, 212, :_reduce_532,
  1, 212, :_reduce_533,
  1, 212, :_reduce_534,
  1, 212, :_reduce_535,
  1, 212, :_reduce_536,
  1, 212, :_reduce_537,
  1, 246, :_reduce_538,
  1, 246, :_reduce_539,
  1, 179, :_reduce_540,
  1, 179, :_reduce_541,
  1, 184, :_reduce_542,
  1, 184, :_reduce_543,
  0, 347, :_reduce_544,
  4, 265, :_reduce_545,
  1, 265, :_reduce_546,
  3, 269, :_reduce_547,
  0, 349, :_reduce_548,
  3, 269, :_reduce_549,
  4, 348, :_reduce_550,
  2, 348, :_reduce_551,
  2, 348, :_reduce_552,
  1, 348, :_reduce_none,
  2, 351, :_reduce_554,
  0, 351, :_reduce_555,
  6, 316, :_reduce_556,
  8, 316, :_reduce_557,
  4, 316, :_reduce_558,
  6, 316, :_reduce_559,
  4, 316, :_reduce_560,
  6, 316, :_reduce_561,
  2, 316, :_reduce_562,
  4, 316, :_reduce_563,
  6, 316, :_reduce_564,
  2, 316, :_reduce_565,
  4, 316, :_reduce_566,
  2, 316, :_reduce_567,
  4, 316, :_reduce_568,
  1, 316, :_reduce_569,
  0, 316, :_reduce_570,
  1, 311, :_reduce_571,
  1, 311, :_reduce_572,
  1, 311, :_reduce_573,
  1, 311, :_reduce_574,
  1, 293, :_reduce_none,
  1, 293, :_reduce_576,
  1, 353, :_reduce_none,
  1, 354, :_reduce_none,
  3, 354, :_reduce_579,
  1, 303, :_reduce_580,
  3, 303, :_reduce_581,
  1, 355, :_reduce_none,
  2, 356, :_reduce_583,
  1, 356, :_reduce_584,
  2, 357, :_reduce_585,
  1, 357, :_reduce_586,
  1, 297, :_reduce_none,
  3, 297, :_reduce_588,
  1, 350, :_reduce_none,
  3, 350, :_reduce_590,
  1, 358, :_reduce_none,
  1, 358, :_reduce_none,
  2, 298, :_reduce_593,
  1, 298, :_reduce_594,
  3, 359, :_reduce_595,
  3, 360, :_reduce_596,
  1, 304, :_reduce_597,
  3, 304, :_reduce_598,
  1, 352, :_reduce_599,
  3, 352, :_reduce_600,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 305, :_reduce_603,
  1, 305, :_reduce_604,
  1, 362, :_reduce_none,
  1, 362, :_reduce_none,
  2, 300, :_reduce_607,
  2, 299, :_reduce_608,
  0, 299, :_reduce_609,
  1, 270, :_reduce_none,
  0, 363, :_reduce_611,
  4, 270, :_reduce_612,
  1, 249, :_reduce_613,
  2, 249, :_reduce_614,
  1, 232, :_reduce_none,
  3, 232, :_reduce_616,
  3, 364, :_reduce_617,
  2, 364, :_reduce_618,
  4, 364, :_reduce_619,
  2, 364, :_reduce_620,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  1, 271, :_reduce_none,
  1, 271, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  2, 206, :_reduce_none,
  2, 182, :_reduce_none,
  0, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 266, :_reduce_646,
  1, 266, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_649,
  0, 152, :_reduce_650 ]

racc_reduce_n = 651

racc_shift_n = 1095

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@3",
  "stmts",
  "stmt_or_begin",
  "@4",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "@27",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      _, _, block = val
                      result = block
                    
    result
end

def _reduce_11(val, _values, result)
                      _, stmt, _ = val
                      result = new_iter s(:preexe), 0, stmt
                    
    result
end

def _reduce_12(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res
                    
    result
end

def _reduce_13(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]
                    
    result
end

def _reduce_14(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_22(val, _values, result)
                      _, _, stmt = val
                      result = stmt
                    
    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME
                      result = self.lexer.lineno
                    
    result
end

def _reduce_24(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_28(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_29(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_30(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val
                      result = new_rescue body, new_resbody(s(:array), resbody)
                    
    result
end

def _reduce_34(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_37(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr
                    
    result
end

def _reduce_49(val, _values, result)
                      expr, _, resbody = val
                      expr = value_expr expr
                      result = new_rescue(expr, new_resbody(s(:array), resbody))
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_53(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_55(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_59(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_60(val, _values, result)
                      _, expr, _, _ = val
                      result = expr
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_65(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_66(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend
                    
    result
end

def _reduce_67(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_69(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_70(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_71(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_72(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_73(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_74(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_78(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_86(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_88(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_89(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_90(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_91(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 93 omitted

def _reduce_94(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_97(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_109(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_110(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_111(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_113(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_114(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_115(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_116(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_120(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_121(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]
                    
    result
end

def _reduce_126(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym
                    
    result
end

# reduce 127 omitted

# reduce 128 omitted

def _reduce_129(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 130 omitted

def _reduce_131(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_132(val, _values, result)
                      lexer.lex_state = EXPR_FNAME
                    
    result
end

def _reduce_133(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

def _reduce_206(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_208(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_211(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_212(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]
                    
    result
end

def _reduce_213(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_214(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]
                    
    result
end

def _reduce_215(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn
                    
    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_218(val, _values, result)
                      v1, v2 = val[0], nil

                      result = s(:dot2, v1, v2)
                    
    result
end

def _reduce_219(val, _values, result)
                      v1, v2 = val[0], nil

                      result = s(:dot3, v1, v2)
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

# reduce 233 omitted

def _reduce_234(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_239(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_240(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_241(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_253(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_254(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      body, _, resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody
                      result  = new_rescue(body, new_resbody(s(:array), resbody))
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

# reduce 263 omitted

def _reduce_264(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_267(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_269(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_270(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_274(val, _values, result)
                      result = lexer.cmdarg.store true
                    
    result
end

def _reduce_275(val, _values, result)
                      lexer.cmdarg.restore val[0]
                      result = val[1]
                    
    result
end

def _reduce_276(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 278 omitted

def _reduce_279(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_281(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_285(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_286(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

def _reduce_298(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_299(val, _values, result)
                      result = self.lexer.lineno
                      # TODO:
                      # $<val>1 = cmdarg_stack;
                      # CMDARG_SET(0);
                    
    result
end

def _reduce_300(val, _values, result)
                      # TODO: CMDARG_SET($<val>1);
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_301(val, _values, result)
                      # TODO: lex_state = EXPR_ENDARG in between
                      debug20 13, val, result
                    
    result
end

def _reduce_302(val, _values, result)
                      result = lexer.cmdarg.store false
                      # result = self.lexer.cmdarg.stack.dup
                      # lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_303(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                    
    result
end

def _reduce_304(val, _values, result)
                      _, cmdarg, stmt, _, _, = val
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.restore cmdarg
                      result = stmt
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_306(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_307(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_308(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_309(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_311(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_314(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_315(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_317(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_318(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 319 omitted

def _reduce_320(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_321(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f
                    
    result
end

def _reduce_323(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t
                    
    result
end

def _reduce_324(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true
                    
    result
end

def _reduce_325(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true
                    
    result
end

def _reduce_326(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_327(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_328(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_331(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_332(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_333(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_334(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_337(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_338(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_339(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_340(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_341(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = EXPR_FNAME
                    
    result
end

def _reduce_342(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = EXPR_ENDFN # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_343(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_344(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_345(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_346(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_347(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_348(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

# reduce 373 omitted

def _reduce_374(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 375 omitted

def _reduce_376(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_381(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_383(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_384(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_385(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_386(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_387(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_388(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_389(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_390(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_391(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_392(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_394(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_395(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_410(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_411(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_412(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_413(val, _values, result)
 result = 0 
    result
end

def _reduce_414(val, _values, result)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_415(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

def _reduce_416(val, _values, result)
                      result = s(:args)
                    
    result
end

def _reduce_417(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_420(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_421(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_422(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [lexer.cmdarg.store(false), self.lexer.lineno]
                    
    result
end

def _reduce_426(val, _values, result)
                      lpar, args, (cmdarg, lineno), body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.lexpop

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      result.line = lineno
                      self.env.unextend
                    
    result
end

def _reduce_427(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_428(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_429(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_431(val, _values, result)
                      # TODO: maybe fix lineno to kDO's lineno?
                      result = val[1]
                    
    result
end

def _reduce_432(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_434(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_435(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_436(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_437(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_441(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_446(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_447(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_448(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_449(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?
                    
    result
end

def _reduce_453(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_454(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_455(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                    
    result
end

def _reduce_456(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 458 omitted

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_461(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 463 omitted

# reduce 464 omitted

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 466 omitted

def _reduce_467(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_473(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 474 omitted

def _reduce_475(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_477(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_478(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_480(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 484 omitted

def _reduce_485(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_486(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_490(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_494(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_495(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_496(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_498(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_499(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_501(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_503(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_505(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_506(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG
                    
    result
end

def _reduce_508(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_509(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_510(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 520 omitted

def _reduce_521(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_532(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_533(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_534(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_535(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_536(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_537(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_538(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_539(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_540(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_542(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_543(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_544(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true
                    
    result
end

def _reduce_545(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true
                    
    result
end

def _reduce_548(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL
                    
    result
end

def _reduce_549(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true
                    
    result
end

def _reduce_550(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_551(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_552(val, _values, result)
                      result = args val
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_556(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_557(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_558(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_559(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_560(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_562(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_564(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_569(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_570(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_572(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_573(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_574(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_580(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_581(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_584(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_585(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_586(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = args val
                    
    result
end

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"
                    
    result
end

def _reduce_594(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_595(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_596(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_600(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_604(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 605 omitted

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_608(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_609(val, _values, result)
                      result = nil
                    
    result
end

# reduce 610 omitted

def _reduce_611(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_612(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_613(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_614(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 615 omitted

def _reduce_616(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_617(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_618(val, _values, result)
                      (label, _), arg = val
                      result = s(:array, s(:lit, label.to_sym), arg)
                    
    result
end

def _reduce_619(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_620(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

# reduce 643 omitted

# reduce 644 omitted

# reduce 645 omitted

def _reduce_646(val, _values, result)
 yyerrok 
    result
end

# reduce 647 omitted

# reduce 648 omitted

def _reduce_649(val, _values, result)
 yyerrok 
    result
end

def _reduce_650(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby26Parser
