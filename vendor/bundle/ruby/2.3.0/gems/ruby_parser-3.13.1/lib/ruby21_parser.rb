#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-303,-109,605,605,605,-109,-93,-303,-303,-303,671,605,-303,-303,-303',
'284,-303,234,-529,-79,635,826,225,226,826,-529,-303,-303,-303,855,-110',
'-107,-113,-112,-537,937,-303,-303,-112,-303,-303,-303,-303,-303,605',
'-110,-111,235,-111,-115,-108,-633,-101,235,-114,825,759,586,825,583',
'582,581,771,584,736,-110,772,-303,-303,-303,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,637,636,-303,-303,-303,235,820,-303,-107',
'789,-303,225,226,-303,-303,284,-303,-620,-303,284,-303,286,-303,-303',
'-303,-303,-303,-303,-303,-100,-303,235,-303,-619,-109,128,128,128,958',
'-109,127,127,127,-619,128,-303,-303,-303,-303,127,-303,-623,-303,854',
'874,-98,-104,-303,-623,-623,-623,-113,-103,-110,-623,-623,-112,-623',
'-110,-101,-103,-112,-102,-106,-99,128,-623,128,-105,-111,127,284,127',
'881,-111,612,-538,-623,-623,480,-623,-623,-623,-623,-623,225,226,95',
'-101,225,226,235,286,651,630,96,286,106,107,-530,-528,631,563,654,940',
'565,-530,-528,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,231,942,-623,-623,-623,-103,678,280,635,-108,-623,640',
'-115,-623,-433,843,106,107,-623,232,-623,844,-623,-623,-623,-623,-623',
'-623,-623,-442,-623,-623,-623,-101,650,586,286,583,582,581,-103,584',
'635,-103,653,-623,-623,635,-623,255,-623,-623,944,235,108,109,-103,-623',
'-623,-623,-623,-111,590,-623,-623,-623,946,-623,-101,637,636,-101,946',
'593,-115,128,-623,-623,-623,-623,127,252,-442,235,-101,254,253,-623',
'-623,-442,-623,-623,-623,-623,-623,108,109,128,-442,225,226,952,127',
'637,636,635,601,600,637,636,648,235,791,1006,1036,-212,-442,726,-623',
'-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,232',
'-537,-623,-623,-623,-531,819,-623,594,635,-623,-538,-531,-623,-623,726',
'-623,537,-623,635,-623,817,-623,-623,-623,-623,-623,-623,-623,590,-623',
'-623,-623,726,637,636,633,635,-114,128,593,-212,-106,-98,127,-623,-623',
'-623,-623,536,-623,-523,-623,-99,818,-115,-107,-623,-523,-523,-523,-111',
'672,-523,-523,-523,-108,-523,601,600,637,636,655,601,600,-523,-110,-523',
'-523,-523,637,636,643,-105,-616,671,563,-523,-523,565,-523,-523,-523',
'-523,-523,-536,-114,235,637,636,638,235,-536,-78,-103,-534,672,594,912',
'-112,804,-536,-534,877,881,726,-617,-112,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,-523,-523,-523,804,726,-523,-523,-523,-523',
'-523,-523,-110,-623,-523,235,-523,-523,-523,-623,-523,-616,-523,970',
'-523,-523,-523,-523,-523,-523,-523,-523,-523,-112,-523,-109,-523,-109',
'-532,128,-533,-526,-279,-616,127,-532,-100,-533,-526,-523,-523,-523',
'-523,-617,-523,-623,-523,-526,1057,-109,526,-523,-623,-623,-623,-523',
'-623,255,-623,-623,-526,-623,-623,-623,231,-617,971,-526,-619,-623,-623',
'616,-623,586,-619,583,582,581,-623,584,614,-623,-623,736,-623,-623,-623',
'-623,-623,252,-623,272,273,254,253,586,-623,583,582,581,586,584,583',
'582,581,128,584,225,226,974,127,745,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,-623,271,270,-623,-623,-623,977,678,745',
'-523,128,-623,979,745,-623,127,-523,748,981,-623,235,-623,748,-623,-623',
'-623,-623,-623,-623,-623,983,-623,-623,-623,586,524,583,582,581,590',
'584,231,563,877,881,565,-623,-623,1027,-102,593,-623,-303,563,521,289',
'562,776,-623,-303,-303,-303,-111,511,255,-303,-303,586,-303,583,582',
'581,588,584,131,132,133,134,135,234,265,266,995,601,600,996,482,481',
'-303,-303,479,-303,-303,-303,-303,-303,252,430,258,1008,254,253,250',
'251,425,745,256,586,257,583,582,581,408,584,951,726,783,594,405,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,402',
'399,-303,-303,-303,586,677,583,582,581,-303,584,745,-303,1025,375,1028',
'843,-303,1034,-303,1037,-303,-303,-303,-303,-303,-303,-303,946,-303',
'946,-303,586,946,583,582,581,590,584,231,1042,1008,745,235,-303,-303',
'1027,-104,593,-303,-526,736,1051,1053,1055,776,-303,-526,-526,-526,-113',
'1057,-526,-526,-526,1057,-526,255,337,586,588,583,582,581,-526,584,-526',
'-526,-526,598,597,601,600,265,266,723,-526,-526,336,-526,-526,-526,-526',
'-526,586,275,583,582,581,252,584,258,1008,254,253,250,251,745,427,256',
'726,257,726,429,428,594,227,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,224,745,-526,-526,-526,231,-526,-526,-620',
'-619,-526,235,543,-526,-526,223,-526,222,-526,946,-526,541,-526,-526',
'-526,-526,-526,-526,-526,1008,-526,726,-526,586,723,583,582,581,590',
'584,255,729,719,526,733,-526,-526,-526,-526,593,-526,-303,-526,736,737',
'739,741,-526,-303,-303,-303,-526,743,718,-303,-303,751,-303,255,902',
'903,588,252,904,122,123,254,253,250,251,598,597,601,600,265,266,752',
'-303,-303,753,-303,-303,-303,-303,-303,999,-303,583,582,581,252,584',
'258,-303,254,253,250,251,-620,556,755,999,-303,583,582,581,594,584,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,231',
'255,-303,-303,-303,-535,677,774,235,726,-303,726,-535,-303,612,726,776',
'707,-303,-93,-303,-535,-303,-303,-303,-303,-303,-303,-303,235,-303,425',
'-303,252,235,-536,231,254,253,250,251,778,-536,1033,235,-303,-303,783',
'-303,688,-303,-536,1031,-294,792,793,794,-303,-277,1080,-294,-113,310',
'85,86,87,12,78,805,-294,231,79,80,511,255,511,83,230,81,82,84,33,34',
'76,77,1057,228,1057,255,255,88,31,30,116,115,117,118,235,822,22,275',
'255,831,833,666,11,49,312,13,120,119,121,110,60,112,111,113,524,114',
'122,123,526,106,107,718,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,-303,248,249,231,235,265,266,-303,43,289,665,36,-620,289,62',
'63,-303,289,64,663,38,252,718,258,48,254,253,250,251,271,270,256,23',
'257,3,670,-303,103,95,97,98,99,101,-303,255,669,96,104,-620,269,235',
'-251,-303,235,66,235,662,93,100,102,661,-276,108,109,310,85,86,87,12',
'78,659,652,-304,79,80,872,649,235,83,-304,81,82,84,33,34,76,77,881,-304',
'726,646,235,88,31,30,116,115,117,118,642,618,22,617,418,-278,612,666',
'11,49,312,13,120,119,121,110,60,112,111,113,235,114,122,123,1057,106',
'107,566,45,46,44,255,259,260,261,262,272,273,267,268,263,264,231,248',
'249,231,911,265,266,477,43,560,553,36,255,124,62,63,478,551,64,478,38',
'252,547,258,48,254,253,250,251,271,270,256,23,257,289,928,-304,103,95',
'97,98,99,101,-304,-294,718,96,104,235,269,292,-294,-304,-276,66,933',
'544,93,100,102,-294,,108,109,310,85,86,87,12,78,,,-345,79,80,,,,83,-345',
'81,82,84,33,34,76,77,,-345,,,,88,31,30,116,115,117,118,,,22,131,132',
'133,134,135,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,-535',
'248,249,-304,,265,266,-535,43,,-304,36,,,62,63,-535,,64,-304,38,252',
',258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,',
',96,104,,269,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,131,132,133,134,135,88,31,30,116,115',
'117,118,,,22,131,132,133,134,135,11,49,312,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273',
'267,268,263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
',269,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
'255,259,260,261,262,272,273,267,268,263,264,,248,249,,,265,266,,43,',
',314,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257',
',,,103,95,97,98,99,101,,,,96,104,235,269,,,,,66,,,93,100,102,,,108,109',
'310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,,248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269',
',,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'259,260,261,262,272,273,267,268,263,264,,248,249,,,265,266,,43,,,314',
',,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103',
'95,97,98,99,101,,,,96,104,,269,,,,,66,,,93,100,102,,,108,109,310,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268,263,264,',
'248,249,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250',
'251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,269,,,,,66',
',,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,-645,-645',
'-645,-645,272,273,,,-645,-645,,,,,,265,266,,43,,,36,,,62,63,,,64,,38',
'252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,255,259,260,261,262,272,273,267,268,263,264,,-645,-645,,,265,266',
',43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23',
'257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,255,259,260,261,262,272,273,267,268',
'263,264,,-645,-645,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,259',
'260,261,262,272,273,,,263,264,,,,,,265,266,,43,,,314,,,62,63,,,64,,38',
'252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,255,-645,-645,-645,-645,272,273,,,-645,-645,,,,,,265,266,,43,',
',36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256,23,257',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,255,-645,-645,-645,-645,272,273,,,-645,-645',
',,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271',
'270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,255,-645,-645,-645,-645',
'272,273,,,-645,-645,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258',
'48,254,253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255',
'259,260,261,262,272,273,267,,263,264,,,,,,265,266,,43,,,36,,,62,63,',
',64,,38,252,,258,48,254,253,250,251,271,270,256,23,257,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,255,-645,-645,-645,-645,272,273,,,-645,-645,,,,,,265',
'266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,271,270,256',
'23,257,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,-645,-645,-645,-645,272',
'273,,,-645,-645,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,258,48,254',
'253,250,251,271,270,256,23,257,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,255,,,,,',
',,,,,,,,,,265,266,,43,,,36,,,62,63,,,64,,38,252,,,48,254,253,250,251',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,255,,,,,,,,,,,,,,,,265,266,',
'43,,,36,,,62,63,,,64,,38,252,,258,48,254,253,250,251,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,310,85,86,87',
'12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,11,49,312,13,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,310,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326',
'332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',701,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,',
',,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,',
',,,,,,,323,,,319,,,62,63,,,64,,318,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,',
'327,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,',
',,,,,,,,,,,,,,,,,323,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,335,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,,,48,',
',,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,128,,,,,127,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,327,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,',
'333,,,,,,,,,,,,,,,,,,,,369,,,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,333,,,,,,,,,,,,,,,,,,,,985,,,246,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,418,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,',
',246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,',
',,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,',
'22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,701',
',,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,435,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,435,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,',
',,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,',
',,103,95,97,98,99,101,,,,96,104,235,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,992',
',,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,',
'120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,',
',103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,235,,,,,,66,,304',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76',
'77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,985,',
',246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,',
'11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299',
',48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323',
',,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,539,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,',
'327,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,333,,',
',,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,556,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,',
'45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121',
'619,60,112,111,620,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,621',
',,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120',
'119,121,619,60,112,111,620,,114,122,123,,106,107,,,,333,,,,,,,,,,,,',
',,,,,,,621,,,246,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,',
',120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,',
',,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,435,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116',
'115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,',
',,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60',
'112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240',
',,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62',
'63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330',
'76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,327,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,333,,,,,,,,,,,,,,,,,,,,323',
',,319,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,',
',,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,',
',,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48',
',,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88',
'326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111',
'113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246',
',,62,63,,,64,,,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120',
'119,121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,240,,,246,,,62,63,,,64,,701,,299,,48,,,,,,,,245,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63',
',,64,,301,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,240,,,246,,,62,63,,,64,,,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,,,,',
'49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,797,,,,48,,,,,,,,245,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,',
',,,88,326,332,116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112',
'111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,',
'246,,,62,63,,,64,,701,,299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,',
',96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,',
'83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117,118,,,247,,,',
',,,49,,,120,119,121,110,60,112,111,113,303,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,,,299,,48,,,,,,,,245',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332',
'116,115,117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64',
',,,,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,312,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,418,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,247,,,,,,,49,,,120,119',
'121,110,60,112,111,113,303,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,240,,,246,,,62,63,,,64,,301,,299,,48,,,,,,,,245,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,304,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,329,330,76,77,,,,,,88,326,332,116,115,117',
'118,,,247,,,,,,,327,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,333,,,,,,,,,,,,,,,,,,,,323,,,319,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,247,,,,,,,49,,,120,119,121,110,60,112,111,113,303,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,240,,,246,,,62,63,,,64,,301',
',299,,48,,,,,,,,245,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,304',
'93,100,102,-624,,108,109,,,,-624,-624,-624,,,-624,-624,-624,586,-624',
'583,582,581,590,584,,,,-624,-624,-624,-624,,,593,,,,,-624,-624,,-624',
'-624,-624,-624,-624,,,,,,,,,,588,,,,,,,,,,,601,600,,-624,-624,-624,-624',
'-624,-624,-624,-624,-624,-624,-624,-624,-624,-624,,,-624,-624,-624,',
',-624,,,-624,,,-624,-624,,-624,594,-624,,-624,,-624,-624,-624,-624,-624',
'-624,-624,,-624,-624,-624,586,,583,582,581,590,584,,,,,,-624,-624,-624',
'-624,593,-624,-644,-624,,,,,-624,-644,-644,-644,,,-644,-644,-644,,-644',
',,,588,,,,,-644,-644,,,,,601,600,,,,-644,-644,,-644,-644,-644,-644,-644',
',,,,,,,,,,,,,,,,,,,,,594,,,,,,,,,,,,,-644,,-441,,,,,-644,,-441,-441',
'-441,289,-644,-441,-441,-441,586,-441,583,582,581,590,584,,,,-441,-441',
'-441,,,,593,-644,-644,,,-441,-441,,-441,-441,-441,-441,-441,,,-644,',
',,,-644,,588,,,,,-644,,,,,,601,600,,-441,-441,-441,-441,-441,-441,-441',
'-441,-441,-441,-441,-441,-441,-441,,,-441,-441,-441,,,-441,,289,-441',
',,-441,-441,,-441,594,-441,,-441,,-441,-441,-441,-441,-441,-441,-441',
',-441,-441,-441,,,,,,,,,,,,,-441,-441,-311,-441,,-441,,,,-311,-311,-311',
'-441,,-311,-311,-311,586,-311,583,582,581,590,584,,,,,-311,-311,,,,593',
',,,,-311,-311,,-311,-311,-311,-311,-311,,,,,,,,,,588,,,,,,,,,,,601,600',
',-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311',
',,-311,-311,-311,,,-311,,292,-311,,,-311,-311,,-311,594,-311,,-311,',
'-311,-311,-311,-311,-311,-311,-311,,-311,,-311,,,,,,,,,,,,,-311,-311',
'-295,-311,,-311,,,,-295,-295,-295,-311,,-295,-295,-295,586,-295,583',
'582,581,590,584,,,,,-295,-295,-295,,,593,,,,,-295,-295,,-295,-295,-295',
'-295,-295,,,,,,,,,,588,,,,,,,,,598,597,601,600,,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295,',
',-295,,,-295,,,-295,-295,,-295,594,-295,,-295,,-295,-295,-295,-295,-295',
'-295,-295,,-295,,-295,586,,583,582,581,590,584,,,,,,-295,-295,-295,-295',
'593,-295,-644,-295,,,,,-295,-644,-644,-644,,,-644,-644,-644,,-644,,',
',588,,,,,-644,-644,-644,,598,597,601,600,,,,-644,-644,,-644,-644,-644',
'-644,-644,,,,,,,,,,,,,,,,,,,,,,594,,-644,-644,-644,-644,-644,-644,-644',
'-644,-644,-644,-644,-644,-644,-644,,,-644,-644,-644,,,-644,,289,-644',
',,-644,-644,,-644,,-644,,-644,,-644,-644,-644,-644,-644,-644,-644,,-644',
'-644,-644,,,,,,,,,,,,,-644,-644,-625,-644,,-644,,,,-625,-625,-625,-644',
',-625,-625,-625,586,-625,583,582,581,590,584,,,,-625,-625,-625,-625',
',,593,,,,,-625,-625,,-625,-625,-625,-625,-625,,,,,,,,,,588,,,,,,,,,',
',601,600,,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,,,-625,-625,-625,,,-625,,,-625,,,-625,-625,,-625,594,-625',
',-625,,-625,-625,-625,-625,-625,-625,-625,,-625,-625,-625,,,,,,,,,,',
',,-625,-625,-625,-625,,-625,,-625,,,,,-625,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,',
',154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,384,383,385,382,185,204,203,',
',,,,184,191,182,183,379,380,381,377,141,112,111,378,,114,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,391,',
',,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,',
',,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141',
',,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,,,,,,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206',
'196,195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199',
'192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183',
'179,180,181,139,141,138,,140,,,,,,,,,173,174,,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178',
'189,200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219',
'198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185,204,203',
',,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,103,,,,,,,,,',
'104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140',
',,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,415,414,140,,416,,,,,,,173,174,,169,151,152,153,160',
'157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,714,469,,,715,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,682,462,,,683,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,766,462,,,767',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,684,469,,,685,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',684,469,,,685,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,1066,469,,,1067,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,711,462,,,712,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,509,462,,,510',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,458,462,,,459,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',465,469,,,464,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,888,469,,,889,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,682,462,,,683,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,768,469,,,769',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1061,469,,,1060,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',1064,462,,,1065,,,,,,170,,,173,174,178,169,151,152,153,160,157,159',
',,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,802,469,,,801,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,289,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,799,462,,,800,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,289,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,586,177,583,582,581,590,584',
',,,,509,462,,,510,593,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,588,,,175,176,161,162,,,598,597,601,600,,,,,,,,166,165',
',150,172,168,167,163,164,158,156,148,171,149,,586,177,583,582,581,590',
'584,,,,594,,,,,,593,,,,,170,,,,586,178,583,582,581,590,584,,,,,,,588',
',586,593,583,582,581,590,584,598,597,601,600,,,,,586,593,583,582,581',
'590,584,,588,586,,583,582,581,590,584,593,598,597,601,600,,,588,,593',
',586,594,583,582,581,590,584,601,600,,,588,,,,,593,,,,588,,601,600,',
',594,,,598,597,601,600,,,,,,588,,,594,,,,,,598,597,601,600,,,,,586,594',
'583,582,581,590,584,,,586,594,583,582,581,590,584,593,586,,583,582,581',
'590,584,,593,,,594,,,,,593,,,,,588,,,,,,,,,588,,601,600,,,,,588,598',
'597,601,600,,,,,,,601,600,,586,,583,582,581,590,584,,,,,,,,594,235,593',
',,,,,,594,,,,,,,,594,,,,,,,588,572,,,,,,,,598,597,601,600,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,594' ]
        racc_action_table = arr = ::Array.new(26062, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'685,1078,885,359,358,886,706,685,685,685,458,932,685,685,685,328,685',
'22,384,706,644,832,786,786,689,384,685,685,685,731,1064,366,769,1065',
'238,856,685,685,767,685,685,685,685,685,955,766,1066,857,768,370,367',
'62,458,22,617,832,607,748,689,748,748,748,621,748,858,458,621,685,685',
'685,685,685,685,685,685,685,685,685,685,685,685,644,644,685,685,685',
'62,685,685,238,644,685,721,721,685,685,65,685,769,685,691,685,328,685',
'685,685,685,685,685,685,886,685,786,685,768,1078,885,359,358,885,1078',
'885,359,358,1066,932,685,685,685,685,932,685,802,685,731,748,366,769',
'685,802,802,802,685,767,1064,802,802,1065,802,1064,766,712,1065,768',
'370,367,607,802,955,617,1066,607,29,955,1011,1066,1011,239,802,802,241',
'802,802,802,802,802,474,474,92,711,17,17,721,65,406,387,92,691,44,44',
'385,383,387,569,409,862,569,385,383,802,802,802,802,802,802,802,802',
'802,802,802,802,802,802,27,863,802,802,802,712,802,27,397,239,802,397',
'241,802,29,722,333,333,802,442,802,722,802,802,802,802,802,802,802,837',
'802,802,802,711,406,951,29,951,951,951,712,951,647,712,409,802,802,403',
'802,486,802,684,865,474,44,44,712,802,684,684,684,802,971,684,684,684',
'866,684,711,397,397,711,868,971,442,963,684,684,684,684,963,486,837',
'871,711,486,486,684,684,837,684,684,684,684,684,333,333,307,837,357',
'357,873,307,647,647,393,971,971,403,403,403,997,647,951,997,479,837',
'876,684,684,684,684,684,684,684,684,684,684,684,684,684,684,20,41,684',
'684,684,382,684,684,971,411,684,42,382,684,684,882,684,317,684,400,684',
'682,684,684,684,684,684,684,684,733,684,684,684,887,393,393,393,395',
'479,898,733,337,20,41,898,684,684,684,684,316,684,110,684,42,683,20',
'41,684,110,110,110,684,459,110,110,110,42,110,736,736,411,411,411,733',
'733,110,682,110,110,110,400,400,400,337,619,799,728,110,110,728,110',
'110,110,110,110,321,337,891,395,395,395,315,321,313,459,381,800,733',
'821,683,908,321,381,1044,1044,895,620,459,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,667,896,110,110,110,619,110,110,799,888',
'110,897,619,110,110,714,110,619,110,906,110,619,110,110,110,110,110',
'110,110,800,110,821,110,908,380,5,379,620,907,619,5,380,667,379,620',
'110,110,110,110,620,110,465,110,620,1085,667,300,110,465,465,465,110',
'888,485,465,465,378,465,714,888,368,620,914,378,888,714,465,368,888',
'1006,714,1006,1006,1006,714,1006,368,465,465,915,465,465,465,465,465',
'485,888,47,47,485,485,588,714,588,588,588,745,588,745,745,745,894,745',
'780,780,917,894,1006,465,465,465,465,465,465,465,465,465,465,465,465',
'465,465,47,47,465,465,465,918,465,588,377,363,465,919,745,465,363,377',
'588,921,465,922,465,745,465,465,465,465,465,465,465,923,465,465,465',
'1037,297,1037,1037,1037,1037,1037,984,351,754,754,351,465,465,984,465',
'1037,465,464,350,296,285,350,984,465,464,464,464,465,281,554,464,464',
'872,464,872,872,872,1037,872,559,559,559,559,559,247,554,554,935,1037',
'1037,936,243,242,464,464,240,464,464,464,464,464,554,220,554,953,554',
'554,554,554,136,872,554,1042,554,1042,1042,1042,102,1042,872,962,969',
'1037,101,464,464,464,464,464,464,464,464,464,464,464,464,464,464,100',
'99,464,464,464,874,464,874,874,874,464,874,1042,464,982,73,985,987,464',
'992,464,1001,464,464,464,464,464,464,464,1002,464,1003,464,784,1004',
'784,784,784,784,784,1026,1005,1007,874,49,464,464,1026,464,784,464,113',
'1016,1019,1020,1021,1026,464,113,113,113,464,1022,113,113,113,1024,113',
'505,43,952,784,952,952,952,113,952,113,113,113,784,784,784,784,505,505',
'1030,113,113,40,113,113,113,113,113,1008,25,1008,1008,1008,505,1008',
'505,1043,505,505,505,505,952,138,505,1048,505,1049,138,138,784,18,113',
'113,113,113,113,113,113,113,113,113,113,113,113,113,16,1008,113,113',
'113,322,113,113,1060,1061,113,1063,322,113,113,15,113,13,113,1069,113',
'322,113,113,113,113,113,113,113,1070,113,558,113,783,557,783,783,783',
'783,783,501,567,550,570,574,113,113,113,113,783,113,801,113,575,577',
'578,579,113,801,801,801,113,587,548,801,801,595,801,491,787,787,783',
'501,787,787,787,501,501,501,501,783,783,783,783,491,491,599,801,801',
'602,801,801,801,801,801,1036,715,1036,1036,1036,491,1036,491,715,491',
'491,491,491,715,545,604,937,715,937,937,937,783,937,801,801,801,801',
'801,801,801,801,801,801,801,801,801,801,623,500,801,801,801,989,801',
'623,540,608,801,609,989,801,610,611,623,538,801,535,801,989,801,801',
'801,801,801,801,801,534,801,533,801,500,518,990,991,500,500,500,500',
'625,990,991,517,801,801,628,801,506,801,990,991,993,651,654,656,801',
'660,1074,993,801,788,788,788,788,788,788,668,993,19,788,788,673,490',
'679,788,19,788,788,788,788,788,788,788,1075,19,1076,489,488,788,788',
'788,788,788,788,788,686,687,788,690,487,693,695,446,788,788,788,788',
'788,788,788,788,788,788,788,788,698,788,788,788,700,788,788,708,788',
'788,788,446,446,446,446,446,446,446,446,446,446,446,1067,446,446,441',
'710,446,446,1067,788,713,441,788,1067,466,788,788,1067,716,788,441,788',
'446,717,446,788,446,446,446,446,446,446,446,788,446,1,457,889,788,788',
'788,788,788,788,889,720,456,788,788,889,446,453,446,889,727,788,732',
'439,788,788,788,436,434,788,788,362,362,362,362,362,362,431,408,1034',
'362,362,747,405,749,362,1034,362,362,362,362,362,362,362,756,1034,762',
'402,765,362,362,362,362,362,362,362,399,371,362,369,365,796,364,452',
'362,362,362,362,362,362,362,362,362,362,362,362,798,362,362,362,1077',
'362,362,352,362,362,362,452,452,452,452,452,452,452,452,452,452,452',
'237,452,452,339,806,452,452,237,362,348,339,362,341,3,362,362,237,338',
'362,339,362,452,334,452,362,452,452,452,452,452,452,452,362,452,332',
'830,772,362,362,362,362,362,362,772,324,836,362,362,327,452,326,324',
'772,847,362,848,323,362,362,362,324,,362,362,361,361,361,361,361,361',
',,50,361,361,,,,361,50,361,361,361,361,361,361,361,,50,,,,361,361,361',
'361,361,361,361,,,361,311,311,311,311,311,361,361,361,361,361,361,361',
'361,361,361,361,361,,361,361,361,,361,361,,361,361,361,294,294,294,294',
'294,294,294,294,294,294,294,320,294,294,544,,294,294,320,361,,544,361',
',,361,361,320,,361,544,361,294,,294,361,294,294,294,294,294,294,294',
'361,294,,,,361,361,361,361,361,361,,,,361,361,,294,,,,,361,,,361,361',
'361,,,361,361,881,881,881,881,881,881,,,,881,881,,,,881,,881,881,881',
'881,881,881,881,9,9,9,9,9,881,881,881,881,881,881,881,,,881,532,532',
'532,532,532,881,881,881,881,881,881,881,881,881,881,881,881,,881,881',
'881,,881,881,,881,881,881,803,803,803,803,803,803,803,803,803,803,803',
',803,803,,,803,803,,881,,,881,,,881,881,,,881,,881,803,,803,881,803',
'803,803,803,803,803,803,881,803,,,,881,881,881,881,881,881,,,,881,881',
',803,,,,,881,,,881,881,881,,,881,881,319,319,319,319,319,319,,,,319',
'319,,,,319,,319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319',
'319,,,319,,,,,,319,319,319,319,319,319,319,319,319,319,319,319,,319',
'319,319,,319,319,,319,319,319,504,504,504,504,504,504,504,504,504,504',
'504,,504,504,,,504,504,,319,,,319,,,319,319,,,319,,319,504,,504,319',
'504,504,504,504,504,504,504,319,504,,,,319,319,319,319,319,319,,,,319',
'319,504,504,,,,,319,,,319,319,319,,,319,319,892,892,892,892,892,892',
',,,892,892,,,,892,,892,892,892,892,892,892,892,,,,,,892,892,892,892',
'892,892,892,,,892,,,,,,892,892,892,892,892,892,892,892,892,892,892,892',
',892,892,892,,892,892,,892,892,892,24,24,24,24,24,24,24,24,24,24,24',
',24,24,,,24,24,,892,,,892,,,892,892,,,892,,892,24,,24,892,24,24,24,24',
'24,24,24,892,24,,,,892,892,892,892,892,892,,,,892,892,,24,,,,,892,,',
'892,892,892,,,892,892,314,314,314,314,314,314,,,,314,314,,,,314,,314',
'314,314,314,314,314,314,,,,,,314,314,314,314,314,314,314,,,314,,,,,',
'314,314,314,314,314,314,314,314,314,314,314,314,,314,314,314,,314,314',
',314,314,314,555,555,555,555,555,555,555,555,555,555,555,,555,555,,',
'555,555,,314,,,314,,,314,314,,,314,,314,555,,555,314,555,555,555,555',
'555,555,555,314,555,,,,314,314,314,314,314,314,,,,314,314,,555,,,,,314',
',,314,314,314,,,314,314,929,929,929,929,929,929,,,,929,929,,,,929,,929',
'929,929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,',
'929,929,929,929,929,929,929,929,929,929,929,929,,929,929,929,,929,929',
',929,929,929,913,913,913,913,913,913,913,913,913,913,913,,913,913,,',
'913,913,,929,,,929,,,929,929,,,929,,929,913,,913,929,913,913,913,913',
'913,913,913,929,913,,,,929,929,929,929,929,929,,,,929,929,,913,,,,,929',
',,929,929,929,,,929,929,959,959,959,959,959,959,,,,959,959,,,,959,,959',
'959,959,959,959,959,959,,,,,,959,959,959,959,959,959,959,,,959,,,,,',
'959,959,959,959,959,959,959,959,959,959,959,959,,959,959,959,,959,959',
',959,959,959,496,496,496,496,496,496,496,,,496,496,,,,,,496,496,,959',
',,959,,,959,959,,,959,,959,496,,496,959,496,496,496,496,496,496,496',
'959,496,,,,959,959,959,959,959,959,,,,959,959,,,,,,,959,,,959,959,959',
',,959,959,930,930,930,930,930,930,,,,930,930,,,,930,,930,930,930,930',
'930,930,930,,,,,,930,930,930,930,930,930,930,,,930,,,,,,930,930,930',
'930,930,930,930,930,930,930,930,930,,930,930,930,,930,930,,930,930,930',
'483,483,483,483,483,483,483,483,483,483,483,,483,483,,,483,483,,930',
',,930,,,930,930,,,930,,930,483,,483,930,483,483,483,483,483,483,483',
'930,483,,,,930,930,930,930,930,930,,,,930,930,,,,,,,930,,,930,930,930',
',,930,930,603,603,603,603,603,603,,,,603,603,,,,603,,603,603,603,603',
'603,603,603,,,,,,603,603,603,603,603,603,603,,,603,,,,,,603,603,603',
'603,603,603,603,603,603,603,603,603,,603,603,603,,603,603,,603,603,603',
'484,484,484,484,484,484,484,484,484,484,484,,484,484,,,484,484,,603',
',,603,,,603,603,,,603,,603,484,,484,603,484,484,484,484,484,484,484',
'603,484,,,,603,603,603,603,603,603,,,,603,603,,,,,,,603,,,603,603,603',
',,603,603,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,',
',,36,36,36,36,36,36,36,,,36,,,,,,36,36,36,36,36,36,36,36,36,36,36,36',
',36,36,36,,36,36,,36,36,36,502,502,502,502,502,502,502,,,502,502,,,',
',,502,502,,36,,,36,,,36,36,,,36,,36,502,,502,36,502,502,502,502,502',
'502,502,36,502,,,,36,36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36,,,36',
'36,425,425,425,425,425,425,,,,425,425,,,,425,,425,425,425,425,425,425',
'425,,,,,,425,425,425,425,425,425,425,,,425,,,,,,425,425,425,425,425',
'425,425,425,425,425,425,425,,425,425,425,,425,425,,425,425,425,494,494',
'494,494,494,494,494,,,494,494,,,,,,494,494,,425,,,425,,,425,425,,,425',
',425,494,,494,425,494,494,494,494,494,494,494,425,494,,,,425,425,425',
'425,425,425,,,,425,425,,,,,,,425,,,425,425,425,,,425,425,246,246,246',
'246,246,246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246',
'246,246,246,246,246,246,,,246,,,,,,246,246,246,246,246,246,246,246,246',
'246,246,246,,246,246,246,,246,246,,246,246,246,495,495,495,495,495,495',
'495,,,495,495,,,,,,495,495,,246,,,246,,,246,246,,,246,,246,495,,495',
'246,495,495,495,495,495,495,495,246,495,,,,246,246,246,246,246,246,',
',,246,246,,,,,,,246,,,246,246,246,,,246,246,222,222,222,222,222,222',
',,,222,222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222',
'222,222,222,,,222,,,,,,222,222,222,222,222,222,222,222,222,222,222,222',
',222,222,222,,222,222,,222,222,222,499,499,499,499,499,499,499,,,499',
'499,,,,,,499,499,,222,,,222,,,222,222,,,222,,222,499,,499,222,499,499',
'499,499,499,499,499,222,499,,,,222,222,222,222,222,222,,,,222,222,,',
',,,,222,,,222,222,222,,,222,222,345,345,345,345,345,345,,,,345,345,',
',,345,,345,345,345,345,345,345,345,,,,,,345,345,345,345,345,345,345',
',,345,,,,,,345,345,345,345,345,345,345,345,345,345,345,345,,345,345',
'345,,345,345,,345,345,345,503,503,503,503,503,503,503,503,,503,503,',
',,,,503,503,,345,,,345,,,345,345,,,345,,345,503,,503,345,503,503,503',
'503,503,503,503,345,503,,,,345,345,345,345,345,345,,,,345,345,,,,,,',
'345,,,345,345,345,,,345,345,827,827,827,827,827,827,,,,827,827,,,,827',
',827,827,827,827,827,827,827,,,,,,827,827,827,827,827,827,827,,,827',
',,,,,827,827,827,827,827,827,827,827,827,827,827,827,,827,827,827,,827',
'827,,827,827,827,498,498,498,498,498,498,498,,,498,498,,,,,,498,498',
',827,,,827,,,827,827,,,827,,827,498,,498,827,498,498,498,498,498,498',
'498,827,498,,,,827,827,827,827,827,827,,,,827,827,,,,,,,827,,,827,827',
'827,,,827,827,845,845,845,845,845,845,,,,845,845,,,,845,,845,845,845',
'845,845,845,845,,,,,,845,845,845,845,845,845,845,,,845,,,,,,845,845',
'845,845,845,845,845,845,845,845,845,845,,845,845,845,,845,845,,845,845',
'845,497,497,497,497,497,497,497,,,497,497,,,,,,497,497,,845,,,845,,',
'845,845,,,845,,845,497,,497,845,497,497,497,497,497,497,497,845,497',
',,,845,845,845,845,845,845,,,,845,845,,,,,,,845,,,845,845,845,,,845',
'845,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,',
',,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,493,,,,,,,,,,,,,,,,493',
'493,,2,,,2,,,2,2,,,2,,2,493,,,2,493,493,493,493,,,,2,,,,,2,2,2,2,2,2',
',,,2,2,,,,,,,2,,,2,2,2,,,2,2,770,770,770,770,770,770,,,,770,770,,,,770',
',770,770,770,770,770,770,770,,,,,,770,770,770,770,770,770,770,,,770',
',,,,,770,770,770,770,770,770,770,770,770,770,770,770,,770,770,770,,770',
'770,,770,770,770,492,,,,,,,,,,,,,,,,492,492,,770,,,770,,,770,770,,,770',
',770,492,,492,770,492,492,492,492,,,,770,,,,,770,770,770,770,770,770',
',,,770,770,,,,,,,770,,,770,770,770,,,770,770,606,606,606,606,606,606',
',,,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606,606,606,606',
'606,606,606,,,606,,,,,,606,606,606,606,606,606,606,606,606,606,606,606',
',606,606,606,,606,606,,606,606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606',
'606,,,606,,606,,,,606,,,,,,,,606,,,,,606,606,606,606,606,606,,,,606',
'606,,,,,,,606,,,606,606,606,,,606,606,1015,1015,1015,1015,1015,1015',
',,,1015,1015,,,,1015,,1015,1015,1015,1015,1015,1015,1015,,,,,,1015,1015',
'1015,1015,1015,1015,1015,,,1015,,,,,,1015,1015,1015,1015,1015,1015,1015',
'1015,1015,1015,1015,1015,,1015,1015,1015,,1015,1015,,1015,1015,1015',
',,,,,,,,,,,,,,,,,,,1015,,,1015,,,1015,1015,,,1015,,1015,,,,1015,,,,',
',,,1015,,,,,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,,,,1015,,',
'1015,1015,1015,,,1015,1015,1014,1014,1014,1014,1014,1014,,,,1014,1014',
',,,1014,,1014,1014,1014,1014,1014,1014,1014,,,,,,1014,1014,1014,1014',
'1014,1014,1014,,,1014,,,,,,1014,1014,1014,1014,1014,1014,1014,1014,1014',
'1014,1014,1014,,1014,1014,1014,,1014,1014,,1014,1014,1014,,,,,,,,,,',
',,,,,,,,,1014,,,1014,,,1014,1014,,,1014,,1014,,,,1014,,,,,,,,1014,,',
',,1014,1014,1014,1014,1014,1014,,,,1014,1014,,,,,,,1014,,,1014,1014',
'1014,,,1014,1014,1009,1009,1009,1009,1009,1009,,,,1009,1009,,,,1009',
',1009,1009,1009,1009,1009,1009,1009,,,,,,1009,1009,1009,1009,1009,1009',
'1009,,,1009,,,,,,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009',
'1009,,1009,1009,1009,,1009,1009,,1009,1009,1009,,,,,,,,,,,,,,,,,,,,1009',
',,1009,,,1009,1009,,,1009,,1009,,,,1009,,,,,,,,1009,,,,,1009,1009,1009',
'1009,1009,1009,,,,1009,1009,,,,,,,1009,,,1009,1009,1009,,,1009,1009',
'854,854,854,854,854,854,,,,854,854,,,,854,,854,854,854,854,854,854,854',
',,,,,854,854,854,854,854,854,854,,,854,,,,,,854,854,854,854,854,854',
'854,854,854,854,854,854,,854,854,854,,854,854,,854,854,854,,,,,,,,,',
',,,,,,,,,,854,,,854,,,854,854,,,854,,854,,,,854,,,,,,,,854,,,,,854,854',
'854,854,854,854,,,,854,854,,,,,,,854,,,854,854,854,,,854,854,988,988',
'988,988,988,988,,,,988,988,,,,988,,988,988,988,988,988,988,988,,,,,',
'988,988,988,988,988,988,988,,,988,,,,,,988,988,988,988,988,988,988,988',
'988,988,988,988,,988,988,988,,988,988,,988,988,988,,,,,,,,,,,,,,,,,',
',,988,,,988,,,988,988,,,988,,988,,,,988,,,,,,,,988,,,,,988,988,988,988',
'988,988,,,,988,988,,,,,,,988,,,988,988,988,,,988,988,781,781,781,781',
'781,781,,,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781',
'781,781,781,781,781,,,781,,,,,,781,781,781,781,781,781,781,781,781,781',
'781,781,,781,781,781,,781,781,,781,781,781,,,,,,,,,,,,,,,,,,,,781,,',
'781,,,781,781,,,781,,781,,,,781,,,,,,,,781,,,,,781,781,781,781,781,781',
',,,781,781,,,,,,,781,,,781,781,781,,,781,781,855,855,855,855,855,855',
',,,855,855,,,,855,,855,855,855,855,855,855,855,,,,,,855,855,855,855',
'855,855,855,,,855,,,,,,855,855,855,855,855,855,855,855,855,855,855,855',
',855,855,855,,855,855,,855,855,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855',
'855,,,855,,855,,,,855,,,,,,,,855,,,,,855,855,855,855,855,855,,,,855',
'855,,,,,,,855,,,855,855,855,,,855,855,782,782,782,782,782,782,,,,782',
'782,,,,782,,782,782,782,782,782,782,782,,,,,,782,782,782,782,782,782',
'782,,,782,,,,,,782,782,782,782,782,782,782,782,782,782,782,782,,782',
'782,782,,782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782',
',,782,,782,,,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782',
',,,,,,782,,,782,782,782,,,782,782,678,678,678,,678,,,,678,678,,,,678',
',678,678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,,,678',
',,,,,,678,,,678,678,678,678,678,678,678,678,,678,678,678,,678,678,,678',
'678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,,,,,678,,,,,,',
',678,,,,,678,678,678,678,678,678,,,,678,678,,,,,,,678,,,678,678,678',
',,678,678,547,547,547,,547,,,,547,547,,,,547,,547,547,547,547,547,547',
'547,,,,,,547,547,547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547',
'547,547,547,547,,547,547,547,,547,547,,,,547,,,,,,,,,,,,,,,,,,,,547',
',,547,,,547,547,,,547,,,,,,,,,,,,,,,,,,,547,547,547,547,547,547,,,,547',
'547,,,,,,,547,,,547,547,547,,,547,547,591,591,591,,591,,,,591,591,,',
',591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591,591,',
',591,,,,,,,591,,,591,591,591,591,591,591,591,591,,591,591,591,,591,591',
',591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,,591,,,,,,591,',
',,,,,,591,,,,,591,591,591,591,591,591,,,,591,591,,,,,,,591,,,591,591',
'591,,,591,591,551,551,551,,551,,,,551,551,,,,551,,551,551,551,551,551',
'551,551,,,,,,551,551,551,551,551,551,551,,,551,,,,,,,551,,,551,551,551',
'551,551,551,551,551,,551,551,551,,551,551,,551,551,551,,,,,,,,,,,,,',
',,,,,,551,,,551,,,551,551,,,551,,,,,,551,,,,,,,,551,,,,,551,551,551',
'551,551,551,,,,551,551,,,,,,,551,,,551,551,551,,,551,551,565,565,565',
',565,,,,565,565,,,,565,,565,565,565,565,565,565,565,,,,,,565,565,565',
'565,565,565,565,,,565,,,,,,,565,,,565,565,565,565,565,565,565,565,565',
'565,565,565,,565,565,,565,565,565,,,,,,,,,,,,,,,,,,,,565,,,565,,,565',
'565,,,565,,,,,,565,,,,,,,,565,,,,,565,565,565,565,565,565,,,,565,565',
',,,,,,565,,565,565,565,565,,,565,565,556,556,556,,556,,,,556,556,,,',
'556,,556,556,556,556,556,556,556,,,,,,556,556,556,556,556,556,556,,',
'556,,,,,,,556,,,556,556,556,556,556,556,556,556,,556,556,556,,556,556',
',556,556,556,,,,,,,,,,,,,,,,,,,,556,,,556,,,556,556,,,556,,,,,,556,',
',,,,,,556,,,,,556,556,556,556,556,556,,,,556,556,,,,,,,556,,,556,556',
'556,,,556,556,562,562,562,,562,,,,562,562,,,,562,,562,562,562,562,562',
'562,562,,,,,,562,562,562,562,562,562,562,,,562,,,,,,,562,,,562,562,562',
'562,562,562,562,562,562,562,562,562,,562,562,,562,562,562,,,,,,,,,,',
',,,,,,,,,562,,,562,,,562,562,,,562,,562,,,,562,,,,,,,,562,,,,,562,562',
'562,562,562,562,,,,562,562,,,,,,,562,,562,562,562,562,,,562,562,23,23',
'23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23',
',,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,',
',,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23',
'23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,,32,32',
',,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32',
',,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,',
',,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32',
'32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33',
',33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33',
'33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33',
',,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33',
'33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34',
'34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34',
'34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34',
',,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,',
',,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37',
'37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37',
'37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37',
',37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,',
',37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38',
'38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38',
'38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38',
'38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,1031,1031,1031',
',1031,,,,1031,1031,,,,1031,,1031,1031,1031,1031,1031,1031,1031,,,,,',
'1031,1031,1031,1031,1031,1031,1031,,,1031,,,,,,,1031,,,1031,1031,1031',
'1031,1031,1031,1031,1031,1031,1031,1031,1031,,1031,1031,,1031,1031,1031',
',,,,,,,,,,,,,,,,,,,1031,,,1031,,,1031,1031,,,1031,,1031,,1031,,1031',
',,,,,,,1031,,,,,1031,1031,1031,1031,1031,1031,,,,1031,1031,,,,,,,1031',
',1031,1031,1031,1031,,,1031,1031,45,45,45,,45,,,,45,45,,,,45,,45,45',
'45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45',
'45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,',
'45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45',
',,45,45,45,,,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46',
',,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46',
'46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,',
'46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46',
'46,48,48,48,,48,,,,48,48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48',
'48,48,48,,,48,,,,,,,48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48',
'48,48,,,,,,,,,,,,,,,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,',
'48,48,48,48,48,48,,,,48,48,,,,,,,48,,,48,48,48,,,48,48,63,63,63,,63',
',,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63',
',,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,',
',,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,63,,,,,,,,63,,,,,63,63,63',
'63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,67,67,67,,67,,,,67,67',
',,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67',
',,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,',
',,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,',
'67,67,,,,,,,67,,,67,67,67,,,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68',
'68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68',
'68,68,68,68,,68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,',
'68,68,,,68,,,,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68',
',,68,68,68,,,68,68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71',
',,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71',
'71,71,,71,71,,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,',
'71,,,,,,,,71,,,,,71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71',
',,71,71,72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72',
'72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72',
'72,,,,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,',
',72,72,72,72,72,72,,,,72,72,,,,,,,72,,,72,72,72,,,72,72,983,983,983',
',983,,,,983,983,,,,983,,983,983,983,983,983,983,983,,,,,,983,983,983',
'983,983,983,983,,,983,,,,,,,983,,,983,983,983,983,983,983,983,983,,983',
'983,983,,983,983,,,,983,,,,,,,,,,,,,,,,,,,,983,,,983,,,983,983,,,983',
',,,,,,,,,,,,,,,,,,983,983,983,983,983,983,,,,983,983,,,,,,,983,,,983',
'983,983,,,983,983,126,126,126,126,126,,,,126,126,,,,126,,126,126,126',
'126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,,126,126',
'126,126,126,126,126,126,126,126,126,126,,126,126,126,,126,126,,126,126',
'126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,,,,,',
'126,,,,,126,126,126,126,126,126,,,,126,126,,,,,,126,126,,,126,126,126',
',,126,126,131,131,131,,131,,,,131,131,,,,131,,131,131,131,131,131,131',
'131,,,,,,131,131,131,131,131,131,131,,,131,,,,,,,131,,,131,131,131,131',
'131,131,131,131,,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,',
',,131,,,131,,,131,131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131',
'131,131,,,,131,131,,,,,,,131,,,131,131,131,,,131,131,132,132,132,,132',
',,,132,132,,,,132,,132,132,132,132,132,132,132,,,,,,132,132,132,132',
'132,132,132,,,132,,,,,,,132,,,132,132,132,132,132,132,132,132,,132,132',
'132,,132,132,,132,132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132',
',,,,,132,,,,,,,,132,,,,,132,132,132,132,132,132,,,,132,132,,,,,,,132',
',,132,132,132,,,132,132,133,133,133,,133,,,,133,133,,,,133,,133,133',
'133,133,133,133,133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,,133',
',,133,133,133,133,133,133,133,133,,133,133,133,,133,133,,133,133,133',
',,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,',
',133,133,133,133,133,133,,,,133,133,,,,,,,133,,,133,133,133,,,133,133',
'134,134,134,,134,,,,134,134,,,,134,,134,134,134,134,134,134,134,,,,',
',134,134,134,134,134,134,134,,,134,,,,,,,134,,,134,134,134,134,134,134',
'134,134,,134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,',
'134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134',
',,,134,134,,,,,,,134,,,134,134,134,,,134,134,135,135,135,135,135,,,',
'135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135,135,135,135,135',
'135,135,,,135,,,,,,135,135,,135,135,135,135,135,135,135,135,135,,135',
'135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135',
',,135,,135,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135',
',,,,,,135,,,135,135,135,,,135,135,958,958,958,,958,,,,958,958,,,,958',
',958,958,958,958,958,958,958,,,,,,958,958,958,958,958,958,958,,,958',
',,,,,,958,,,958,958,958,958,958,958,958,958,,958,958,958,,958,958,,958',
'958,958,,,,,,,,,,,,,,,,,,,,958,,,958,,,958,958,,,958,,958,,,,958,,,',
',,,,958,,,,,958,958,958,958,958,958,,,,958,958,,,,,,,958,,,958,958,958',
',,958,958,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223,223',
'223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223',
'223,223,223,223,,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,',
',,223,,,223,,,223,223,,,223,,223,,,,223,,,,,,,,223,,,,,223,223,223,223',
'223,223,,,,223,223,,,,,,,223,,,223,223,223,,,223,223,224,224,224,,224',
',,,224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224',
'224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224',
'224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224',
',224,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,',
'224,,,224,224,224,,,224,224,225,225,225,,225,,,,225,225,,,,225,,225',
'225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,',
',225,,,225,225,225,225,225,225,225,225,,225,225,225,,225,225,,225,225',
'225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225',
',,,,225,225,225,225,225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225',
'225,226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226',
'226,226,226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226',
',,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226',
',,,226,226,,,,,,,226,,,226,226,226,,,226,226,227,227,227,,227,,,,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,',
',,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,',
',227,227,227,,,227,227,228,228,228,,228,,,,228,228,,,,228,,228,228,228',
'228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228',
'228,228,228,228,228,228,228,228,228,228,228,,228,228,,228,228,228,,',
',,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,228,,228,,228,,,,,,,,228',
',,,,228,228,228,228,228,228,,,,228,228,,,,,,,228,,228,228,228,228,,',
'228,228,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232',
'232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232',
'232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,',
',,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232',
'232,232,,,,232,232,,,,,,,232,,,232,232,232,,,232,232,233,233,233,,233',
',,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233',
'233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233',
'233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233',
',,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233',
',,233,233,233,,,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234',
'234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234',
',,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234',
',,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,',
',234,234,234,234,234,234,,,,234,234,234,,,,,,234,,,234,234,234,,,234',
'234,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,',
',8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8',
',,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,',
'8,8,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,,,245,245,933,933,933,,933,,,,933',
'933,,,,933,,933,933,933,933,933,933,933,,,,,,933,933,933,933,933,933',
'933,,,933,,,,,,,933,,,933,933,933,933,933,933,933,933,,933,933,933,',
'933,933,,,,933,,,,,,,,,,,,,,,,,,,,933,,,933,,,933,933,,,933,,,,,,,,',
',,,,,,,,,,933,933,933,933,933,933,,,,933,933,,,,,,,933,,,933,933,933',
',,933,933,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248',
'248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248',
'248,248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,',
',,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248',
'248,248,,,,248,248,,,,,,,248,,,248,248,248,,,248,248,249,249,249,,249',
',,,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249',
'249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249',
'249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249',
',,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249',
',,249,249,249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250',
'250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250',
',,250,250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250',
',,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,',
',250,250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250',
'251,251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,',
',251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251',
'251,251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,',
'251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251',
',,,251,251,,,,,,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252',
'252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252',
'252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,',
'252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,',
',,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,',
',252,252,252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253',
'253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253',
'253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,',
',,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253',
'253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,254',
'254,254,,254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254',
'254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254',
'254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254',
',,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254',
'254,,,,,,,254,,,254,254,254,,,254,254,255,255,255,,255,,,,255,255,,',
',255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,',
',255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255',
',255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,',
',,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255',
'255,,,255,255,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,',
',,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256,256,257,257,257',
',257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257',
'257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257',
'257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257',
',,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,',
',,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258',
'258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,',
',258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258',
'258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258',
',,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258',
'258,259,259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259',
',,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259',
'259,259,259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259',
',,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259',
',,,259,259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260',
'260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260',
'260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,',
'260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,',
',,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,',
',260,260,260,,,260,260,261,261,261,,261,,,,261,261,,,,261,,261,261,261',
'261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261',
'261,261,261,261,261,261,261,,261,261,261,,261,261,,261,261,261,,,,,',
',,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261',
'261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261,261,,,261,261,262',
'262,262,,262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262',
'262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262',
'262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262',
',,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262',
'262,,,,,,,262,,,262,262,262,,,262,262,263,263,263,,263,,,,263,263,,',
',263,,263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,',
',263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263',
',263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,',
',,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,,,,,263,,,263,263',
'263,,,263,263,264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264',
'264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264',
'264,264,264,264,264,,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,',
',,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264,,,,,264,264,264',
'264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,,264,264,265,265,265',
',265,,,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265',
'265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265',
'265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265',
',,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265,,,',
',,,265,,,265,265,265,,,265,265,266,266,266,,266,,,,266,266,,,,266,,266',
'266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,',
',266,,,266,266,266,266,266,266,266,266,,266,266,266,,266,266,,266,266',
'266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266',
',,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,,,266,266,266,,,266',
'266,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267',
',,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267',
'267,267,267,,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267',
',,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267',
',,,267,267,,,,,,,267,,,267,267,267,,,267,267,268,268,268,,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268,,268,268,268,',
'268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,',
',,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,,,,,268,',
',268,268,268,,,268,268,269,269,269,,269,,,,269,269,,,,269,,269,269,269',
'269,269,269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269',
'269,269,269,269,269,269,269,,269,269,269,,269,269,,269,269,269,,,,,',
',,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,269,,,,,269',
'269,269,269,269,269,,,,269,269,,,,,,,269,,,269,269,269,,,269,269,274',
'274,274,,274,,,,274,274,,,,274,,274,274,274,274,274,274,274,,,,,,274',
'274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274,274,274,274,274',
'274,,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274',
',,274,274,,,274,,,,,,274,,,,,,,,274,,,,,274,274,274,274,274,274,,,,274',
'274,,,,,,,274,,,274,274,274,,,274,274,282,282,282,,282,,,,282,282,,',
',282,,282,282,282,282,282,282,282,,,,,,282,282,282,282,282,282,282,',
',282,,,,,,,282,,,282,282,282,282,282,282,282,282,282,282,282,282,,282',
'282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,282,',
'282,,282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282,282,,,,,,,282',
',282,282,282,282,,,282,282,289,289,289,,289,,,,289,289,,,,289,,289,289',
'289,289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289',
',,289,289,289,289,289,289,289,289,289,289,289,289,,289,289,,289,289',
'289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,289,,289,,289,,,,',
',,,289,,,,,289,289,289,289,289,289,,,,289,289,,,,,,,289,,289,289,289',
'289,,,289,289,292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292',
'292,292,,,,,,292,292,292,292,292,292,292,,,292,,,,,,,292,,,292,292,292',
'292,292,292,292,292,292,292,292,292,,292,292,,292,292,292,,,,,,,,,,',
',,,,,,,,,292,,,292,,,292,292,,,292,,292,,292,,292,,,,,,,,292,,,,,292',
'292,292,292,292,292,,,,292,292,292,,,,,,292,,292,292,292,292,,,292,292',
'924,924,924,,924,,,,924,924,,,,924,,924,924,924,924,924,924,924,,,,',
',924,924,924,924,924,924,924,,,924,,,,,,,924,,,924,924,924,924,924,924',
'924,924,,924,924,924,,924,924,,,,924,,,,,,,,,,,,,,,,,,,,924,,,924,,',
'924,924,,,924,,,,,,,,,,,,,,,,,,,924,924,924,924,924,924,,,,924,924,',
',,,,,924,,,924,924,924,,,924,924,299,299,299,,299,,,,299,299,,,,299',
',299,299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299',
',,,,,,299,,,299,299,299,299,299,299,299,299,,299,299,299,,299,299,,299',
'299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,,,,,,',
',299,,,,,299,299,299,299,299,299,,,,299,299,,,,,,,299,,,299,299,299',
',,299,299,301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301',
'301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,,301,,,301,301,301,301',
'301,301,301,301,,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,',
',,301,,,301,,,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301',
'301,301,,,,301,301,,,,,,,301,,,301,301,301,,,301,301,303,303,303,,303',
',,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303',
'303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303,303,303,,303,303',
'303,,303,303,,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303',
',,,,,303,,,,,,,,303,,,,,303,303,303,303,303,303,,,,303,303,,,,,,,303',
',,303,303,303,,,303,303,304,304,304,,304,,,,304,304,,,,304,,304,304',
'304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,,,304',
',,304,304,304,304,304,304,304,304,,304,304,304,,304,304,,304,304,304',
',,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,,,,304,,,,,,,,304,,,',
',304,304,304,304,304,304,,,,304,304,,,,,,,304,,,304,304,304,,,304,304',
'912,912,912,,912,,,,912,912,,,,912,,912,912,912,912,912,912,912,,,,',
',912,912,912,912,912,912,912,,,912,,,,,,,912,,,912,912,912,912,912,912',
'912,912,,912,912,912,,912,912,,912,912,912,,,,,,,,,,,,,,,,,,,,912,,',
'912,,,912,912,,,912,,,,,,912,,,,,,,,912,,,,,912,912,912,912,912,912',
',,,912,912,,,,,,,912,,,912,912,912,,,912,912,310,310,310,310,310,,,',
'310,310,,,,310,,310,310,310,310,310,310,310,,,,,,310,310,310,310,310',
'310,310,,,310,,,,,,310,310,,310,310,310,310,310,310,310,310,310,,310',
'310,310,,310,310,,310,310,310,,,,,,,,,,,,,,,,,,,,310,,,310,,,310,310',
',,310,,310,,,,310,,,,,,,,310,,,,,310,310,310,310,310,310,,,,310,310',
',,,,,,310,,,310,310,310,,,310,310,911,911,911,,911,,,,911,911,,,,911',
',911,911,911,911,911,911,911,,,,,,911,911,911,911,911,911,911,,,911',
',,,,,,911,,,911,911,911,911,911,911,911,911,911,911,911,911,,911,911',
',911,911,911,,,,,,,,,,,,,,,,,,,,911,,,911,,,911,911,,,911,,,,911,,911',
',,,,,,,911,,,,,911,911,911,911,911,911,,,,911,911,,,,,,,911,,911,911',
'911,911,,,911,911,893,893,893,,893,,,,893,893,,,,893,,893,893,893,893',
'893,893,893,,,,,,893,893,893,893,893,893,893,,,893,,,,,,,893,,,893,893',
'893,893,893,893,893,893,,893,893,893,,893,893,,893,893,893,,,,,,,,,',
',,,,,,,,,,893,,,893,,,893,893,,,893,,,,,,893,,,,,,,,893,,,,,893,893',
'893,893,893,893,,,,893,893,,,,,,,893,,,893,893,893,,,893,893,318,318',
'318,,318,,,,318,318,,,,318,,318,318,318,318,318,318,318,,,,,,318,318',
'318,318,318,318,318,,,318,,,,,,,318,,,318,318,318,318,318,318,318,318',
',318,318,318,,318,318,,,,318,,,,,,,,,,,,,,,,,,,,318,,,318,,,318,318',
',,318,,,,,,,,,,,,,,,,,,,318,318,318,318,318,318,,,,318,318,,,,318,,',
'318,,,318,318,318,,,318,318,879,879,879,,879,,,,879,879,,,,879,,879',
'879,879,879,879,879,879,,,,,,879,879,879,879,879,879,879,,,879,,,,,',
',879,,,879,879,879,879,879,879,879,879,,879,879,879,,879,879,,879,879',
'879,,,,,,,,,,,,,,,,,,,,879,,,879,,,879,879,,,879,,,,,,879,,,,,,,,879',
',,,,879,879,879,879,879,879,,,,879,879,,,,,,,879,,,879,879,879,,,879',
'879,335,335,335,,335,,,,335,335,,,,335,,335,335,335,335,335,335,335',
',,,,,335,335,335,335,335,335,335,,,335,,,,,,,335,,,335,335,335,335,335',
'335,335,335,,335,335,335,,335,335,,,,335,,,,,,,,,,,,,,,,,,,,335,,,335',
',,335,335,,,335,,,,,,,,,,,,,,,,,,,335,335,335,335,335,335,,,,335,335',
',,,,,,335,,,335,335,335,,,335,335,822,822,822,,822,,,,822,822,,,,822',
',822,822,822,822,822,822,822,,,,,,822,822,822,822,822,822,822,,,822',
',,,,,,822,,,822,822,822,822,822,822,822,822,,822,822,822,,822,822,,822',
'822,822,,,,,,,,,,,,,,,,,,,,822,,,822,,,822,822,,,822,,,,,,822,,,,,,',
',822,,,,,822,822,822,822,822,822,,,,822,822,,,,,,,822,,,822,822,822',
',,822,822,820,820,820,,820,,,,820,820,,,,820,,820,820,820,820,820,820',
'820,,,,,,820,820,820,820,820,820,820,,,820,,,,,,,820,,,820,820,820,820',
'820,820,820,820,,820,820,820,,820,820,,820,820,820,,,,,,,,,,,,,,,,,',
',,820,,,820,,,820,820,,,820,,,,,,820,,,,,,,,820,,,,,820,820,820,820',
'820,820,,,,820,820,,,,,,,820,,,820,820,820,,,820,820,819,819,819,,819',
',,,819,819,,,,819,,819,819,819,819,819,819,819,,,,,,819,819,819,819',
'819,819,819,,,819,,,,,,,819,,,819,819,819,819,819,819,819,819,,819,819',
'819,,819,819,,819,819,819,,,,,,,,,,,,,,,,,,,,819,,,819,,,819,819,,,819',
',,,,,819,,,,,,,,819,,,,,819,819,819,819,819,819,,,,819,819,,,,,,,819',
',,819,819,819,,,819,819,342,342,342,,342,,,,342,342,,,,342,,342,342',
'342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342',
',,342,342,342,342,342,342,342,342,,342,342,342,,342,342,,342,342,342',
',,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,342,,,,,,,,342,,,',
',342,342,342,342,342,342,,,,342,342,,,,,,,342,,,342,342,342,,,342,342',
'344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344,344,344,,,,',
',344,344,344,344,344,344,344,,,344,,,,,,,344,,,344,344,344,344,344,344',
'344,344,,344,344,344,,344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,',
'344,344,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344,344,344,344,344,344',
',,,344,344,,,,,,,344,,,344,344,344,,,344,344,347,347,347,347,347,,,',
'347,347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347',
'347,347,,,347,,,,,,347,347,,347,347,347,347,347,347,347,347,347,,347',
'347,347,,347,347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347',
',,347,,347,,,,347,,,,,,,,347,,,,,347,347,347,347,347,347,,,,347,347',
',,,,,,347,,,347,347,347,,,347,347,818,818,818,,818,,,,818,818,,,,818',
',818,818,818,818,818,818,818,,,,,,818,818,818,818,818,818,818,,,818',
',,,,,,818,,,818,818,818,818,818,818,818,818,,818,818,818,,818,818,,818',
'818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,818,,,818,,,,,,818,,,,,,',
',818,,,,,818,818,818,818,818,818,,,,818,818,,,,,,,818,,,818,818,818',
',,818,818,817,817,817,,817,,,,817,817,,,,817,,817,817,817,817,817,817',
'817,,,,,,817,817,817,817,817,817,817,,,817,,,,,,,817,,,817,817,817,817',
'817,817,817,817,,817,817,817,,817,817,,817,817,817,,,,,,,,,,,,,,,,,',
',,817,,,817,,,817,817,,,817,,,,,,817,,,,,,,,817,,,,,817,817,817,817',
'817,817,,,,817,817,,,,,,,817,,,817,817,817,,,817,817,804,804,804,,804',
',,,804,804,,,,804,,804,804,804,804,804,804,804,,,,,,804,804,804,804',
'804,804,804,,,804,,,,,,,804,,,804,804,804,804,804,804,804,804,,804,804',
'804,,804,804,,804,804,804,,,,,,,,,,,,,,,,,,,,804,,,804,,,804,804,,,804',
',,,,,804,,,,,,,,804,,,,,804,804,804,804,804,804,,,,804,804,,,,,,,804',
',,804,804,804,,,804,804,353,353,353,,353,,,,353,353,,,,353,,353,353',
'353,353,353,353,353,,,,,,353,353,353,353,353,353,353,,,353,,,,,,,353',
',,353,353,353,353,353,353,353,353,353,353,353,353,,353,353,,353,353',
'353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353,353,,,353,,,,,,353,,,,,,,,353',
',,,,353,353,353,353,353,353,,,,353,353,,,,,,,353,,353,353,353,353,,',
'353,353,360,360,360,,360,,,,360,360,,,,360,,360,360,360,360,360,360',
'360,,,,,,360,360,360,360,360,360,360,,,360,,,,,,,360,,,360,360,360,360',
'360,360,360,360,,360,360,360,,360,360,,360,360,360,,,,,,,,,,,,,,,,,',
',,360,,,360,,,360,360,,,360,,,,,,360,,,,,,,,360,,,,,360,360,360,360',
'360,360,,,,360,360,,,,,,,360,,,360,360,360,,,360,360,797,797,797,,797',
',,,797,797,,,,797,,797,797,797,797,797,797,797,,,,,,797,797,797,797',
'797,797,797,,,797,,,,,,,797,,,797,797,797,797,797,797,797,797,,797,797',
'797,,797,797,,797,797,797,,,,,,,,,,,,,,,,,,,,797,,,797,,,797,797,,,797',
',,,,,797,,,,,,,,797,,,,,797,797,797,797,797,797,,,,797,797,,,,,,,797',
',,797,797,797,,,797,797,374,374,374,,374,,,,374,374,,,,374,,374,374',
'374,374,374,374,374,,,,,,374,374,374,374,374,374,374,,,374,,,,,,,374',
',,374,374,374,374,374,374,374,374,,374,374,374,,374,374,,,,374,,,,,',
',,,,,,,,,,,,,,374,,,374,,,374,374,,,374,,,,,,,,,,,,,,,,,,,374,374,374',
'374,374,374,,,,374,374,,,,,,,374,,,374,374,374,,,374,374,376,376,376',
',376,,,,376,376,,,,376,,376,376,376,376,376,376,376,,,,,,376,376,376',
'376,376,376,376,,,376,,,,,,,376,,,376,376,376,376,376,376,376,376,,376',
'376,376,,376,376,,,,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376,376,,,376',
',,,,,,,,,,,,,,,,,,376,376,376,376,376,376,,,,376,376,,,,,,,376,,,376',
'376,376,,,376,376,776,776,776,,776,,,,776,776,,,,776,,776,776,776,776',
'776,776,776,,,,,,776,776,776,776,776,776,776,,,776,,,,,,,776,,,776,776',
'776,776,776,776,776,776,776,776,776,776,,776,776,,776,776,776,,,,,,',
',,,,,,,,,,,,,776,,,776,,,776,776,,,776,,776,,776,,776,,,,,,,,776,,,',
',776,776,776,776,776,776,,,,776,776,,,,,,,776,,776,776,776,776,,,776',
'776,764,764,764,,764,,,,764,764,,,,764,,764,764,764,764,764,764,764',
',,,,,764,764,764,764,764,764,764,,,764,,,,,,,764,,,764,764,764,764,764',
'764,764,764,,764,764,764,,764,764,,764,764,764,,,,,,,,,,,,,,,,,,,,764',
',,764,,,764,764,,,764,,764,,,,764,,,,,,,,764,,,,,764,764,764,764,764',
'764,,,,764,764,,,,,,,764,,,764,764,764,,,764,764,743,743,743,,743,,',
',743,743,,,,743,,743,743,743,743,743,743,743,,,,,,743,743,743,743,743',
'743,743,,,743,,,,,,,743,,,743,743,743,743,743,743,743,743,,743,743,743',
',743,743,,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,',
',,,,743,,,,,,,,743,,,,,743,743,743,743,743,743,,,,743,743,,,,,,,743',
',,743,743,743,,,743,743,435,435,435,,435,,,,435,435,,,,435,,435,435',
'435,435,435,435,435,,,,,,435,435,435,435,435,435,435,,,435,,,,,,,435',
',,435,435,435,435,435,435,435,435,,435,435,435,,435,435,,435,435,435',
',,,,,,,,,,,,,,,,,,,435,,,435,,,435,435,,,435,,,,,,435,,,,,,,,435,,,',
',435,435,435,435,435,435,,,,435,435,,,,,,,435,,,435,435,435,,,435,435',
'724,724,724,,724,,,,724,724,,,,724,,724,724,724,724,724,724,724,,,,',
',724,724,724,724,724,724,724,,,724,,,,,,,724,,,724,724,724,724,724,724',
'724,724,,724,724,724,,724,724,,724,724,724,,,,,,,,,,,,,,,,,,,,724,,',
'724,,,724,724,,,724,,724,,,,724,,,,,,,,724,,,,,724,724,724,724,724,724',
',,,724,724,,,,,,,724,,,724,724,724,,,724,724,719,719,719,,719,,,,719',
'719,,,,719,,719,719,719,719,719,719,719,,,,,,719,719,719,719,719,719',
'719,,,719,,,,,,,719,,,719,719,719,719,719,719,719,719,,719,719,719,',
'719,719,,719,719,719,,,,,,,,,,,,,,,,,,,,719,,,719,,,719,719,,,719,,',
',,,719,,,,,,,,719,,,,,719,719,719,719,719,719,,,,719,719,,,,,,,719,',
',719,719,719,,,719,719,718,718,718,,718,,,,718,718,,,,718,,718,718,718',
'718,718,718,718,,,,,,718,718,718,718,718,718,718,,,718,,,,,,,718,,,718',
'718,718,718,718,718,718,718,,718,718,718,,718,718,,,,718,,,,,,,,,,,',
',,,,,,,,718,,,718,,,718,718,,,718,,,,,,,,,,,,,,,,,,,718,718,718,718',
'718,718,,,,718,718,,,,,,,718,,,718,718,718,,,718,718,478,478,478,,478',
',,,478,478,,,,478,,478,478,478,478,478,478,478,,,,,,478,478,478,478',
'478,478,478,,,478,,,,,,,478,,,478,478,478,478,478,478,478,478,478,478',
'478,478,,478,478,,478,478,478,,,,,,,,,,,,,,,,,,,,478,,,478,,,478,478',
',,478,,478,,478,,478,,,,,,,,478,,,,,478,478,478,478,478,478,,,,478,478',
',,,,,,478,,478,478,478,478,,,478,478,480,480,480,,480,,,,480,480,,,',
'480,,480,480,480,480,480,480,480,,,,,,480,480,480,480,480,480,480,,',
'480,,,,,,,480,,,480,480,480,480,480,480,480,480,,480,480,480,,480,480',
',480,480,480,,,,,,,,,,,,,,,,,,,,480,,,480,,,480,480,,,480,,,,,,480,',
',,,,,,480,,,,,480,480,480,480,480,480,,,,480,480,,,,,,,480,,,480,480',
'480,,,480,480,481,481,481,,481,,,,481,481,,,,481,,481,481,481,481,481',
'481,481,,,,,,481,481,481,481,481,481,481,,,481,,,,,,,481,,,481,481,481',
'481,481,481,481,481,,481,481,481,,481,481,,481,481,481,,,,,,,,,,,,,',
',,,,,,481,,,481,,,481,481,,,481,,,,,,481,,,,,,,,481,,,,,481,481,481',
'481,481,481,,,,481,481,,,,,,,481,,,481,481,481,,,481,481,482,482,482',
',482,,,,482,482,,,,482,,482,482,482,482,482,482,482,,,,,,482,482,482',
'482,482,482,482,,,482,,,,,,,482,,,482,482,482,482,482,482,482,482,,482',
'482,482,,482,482,,482,482,482,,,,,,,,,,,,,,,,,,,,482,,,482,,,482,482',
',,482,,,,,,482,,,,,,,,482,,,,,482,482,482,482,482,482,,,,482,482,,,',
',,,482,,,482,482,482,,,482,482,707,707,707,,707,,,,707,707,,,,707,,707',
'707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,',
',707,,,707,707,707,707,707,707,707,707,,707,707,707,,707,707,,,,707',
',,,,,,,,,,,,,,,,,,,707,,,707,,,707,707,,,707,,,,,,,,,,,,,,,,,,,707,707',
'707,707,707,707,,,,707,707,,,,,,,707,,,707,707,707,,,707,707,701,701',
'701,,701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701',
'701,701,701,701,701,,,701,,,,,,,701,,,701,701,701,701,701,701,701,701',
',701,701,701,,701,701,,701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701',
'701,,,701,,,,,,701,,,,,,,,701,,,,,701,701,701,701,701,701,,,,701,701',
',,,,,,701,,,701,701,701,,,701,701,677,677,677,,677,,,,677,677,,,,677',
',677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677',
',,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677,,677,677,,677',
'677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,677,,,,,,',
',677,,,,,677,677,677,677,677,677,,,,677,677,,,,,,,677,,,677,677,677',
',,677,677,672,672,672,,672,,,,672,672,,,,672,,672,672,672,672,672,672',
'672,,,,,,672,672,672,672,672,672,672,,,672,,,,,,,672,,,672,672,672,672',
'672,672,672,672,,672,672,672,,672,672,,672,672,672,,,,,,,,,,,,,,,,,',
',,672,,,672,,,672,672,,,672,,,,,,672,,,,,,,,672,,,,,672,672,672,672',
'672,672,,,,672,672,,,,,,,672,,,672,672,672,,,672,672,671,671,671,,671',
',,,671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671',
'671,671,671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671',
'671,,671,671,,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671',
',,,,,671,,,,,,,,671,,,,,671,671,671,671,671,671,,,,671,671,,,,,,,671',
',,671,671,671,,,671,671,670,670,670,,670,,,,670,670,,,,670,,670,670',
'670,670,670,670,670,,,,,,670,670,670,670,670,670,670,,,670,,,,,,,670',
',,670,670,670,670,670,670,670,670,670,670,670,670,,670,670,,670,670',
'670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,,,,670,,670,,,,,,,',
'670,,,,,670,670,670,670,670,670,,,,670,670,,,,,,,670,,670,670,670,670',
',,670,670,669,669,669,,669,,,,669,669,,,,669,,669,669,669,669,669,669',
'669,,,,,,669,669,669,669,669,669,669,,,669,,,,,,,669,,,669,669,669,669',
'669,669,669,669,669,669,669,669,,669,669,,669,669,669,,,,,,,,,,,,,,',
',,,,,669,,,669,,,669,669,,,669,,669,,669,,669,,,,,,,,669,,,,,669,669',
'669,669,669,669,,,,669,669,,,,,,,669,,669,669,669,669,,,669,669,666',
'666,666,,666,,,,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666',
'666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666',
'666,,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666',
',,666,666,,,666,,,,,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'666,,,,,,,666,,,666,666,666,,,666,666,663,663,663,,663,,,,663,663,,',
',663,,663,663,663,663,663,663,663,,,,,,663,663,663,663,663,663,663,',
',663,,,,,,,663,,,663,663,663,663,663,663,663,663,663,663,663,663,,663',
'663,,663,663,663,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663,,663,',
'663,,663,,,,,,,,663,,,,,663,663,663,663,663,663,,,,663,663,,,,,,,663',
',663,663,663,663,,,663,663,662,662,662,,662,,,,662,662,,,,662,,662,662',
'662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,,,662',
',,662,662,662,662,662,662,662,662,,662,662,662,,662,662,,662,662,662',
',,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,662,,,',
',662,662,662,662,662,662,,,,662,662,,,,,,,662,,,662,662,662,,,662,662',
'661,661,661,,661,,,,661,661,,,,661,,661,661,661,661,661,661,661,,,,',
',661,661,661,661,661,661,661,,,661,,,,,,,661,,,661,661,661,661,661,661',
'661,661,,661,661,661,,661,661,,661,661,661,,,,,,,,,,,,,,,,,,,,661,,',
'661,,,661,661,,,661,,661,,,,661,,,,,,,,661,,,,,661,661,661,661,661,661',
',,,661,661,,,,,,,661,,,661,661,661,,,661,661,632,632,632,,632,,,,632',
'632,,,,632,,632,632,632,632,632,632,632,,,,,,632,632,632,632,632,632',
'632,,,632,,,,,,,632,,,632,632,632,632,632,632,632,632,,632,632,632,',
'632,632,,632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,',
',,,632,,,,,,,,632,,,,,632,632,632,632,632,632,,,,632,632,,,,,,,632,',
',632,632,632,,,632,632,626,626,626,,626,,,,626,626,,,,626,,626,626,626',
'626,626,626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,,,626,,,626',
'626,626,626,626,626,626,626,,626,626,626,,626,626,,626,626,626,,,,,',
',,,,,,,,,,,,,,626,,,626,,,626,626,,,626,,,,,,626,,,,,,,,626,,,,,626',
'626,626,626,626,626,,,,626,626,,,,,,,626,,,626,626,626,,,626,626,521',
'521,521,,521,,,,521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521',
'521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521',
'521,521,521,521,521,,521,521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521',
',,521,521,,,521,,521,,521,,521,,,,,,,,521,,,,,521,521,521,521,521,521',
',,,521,521,,,,,,,521,,521,521,521,521,,,521,521,524,524,524,,524,,,',
'524,524,,,,524,,524,524,524,524,524,524,524,,,,,,524,524,524,524,524',
'524,524,,,524,,,,,,,524,,,524,524,524,524,524,524,524,524,524,524,524',
'524,,524,524,,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524',
',,,524,,524,,,,,,,,524,,,,,524,524,524,524,524,524,,,,524,524,,,,,,',
'524,,524,524,524,524,,,524,524,526,526,526,,526,,,,526,526,,,,526,,526',
'526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,',
',526,,,526,526,526,526,526,526,526,526,,526,526,526,,526,526,,526,526',
'526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,,,526',
',,,,526,526,526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526,,,526',
'526,531,531,531,531,531,,,,531,531,,,,531,,531,531,531,531,531,531,531',
',,,,,531,531,531,531,531,531,531,,,531,,,,,,531,531,531,531,531,531',
'531,531,531,531,531,531,,531,531,531,,531,531,,531,531,531,,,,,,,,,',
',,,,,,,,,,531,,,531,,,531,531,,,531,,531,,,,531,,,,,,,,531,,,,,531,531',
'531,531,531,531,,,,531,531,,,,,,531,531,,,531,531,531,,,531,531,614',
'614,614,,614,,,,614,614,,,,614,,614,614,614,614,614,614,614,,,,,,614',
'614,614,614,614,614,614,,,614,,,,,,,614,,,614,614,614,614,614,614,614',
'614,614,614,614,614,,614,614,,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614',
',,614,614,,,614,,614,,614,,614,,,,,,,,614,,,,,614,614,614,614,614,614',
',,,614,614,,,,,,,614,,614,614,614,614,,,614,614,539,539,539,,539,,,',
'539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539,539,539,539,539',
'539,539,,,539,,,,,,,539,,,539,539,539,539,539,539,539,539,,539,539,539',
',539,539,,,,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,,,,,,',
',,,,,,,,,,,539,539,539,539,539,539,,,,539,539,,,,,,,539,,,539,539,539',
',,539,539,541,541,541,,541,,,,541,541,,,,541,,541,541,541,541,541,541',
'541,,,,,,541,541,541,541,541,541,541,,,541,,,,,,,541,,,541,541,541,541',
'541,541,541,541,541,541,541,541,,541,541,,541,541,541,,,,,,,,,,,,,,',
',,,,,541,,,541,,,541,541,,,541,,541,,541,,541,,,,,,,,541,,,,,541,541',
'541,541,541,541,,,,541,541,,,,,,,541,,541,541,541,541,469,,541,541,',
',,469,469,469,,,469,469,469,1080,469,1080,1080,1080,1080,1080,,,,469',
'469,469,469,,,1080,,,,,469,469,,469,469,469,469,469,,,,,,,,,,1080,,',
',,,,,,,,1080,1080,,469,469,469,469,469,469,469,469,469,469,469,469,469',
'469,,,469,469,469,,,469,,,469,,,469,469,,469,1080,469,,469,,469,469',
'469,469,469,469,469,,469,469,469,946,,946,946,946,946,946,,,,,,469,469',
'469,469,946,469,508,469,,,,,469,508,508,508,,,508,508,508,,508,,,,946',
',,,,508,508,,,,,946,946,,,,508,508,,508,508,508,508,508,,,,,,,,,,,,',
',,,,,,,,,946,,,,,,,,,,,,,508,,30,,,,,508,,30,30,30,508,508,30,30,30',
'944,30,944,944,944,944,944,,,,30,30,30,,,,944,508,508,,,30,30,,30,30',
'30,30,30,,,508,,,,,508,,944,,,,,508,,,,,,944,944,,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,944,30,,30',
',30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,,30,30,31,30,,30,,,,31,31',
'31,30,,31,31,31,942,31,942,942,942,942,942,,,,,31,31,,,,942,,,,,31,31',
',31,31,31,31,31,,,,,,,,,,942,,,,,,,,,,,942,942,,31,31,31,31,31,31,31',
'31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,942,31,,31,',
'31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,,31,31,60,31,,31,,,,60,60,60',
'31,,60,60,60,940,60,940,940,940,940,940,,,,,60,60,60,,,940,,,,,60,60',
',60,60,60,60,60,,,,,,,,,,940,,,,,,,,,940,940,940,940,,60,60,60,60,60',
'60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60,60,,60,940,60,',
'60,,60,60,60,60,60,60,60,,60,,60,1051,,1051,1051,1051,1051,1051,,,,',
',60,60,60,60,1051,60,460,60,,,,,60,460,460,460,,,460,460,460,,460,,',
',1051,,,,,460,460,460,,1051,1051,1051,1051,,,,460,460,,460,460,460,460',
'460,,,,,,,,,,,,,,,,,,,,,,1051,,460,460,460,460,460,460,460,460,460,460',
'460,460,460,460,,,460,460,460,,,460,,460,460,,,460,460,,460,,460,,460',
',460,460,460,460,460,460,460,,460,460,460,,,,,,,,,,,,,460,460,470,460',
',460,,,,470,470,470,460,,470,470,470,741,470,741,741,741,741,741,,,',
'470,470,470,470,,,741,,,,,470,470,,470,470,470,470,470,,,,,,,,,,741',
',,,,,,,,,,741,741,,470,470,470,470,470,470,470,470,470,470,470,470,470',
'470,,,470,470,470,,,470,,,470,,,470,470,,470,741,470,,470,,470,470,470',
'470,470,470,470,,470,470,470,,,,,,,,,,,,,470,470,470,470,,470,,470,',
',,,470,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,426,426,426,426,,,,426,426,426,426,426,426,426,426,426',
'426,,,,,,426,426,426,426,426,426,426,426,426,,,426,,,,,,,,,426,426,',
'426,426,426,426,426,426,426,,,426,426,,,,426,426,426,426,,,,,,,,,,,',
',,426,426,,426,426,426,426,426,426,426,426,426,426,426,,,426,426,,,',
',,,,,,426,,,,,,,,,426,,,,,426,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,',
',,,75,75,75,75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75',
'75,75,75,,,75,75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75',
'75,75,75,75,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,785,785,785,785',
'785,785,785,785,785,785,785,785,785,785,785,785,785,785,785,785,785',
'785,785,785,,,,785,785,785,785,785,785,785,785,785,785,,,,,,785,785',
'785,785,785,785,785,785,785,,,785,,,,,,,,,785,785,,785,785,785,785,785',
'785,785,,,785,785,,,,785,785,785,785,,,,,,,,,,,,,,785,785,,785,785,785',
'785,785,785,785,785,785,785,785,,,785,,,,,,,,,,,,,,,,,,,,785,,,,,785',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11',
'11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,',
',,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,',
'11,,,,,,,,,11,,,,,11,658,658,658,658,658,658,658,658,658,658,658,658',
'658,658,658,658,658,658,658,658,658,658,658,658,,,,658,658,658,658,658',
'658,658,658,658,658,,,,,,658,658,658,658,658,658,658,658,658,,,658,',
',,,,,,,658,658,,658,658,658,658,658,658,658,,,658,658,,,,658,658,658',
'658,,,,,,,,,,,,,,658,658,,658,658,658,658,658,658,658,658,658,658,658',
',,658,658,,,,,,,,,,658,,,,,,,,,658,,,,,658,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12',
'12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12',
'12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12',
'12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,,,,,12,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,,,,103,103,103,103,103,103,103,103,103,103,,,,,,103',
'103,103,103,103,103,103,103,103,103,103,103,,103,,,,,,,103,103,,103',
'103,103,103,103,103,103,,,103,103,,,,103,103,103,103,,,,,,,,,,,,,,103',
'103,,103,103,103,103,103,103,103,103,103,103,103,,,103,,,,,,,,,,543',
'543,,,543,,,,,,103,,,543,543,103,543,543,543,543,543,543,543,,,543,543',
',,,543,543,543,543,,,,,,543,,,,,,,,543,543,,543,543,543,543,543,543',
'543,543,543,543,543,,,543,,,,,,,,,,476,476,,,476,,,,,,543,,,476,476',
'543,476,476,476,476,476,476,476,,,476,476,,,,476,476,476,476,,,,,,476',
',,,,,,,476,476,,476,476,476,476,476,476,476,476,476,476,476,,,476,,',
',,,,,,,615,615,,,615,,,,,,476,,,615,615,476,615,615,615,615,615,615',
'615,,,615,615,,,,615,615,615,615,,,,,,615,,,,,,,,615,615,,615,615,615',
'615,615,615,615,615,615,615,615,,,615,,,,,,,,,,553,553,,,553,,,,,,615',
',,553,553,615,553,553,553,553,553,553,553,,,553,553,,,,553,553,553,553',
',,,,,553,,,,,,,,553,553,,553,553,553,553,553,553,553,553,553,553,553',
',,553,,,,,,,,,,477,477,,,477,,,,,,553,,,477,477,553,477,477,477,477',
'477,477,477,,,477,477,,,,477,477,477,477,,,,,,477,,,,,,,,477,477,,477',
'477,477,477,477,477,477,477,477,477,477,,,477,,,,,,,,,,1033,1033,,,1033',
',,,,,477,,,1033,1033,477,1033,1033,1033,1033,1033,1033,1033,,,1033,1033',
',,,1033,1033,1033,1033,,,,,,1033,,,,,,,,1033,1033,,1033,1033,1033,1033',
'1033,1033,1033,1033,1033,1033,1033,,,1033,,,,,,,,,,542,542,,,542,,,',
',,1033,,,542,542,1033,542,542,542,542,542,542,542,,,542,542,,,,542,542',
'542,542,,,,,,542,,,,,,,,542,542,,542,542,542,542,542,542,542,542,542',
'542,542,,,542,,,,,,,,,,775,775,,,775,,,,,,542,,,775,775,542,775,775',
'775,775,775,775,775,,,775,775,,,,775,775,775,775,,,,,,775,,,,,,,,775',
'775,,775,775,775,775,775,775,775,775,775,775,775,,,775,,,,,,,,,,229',
'229,,,229,,,,,,775,,,229,229,775,229,229,229,229,229,229,229,,,229,229',
',,,229,229,229,229,,,,,,229,,,,,,,,229,229,,229,229,229,229,229,229',
'229,229,229,229,229,,,229,,,,,,,,,,230,230,,,230,,,,,,229,,,230,230',
'229,230,230,230,230,230,230,230,,,230,230,,,,230,230,230,230,,,,,,230',
',,,,,,,230,230,,230,230,230,230,230,230,230,230,230,230,230,,,230,,',
',,,,,,,774,774,,,774,,,,,,230,,,774,774,230,774,774,774,774,774,774',
'774,,,774,774,,,,774,774,774,774,,,,,,774,,,,,,,,774,774,,774,774,774',
'774,774,774,774,774,774,774,774,,,774,,,,,,,,,,552,552,,,552,,,,,,774',
',,552,552,774,552,552,552,552,552,552,552,,,552,552,,,,552,552,552,552',
',,,,,552,,,,,,,,552,552,,552,552,552,552,552,552,552,552,552,552,552',
',,552,,,,,,,,,,616,616,,,616,,,,,,552,,,616,616,552,616,616,616,616',
'616,616,616,,,616,616,,,,616,616,616,616,,,,,,616,,,,,,,,616,616,,616',
'616,616,616,616,616,616,616,616,616,616,,,616,,,,,,,,,,1027,1027,,,1027',
',,,,,616,,,1027,1027,616,1027,1027,1027,1027,1027,1027,1027,,,1027,1027',
',,,1027,1027,1027,1027,,,,,,1027,,,,,,,,1027,1027,,1027,1027,1027,1027',
'1027,1027,1027,1027,1027,1027,1027,,,1027,,,,,,,,,,1032,1032,,,1032',
',,,,,1027,,,1032,1032,1027,1032,1032,1032,1032,1032,1032,1032,,,1032',
'1032,,,,1032,1032,1032,1032,,,,,,1032,,,,,,,,1032,1032,,1032,1032,1032',
'1032,1032,1032,1032,1032,1032,1032,1032,,,1032,,,,,,,,,,665,665,,,665',
',,,,,1032,,,665,665,1032,665,665,665,665,665,665,665,,,665,665,,,,665',
'665,665,665,,,,,,665,,,,,,,,665,665,,665,665,665,665,665,665,665,665',
'665,665,665,,,665,,,,,,,,,,664,664,,,664,,,,,,665,,,664,664,665,664',
'664,664,664,664,664,664,,,664,664,,,,664,664,664,664,,,,,,664,,,,,,',
',664,664,,664,664,664,664,664,664,664,664,664,664,664,,739,664,739,739',
'739,739,739,,,,,278,278,,,278,739,,,,,664,,,278,278,664,278,278,278',
'278,278,278,278,,,278,278,739,,,278,278,278,278,,,739,739,739,739,,',
',,,,,278,278,,278,278,278,278,278,278,278,278,278,278,278,,737,278,737',
'737,737,737,737,,,,739,,,,,,737,,,,,278,,,,572,278,572,572,572,572,572',
',,,,,,737,,1053,572,1053,1053,1053,1053,1053,737,737,737,737,,,,,1055',
'1053,1055,1055,1055,1055,1055,,572,974,,974,974,974,974,974,1055,572',
'572,572,572,,,1053,,974,,977,737,977,977,977,977,977,1053,1053,,,1055',
',,,,977,,,,974,,1055,1055,,,572,,,974,974,974,974,,,,,,977,,,1053,,',
',,,977,977,977,977,,,,,979,1055,979,979,979,979,979,,,825,974,825,825',
'825,825,825,979,1057,,1057,1057,1057,1057,1057,,825,,,977,,,,,1057,',
',,,979,,,,,,,,,825,,979,979,,,,,1057,825,825,825,825,,,,,,,1057,1057',
',356,,356,356,356,356,356,,,,,,,,979,825,356,,,,,,,825,,,,,,,,1057,',
',,,,,356,356,,,,,,,,356,356,356,356,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'356' ]
        racc_action_check = arr = ::Array.new(26062, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1178,  3604,  1298,   nil,   386,   nil,   nil, 10614,  1474,
   nil, 23931, 24207,   778,   nil,   746,   731,   144,   771,   997,
   258,   nil,   -73,  6134,  1771,   810,   nil,   135,   nil,   137,
 22864, 22992,  6274,  6414,  6554,   nil,  2617,  6694,  6834,   nil,
   701,   259,   269,   755,   127,  7114,  7254,   502,  7394,   659,
  1279,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 23120,   nil,   -40,  7534,   nil,    71,   nil,  7674,  7814,   nil,
   nil,  7954,  8094,   673,   nil, 23655,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    62,   nil,   nil,   nil,   nil,   nil,   nil,   612,
   611,   596,   590, 24345,   nil,   nil,   nil,   nil,   nil,   nil,
   396,   nil,   nil,   792,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  8374,   nil,   nil,   nil,
   nil,  8514,  8654,  8794,  8934,  9074,   600,   nil,   797,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   576,   nil,  3040,  9354,  9494,  9634,  9774,  9914, 10054, 25002,
 25075,   nil, 10194, 10334, 10474,   nil,   nil,  1207,   -53,    80,
   643,    83,   553,   607,   nil, 10754,  2899,   597, 11034, 11174,
 11314, 11454, 11594, 11734, 11874, 12014, 12154, 12294, 12434, 12574,
 12714, 12854, 12994, 13134, 13274, 13414, 13554, 13694, 13834, 13974,
   nil,   nil,   nil,   nil, 14114,   nil,   nil,   nil, 25659,   nil,
   nil,   574, 14254,   nil,   nil,   573,   nil,   nil,   nil, 14394,
   nil,   nil, 14534,   nil,  1348,   nil,   533,   514,   nil, 14814,
   445, 14954,   nil, 15094, 15234,   nil,   nil,   184,   nil,   nil,
 15514,  1348,   nil,   306,  1912,   320,   303,   233, 15934,  1630,
  1348,   362,   800,  1286,  1251,   nil,  1245,  1207,   -10,   nil,
   nil,   nil,  1229,   168,  1178, 16214,   nil,   299,  1235,  1210,
   nil,  1230, 16774,   nil, 16914,  3181,   nil, 17054,  1203,   nil,
   535,   524,  1175, 17614,   nil,   nil, 25927,   276,    -8,    -9,
 17754,  1348,  1207,   492,  1233,  1116,     7,    26,   469,  1191,
    25,  1220,   nil,   nil, 18034,   nil, 18174,   539,   465,   435,
   433,   372,   272,   113,   -60,   112,   nil,   107,   nil,   nil,
   nil,   nil,   nil,   258,   nil,   322,   nil,   161,   nil,  1120,
   304,   nil,  1111,   200,   nil,  1097,   124,   nil,  1092,   134,
   nil,   294,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  2758, 23517,   nil,   nil,   nil,
   nil,  1101,   nil,   nil,  1076, 18734,  1075,   nil,   nil,  1058,
   nil,  1069,   145,   nil,   nil,   nil,  1066,   nil,   nil,   nil,
   nil,   nil,  1207,  1068,   nil,   nil,  1060,  1050,   -77,   320,
 23252,   nil,   nil,   nil,   660,   528,  1067,   nil,   nil, 22652,
 23380,   nil,   nil,   nil,   140,   nil, 24491, 24710, 19294,   241,
 19434, 19574, 19714,  2335,  2476,   473,   195,  1039,  1027,  1026,
  1012,   874,  3745,  3604,  2758,  2899,  2194,  3463,  3322,  3040,
   939,   846,  2617,  3181,  1630,   742,  1045,   nil, 22784,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   923,   913,   nil,
   nil, 21674,   nil,   nil, 21814,   nil, 21954,   nil,   nil,   nil,
   nil, 22094,  1489,   924,   908,   895,   nil,   nil,   893, 22374,
   887, 22514, 24856, 24418,  1351,   892,   nil,  5294,   807,   nil,
   828,  5574, 25221, 24637,   605,  1912,  5854,   900,   895,   643,
   nil,   nil,  5994,   nil,   nil,  5714,   nil,   801,   nil,    67,
   828,   nil, 25746,   nil,   788,   797,   nil,   798,   799,   800,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   793,   527,   nil,
   nil,  5434,   nil,   nil,   nil,   888,   nil,   nil,   nil,   908,
   nil,   nil,   911,  2476,   971,   nil,  3886,    30,  1005,  1007,
  1003,  1011,   nil,   nil, 22234, 24564, 25294,    30,   nil,   404,
   436,    11,   nil,   927,   nil,   939, 21534,   nil,   962,   nil,
   nil,   nil, 21394,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -40,   nil,   nil,   195,   nil,   nil,
   nil,   929,   nil,   nil,   930,   nil,   948,   nil, 24069,   nil,
   934, 21254, 21114, 20974, 25586, 25513, 20834,   390,   978, 20694,
 20554, 20414, 20274,   981,   nil,   nil,   nil, 20134,  5154,   983,
   nil,   nil,   279,   312,   264,     0,   976,   975,   nil,   -51,
  1078,    75,   nil,   994,   nil,  1099,   nil,   nil,   993,   nil,
  1038, 19994,   nil,   nil,   nil,   nil,  -123, 19854,  1000,   nil,
  1022,   155,   127,  1063,   467,   891,  1071,  1037, 19154, 19014,
  1121,    56,   220,   nil, 18874,   nil,   nil,  1071,   305,   nil,
   nil,     1,  1073,   318,   nil,   nil,   313, 25721,   nil, 25648,
   nil, 23344,   nil, 18594,   nil,   532,   nil,  1090,     6,  1095,
   nil,   nil,   nil,   nil,   638,   nil,  1217,   nil,   nil,   nil,
   nil,   nil,  1224,   nil, 18454,  1109,    21,    14,    24,     8,
  3745,   nil,  1243,   nil, 25148, 24929, 18314,   nil,   nil,   nil,
   554,  4732,  5014,   855,   723, 23793,   -14,   889,  1066,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1119, 17894,  1137,   343,
   364,   924,   132,  1489, 17474,   nil,  1160,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil, 17334, 17194, 16634,
 16494,   366, 16354,   nil,   nil, 25867,   nil,  3322,   nil,   nil,
  1207,   nil,   -54,   nil,   nil,   nil,  1201,   217,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  3463,   nil,  1209,  1252,   nil,
   nil,   nil,   nil,   nil,  4450,  4873,   -96,   -79,   -65,   nil,
   nil,   nil,    66,    85,   nil,   136,   150,   nil,   156,   nil,
   nil,   170,   624,   185,   695,   nil,   321,   nil,   nil, 16074,
   nil,  1489,   351,   nil,   nil,   -10,   -19,   369,   461,  1102,
   nil,   316,  1771, 15794,   462,   451,   469,   362,   258,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   358,   386,   368,   nil,
   nil, 15654, 15374,  2053,   420,   437,   nil,   463,   485,   491,
   nil,   517,   502,   496, 14674,   nil,   nil,   nil,   nil,  2053,
  2335,   nil,    -1, 10894,   nil,   577,   684,   933,   nil,   nil,
 23084,   nil, 22956,   nil, 22828,   nil, 22715,   nil,   nil,   nil,
   nil,   197,   760,   578,   nil,    32,   nil,   nil,  9214,  2194,
   nil,   nil,   714,   162,   nil,   nil,   nil,   nil,   nil,   634,
   nil,   219,   nil,   nil, 25785,   nil,   nil, 25803,   nil, 25858,
   nil,   nil,   646,  8234,   571,   702,   nil,   750,  4591,   932,
   962,   963,   705,   980,   nil,   nil,   nil,   198,   nil,   nil,
   nil,   633,   641,   643,   646,   653,   505,   654,   785,  4309,
   nil,   150,   nil,   nil,  4168,  4027,   664,   nil,   nil,   665,
   666,   667,   674,   nil,   678,   nil,   703, 25367,   nil,   nil,
   820,  6974, 25440, 24783,  1138,   nil,   917,   591,   nil,   nil,
   nil,   nil,   664,   715,   445,   nil,   nil,   nil,   843,   845,
   nil, 23183,   nil, 25761,   nil, 25776,   nil, 25875,   nil,   nil,
   791,   792,   nil,   758,    18,    21,    34,  1066,   nil,   763,
   773,   nil,   nil,   nil,   935,   961,   963,  1138,   -11,   nil,
 22616,   nil,   nil,   nil,   nil,   402,   nil ]

racc_action_default = [
    -1,  -645,  -644,  -645,    -2,  -631,    -4,    -5,  -645,    -8,
    -9,  -645,  -645,  -645,   -35,  -645,  -645,   -39,  -645,  -645,
  -294,   -50,  -633,  -645,   -55,   -60,   -61,   -62,   -66,  -271,
  -271,  -271,  -308,  -341,  -342,   -78,  -644,   -82,   -90,   -92,
  -645,  -535,  -536,  -645,  -645,  -645,  -645,  -230,  -645,  -633,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -618,  -296,  -299,  -644,  -306,  -316,  -421,  -645,  -645,   -57,
   -57,  -631,  -645,  -326,  -333,  -645,  -343,  -344,  -346,  -347,
  -348,  -349,  -350,  -351,  -352,  -353,  -354,  -355,  -364,  -466,
  -467,  -468,  -469,  -470,  -471,  -644,  -474,  -644,  -644,  -644,
  -644,  -644,  -644,  -644,  -511,  -517,  -519,  -520,  -521,  -522,
  -616,  -524,  -525,  -617,  -527,  -528,  -529,  -530,  -531,  -532,
  -533,  -534,  -539,  -540,  1087,    -3,  -632,  -640,  -641,  -642,
    -7,  -645,  -645,  -645,  -645,  -645,  -645,   -23,  -645,  -121,
  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
   -28,  -130,  -644,  -645,  -645,  -645,  -645,  -645,  -644,  -645,
  -645,  -628,  -645,  -645,  -633,  -634,   -54,  -645,  -535,  -536,
  -645,  -294,  -645,  -645,  -236,  -645,  -644,  -645,  -645,  -645,
  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,
  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,  -645,
  -245,  -246,  -247,  -248,  -645,  -357,  -450,  -429,  -645,  -629,
  -630,   -67,  -645,  -315,  -356,  -645,  -443,  -445,   -73,  -644,
  -440,   -74,  -633,   -75,  -251,  -266,  -644,  -644,  -270,  -645,
  -276,  -645,  -611,  -645,  -645,   -76,   -77,  -631,   -16,   -17,
  -645,   -20,   -21,   -80,  -644,  -633,  -645,   -83,   -86,  -644,
   -98,   -99,  -645,  -645,  -106,  -308,  -311,  -633,  -433,  -341,
  -342,  -345,  -441,  -645,   -88,  -645,   -94,  -304,  -518,  -645,
  -224,  -225,  -645,  -237,  -645,  -644,  -298,  -645,  -645,  -252,
  -637,  -637,  -645,  -644,  -317,  -318,  -567,   -56,  -645,  -645,
  -645,  -644,  -644,  -631,  -645,  -632,  -535,  -536,  -645,  -645,
  -294,  -645,  -374,  -375,  -645,  -329,  -645,  -121,  -122,  -164,
  -165,  -166,  -182,  -187,  -194,  -197,  -336,  -645,  -535,  -536,
  -606,  -607,  -472,  -645,  -495,  -645,  -497,  -645,  -499,  -645,
  -645,  -479,  -645,  -645,  -485,  -645,  -645,  -491,  -645,  -645,
  -493,  -645,  -510,  -512,  -513,  -514,  -515,    -6,  -643,   -29,
   -30,   -31,   -32,   -33,   -10,  -644,  -645,   -25,   -26,   -27,
  -131,  -645,   -36,   -38,  -281,  -645,  -645,  -280,   -37,  -645,
   -40,  -645,  -294,   -48,   -49,  -205,  -256,  -276,   -51,   -52,
   -41,  -206,  -256,  -633,  -261,  -262,  -644,  -644,  -619,  -620,
  -271,  -438,  -621,  -622,  -620,  -619,  -271,  -437,  -439,  -621,
  -622,   -47,  -214,   -53,  -633,  -314,  -645,  -645,  -644,  -304,
  -645,  -645,  -645,  -215,  -216,  -217,  -218,  -219,  -220,  -221,
  -222,  -226,  -227,  -228,  -229,  -231,  -232,  -233,  -234,  -235,
  -238,  -239,  -240,  -241,  -633,  -249,  -645,  -451,  -271,  -619,
  -620,   -64,   -68,  -272,  -434,  -447,  -450,  -633,  -633,  -310,
  -267,  -645,  -275,  -268,  -645,  -273,  -645,  -277,  -614,  -615,
   -15,  -632,   -19,  -645,  -633,   -79,  -302,   -95,   -84,  -645,
  -633,  -644,  -645,  -645,  -105,  -645,  -518,  -645,   -91,   -96,
  -645,  -645,  -645,  -645,  -250,  -242,  -645,  -458,  -645,  -300,
  -635,  -253,  -639,  -638,  -255,  -639,  -305,  -645,  -609,  -637,
  -645,  -422,  -567,  -425,  -605,  -605,  -550,  -552,  -552,  -552,
  -566,  -568,  -569,  -570,  -571,  -572,  -573,  -574,  -645,  -576,
  -578,  -580,  -585,  -587,  -588,  -590,  -595,  -597,  -598,  -600,
  -601,  -602,  -645,  -644,  -365,  -366,  -644,  -645,  -645,  -645,
  -645,  -645,  -360,  -453,  -644,  -645,  -645,  -304,   -57,  -116,
  -117,  -645,  -119,  -645,  -294,  -644,  -645,  -334,  -545,  -338,
  -626,  -627,  -645,  -473,  -496,  -501,  -502,  -504,  -475,  -498,
  -476,  -500,  -477,  -478,  -645,  -481,  -483,  -645,  -484,  -487,
  -488,  -645,  -489,  -490,  -645,  -516,  -645,   -24,  -645,   -34,
  -284,  -645,  -645,  -644,  -645,  -645,  -645,  -442,  -645,  -263,
  -265,  -645,  -645,   -69,  -259,  -260,  -435,  -645,  -645,   -71,
  -436,  -313,  -619,  -620,  -619,  -620,  -633,  -645,  -428,  -644,
   -63,  -430,  -447,  -645,  -448,  -645,  -258,  -309,  -644,  -274,
  -278,  -645,  -612,  -613,   -18,   -22,   -81,  -645,   -87,   -93,
  -633,  -619,  -620,  -644,  -102,  -104,  -645,   -89,  -645,  -645,
  -223,  -633,  -644,  -358,  -644,  -297,  -363,  -633,  -637,  -307,
  -610,  -645,  -633,  -645,  -548,  -549,  -645,  -645,  -559,  -645,
  -562,  -645,  -564,  -645,  -376,  -645,  -378,  -380,  -387,  -633,
  -579,  -589,  -599,  -603,  -644,  -367,  -644,   -58,  -368,  -369,
  -321,  -322,  -645,  -324,  -645,  -633,  -619,  -620,  -623,  -303,
  -644,  -116,  -117,  -118,  -645,  -645,  -644,  -327,  -541,  -543,
  -330,  -644,  -644,  -567,  -567,  -645,  -633,  -645,  -644,  -480,
  -482,  -486,  -492,  -494,   -11,  -132,  -282,  -645,  -633,  -619,
  -620,  -620,  -619,  -257,  -645,  -636,  -644,   -43,  -208,   -44,
  -209,   -70,   -45,  -211,   -46,  -210,   -72,  -645,  -645,  -645,
  -645,  -442,  -645,  -410,  -411,  -633,  -413,  -644,  -432,  -431,
  -645,  -444,  -644,  -446,  -269,  -279,   -85,  -100,   -97,  -213,
  -312,   -12,   -14,  -359,  -361,  -644,  -465,  -459,  -644,  -460,
  -461,  -301,  -254,  -423,  -644,  -644,  -415,  -633,  -605,  -586,
  -604,  -551,  -552,  -552,  -577,  -552,  -552,  -596,  -552,  -574,
  -591,  -633,  -645,  -385,  -645,  -575,  -645,  -362,  -370,  -645,
  -372,  -644,  -645,   -59,  -323,  -645,  -442,  -645,  -116,  -117,
  -120,  -633,  -644,  -645,  -645,  -645,  -645,  -633,  -645,  -339,
  -608,  -503,  -506,  -507,  -508,  -509,  -645,  -283,  -442,   -42,
  -207,  -264,  -645,  -243,  -605,  -605,  -392,  -644,  -644,  -644,
  -409,  -645,  -633,  -574,  -582,  -583,  -593,  -452,   -65,  -644,
  -644,  -464,  -645,  -645,  -463,  -645,  -645,  -645,  -424,  -547,
  -645,  -555,  -645,  -557,  -645,  -560,  -645,  -563,  -565,  -377,
  -379,  -383,  -645,  -388,  -319,  -645,  -373,  -320,  -645,  -644,
  -325,  -442,  -645,  -645,  -331,  -335,  -337,  -544,  -546,  -545,
  -505,  -645,  -390,  -391,  -400,  -394,  -402,  -645,  -405,  -645,
  -407,  -412,  -645,  -645,  -581,  -645,  -449,  -644,  -644,  -107,
  -108,  -645,  -645,  -115,  -462,  -426,  -427,  -633,  -417,  -419,
  -420,  -552,  -552,  -552,  -552,  -381,  -645,  -386,  -645,  -644,
  -278,  -644,  -328,  -542,  -644,  -644,  -605,  -584,  -393,  -644,
  -644,  -644,  -644,  -594,  -644,  -414,  -592,  -645,  -304,   -13,
  -458,  -644,  -645,  -645,  -114,  -416,  -645,  -645,  -553,  -556,
  -558,  -561,  -645,  -384,  -644,  -454,  -455,  -456,  -645,  -645,
  -389,  -645,  -397,  -645,  -399,  -645,  -403,  -645,  -406,  -408,
  -303,  -623,  -457,  -633,  -619,  -620,  -623,  -113,  -418,  -552,
  -382,  -371,  -332,  -340,  -644,  -644,  -644,  -644,  -442,  -554,
  -645,  -395,  -398,  -401,  -404,  -644,  -396 ]

clist = [
'6,129,233,236,295,295,295,229,358,359,277,290,363,386,346,279,357,357',
'453,424,357,354,142,142,611,331,331,145,145,344,137,221,580,147,147',
'361,362,338,296,296,296,413,603,606,573,558,722,125,317,702,4,523,437',
'438,876,734,735,782,667,126,331,349,864,444,316,315,444,129,548,350',
'512,444,419,420,421,422,842,334,867,517,357,357,357,357,506,699,142',
'773,699,749,702,313,857,394,918,396,398,401,404,407,410,396,827,281',
'288,291,693,460,466,561,564,882,451,364,142,950,376,472,297,297,297',
'130,1023,450,395,293,305,306,471,634,411,644,1000,641,647,2,645,953',
'998,645,625,136,627,841,930,704,533,220,373,351,433,426,757,9,883,278',
'508,692,658,9,342,352,691,390,567,355,371,777,387,629,345,347,727,353',
'448,449,374,892,626,894,1014,1,473,474,781,921,475,19,863,628,865,785',
'969,19,920,702,1023,922,997,571,295,853,356,432,443,731,515,443,237',
'516,461,523,443,832,689,1007,1045,237,237,237,764,19,322,322,848,476',
'454,932,392,436,436,1000,393,699,699,397,400,1068,403,417,890,470,406',
'1019,519,929,871,409,580,901,431,950,237,237,295,787,237,368,788,412',
'732,295,893,862,295,859,514,535,686,1043,762,864,708,1017,316,632,919',
'9,,867,717,,982,830,,,423,454,296,,,821,,,522,522,,,296,864,,607,,129',
',1070,331,545,,357,542,19,,290,,837,237,237,237,237,19,,,331,695,,546',
'552,730,,,710,,738,740,742,,,,939,,1029,316,534,1071,,549,316,540,530',
',568,,,460,466,615,538,,129,,531,331,,331,472,1046,451,297,313,886,',
',,313,513,,,297,,790,,864,790,,518,,,,608,609,1001,,,,972,973,,1015',
',,,,908,765,610,,19,237,441,237,237,441,237,,,705,441,237,237,713,,',
'6,,1020,681,,1021,664,713,19,,668,,,702,142,,569,836,675,145,,,657,',
'680,147,,295,,834,798,522,522,,461,674,580,580,532,811,,,,,237,816,696',
'697,897,898,656,237,699,454,237,,,,895,896,,687,,706,852,470,675,,,709',
'713,,19,961,1050,559,19,,444,1074,322,19,721,674,,,,444,444,,295,,,444',
'444,,1062,322,,,461,,,,331,,,19,,19,461,673,331,,,,454,679,,460,466',
',237,19,19,,,549,,,849,470,936,808,810,549,623,834,623,813,815,470,',
'891,807,809,959,,,,812,814,780,9,,,,,786,690,,770,,295,,,,,,962,,,,461',
',,,,,,758,839,,,698,,,19,,454,,,,988,,941,943,,945,947,779,948,,,470',
',,,754,,,756,295,,,,1009,,,443,444,,461,,829,728,,,443,443,713,,,,443',
'443,,,454,,237,,,668,,1078,142,,1047,,840,145,828,470,795,,851,147,',
',,858,,,823,,910,668,,,,675,331,522,680,,,909,875,808,810,815,813,331',
',,,,674,856,,1048,1049,19,,549,,846,,850,899,322,,237,,,838,436,,322',
',860,,,860,900,,,237,,,,668,,,295,,,,880,,880,806,461,1038,1039,1040',
'1041,,,,,,,,,,885,,,,454,,915,,668,,,,725,,443,470,,,19,,,19,,,,,142',
'910,887,237,,,,,522,856,,,,938,,237,,,,,906,237,,,955,1063,,949,,1079',
'916,,357,,823,,760,761,963,763,,,,,,,357,,,,934,441,237,967,,,,,,927',
'441,441,,,,,441,441,,,29,,,,,668,29,931,,,,,,,,,935,,,,,29,,,964,,322',
',968,,29,29,29,,29,,856,322,,,,,,956,713,924,331,,,975,975,975,,,,331',
'1016,,,915,,,915,,915,29,29,,,29,,,,,,,,,,,,866,,868,,,,,,19,,986,987',
'1013,,237,,,,,19,19,,,,331,860,19,,916,,1035,916,1032,916,,,,,846,884',
'1011,,441,29,,,,,29,29,29,29,29,,,915,295,915,,915,,915,880,,,19,461',
',,1030,975,975,975,975,,975,,,,,,,454,19,915,,917,,,,1044,470,19,19',
',880,668,470,,434,447,,,,,916,,916,,916,924,916,,924,,,924,237,924,19',
',,,,,975,975,975,975,,19,237,587,,916,,975,,,29,29,29,29,29,29,29,,',
',29,29,29,,954,,,,,,957,,,984,29,960,,,19,19,,,991,965,966,,525,,527',
',528,529,,,,,,,976,978,980,924,,924,,924,,924,19,,29,,1002,,1003,,1004',
'29,,,29,16,,,,,,16,,,924,,1026,,,,,19,29,,570,,29,,,,,29,,1022,1012',
'1024,,,,16,,,19,,,,,19,19,32,,,,,,32,,29,,29,,,,,237,,,,,,32,,29,29',
'29,372,,,,32,32,32,,32,1052,1054,1056,1058,,1059,,,,1069,,,,,,,,,,,',
',660,1075,,1076,,1077,,,32,32,,,32,,1072,1073,,,,,,,,16,,,,,,,1085,29',
'16,1081,1082,1083,1084,587,,,,,,,1086,,,,,,,,,744,,,,,,,,,,,,,,32,,',
',,32,32,32,32,32,,,,,,,,29,,700,,,570,,703,,,,,,,,,,,,,,,,,,,,,,,,,',
',,16,,439,,,439,,,700,,439,570,,,,,,,29,,,,,,16,,,,29,,,,,,,,,750,,',
',,,29,32,32,32,32,32,32,32,,,,32,32,32,,,,,,,,,,,,32,,,,,,,,,,,,,,,587',
',587,,,16,,29,744,16,29,873,,,16,,,,29,,,32,,,796,,,,32,,29,32,700,570',
',42,29,,,,16,42,16,,,,587,587,,32,,,,32,,,16,16,32,,,,,,835,,29,29,',
'42,321,321,,,,29,29,,,,,29,29,,32,,32,847,923,,,,,,,,,,,32,32,32,,,',
'367,870,,389,,,,,,,,,,,,16,,,,,,,447,,,,,,,,744,,744,,,,,,,,,,,,,,,',
',,,,,,42,907,,,,32,,,,42,,,,,,29,,,,,,29,,,,,29,29,,,,,,29,,,,,,,,,',
',587,,,,,29,,,,,,1005,744,,32,,,,,,,,,16,,,,,29,,,,,,923,,,923,,,,,',
',,,29,,,,,,42,,,29,29,,,,,,,,,,744,32,744,,,570,,,,,42,32,,,29,,29,',
',,,,,,,,32,29,29,16,,,16,,,,744,,,,,,,,,923,,,,,,,1010,,,,,,,,,,,,29',
'29,18,,,,,,18,32,42,,32,,42,,,,321,42,32,41,,,439,,,41,,,29,,32,439',
'439,321,18,,32,439,439,,,,,42,,42,,,,,,,,41,320,320,,29,,42,42,,,,,',
'32,32,,,,,389,,389,32,32,,29,,,32,32,29,29,,,,,366,,,388,,,,,,,,29,',
',,,,,,,,,,,,,,,,,,,,,42,18,,,,,,16,,,18,,,,,,,,16,16,41,,,,,16,,,,41',
',,,,,,,,,,,439,,,,,,,,,,32,,,,,,32,,,,,32,32,16,,,,,32,,,,,,,,,,,,,16',
',,32,,,,,,16,16,,,,,18,,18,,,18,,,,42,18,32,,,,,,321,,41,,16,,,18,321',
',,,32,,,16,,,,,,32,32,,,,41,,,,,,,,,,,,,,,,,,,,32,,32,,,,16,16,,,994',
',,32,32,,,,42,,,42,,,,18,,,,18,,,,,18,,16,,,,,,,,41,,,,41,,32,32,320',
'41,,,,,,,18,,18,,,16,,,,320,,,,,,,18,18,,41,32,41,,,,,16,,,,,16,16,',
',41,41,,,,,,,,,,,,388,32,388,,,,,,,,,,,,321,,,,,,,,32,,,321,,32,32,',
',,18,,,,,,,,,,,,32,,,,,,,41,,,,,,,,,,,,,,,,20,,,,,,20,,,,42,,,,,,,,',
',,42,42,,,,,,42,,,,,,20,324,324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,370',
'18,,,,,,,,,,,,,,42,,,,,41,,,,42,42,,,320,,,,,,,,320,,,,,,,,,,,,,,,42',
',,20,,,,,,,,42,20,,,,,,,,,,18,,,18,,,,,,,,,,,,,,,,41,,389,41,,,,42,42',
',,990,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,18,,,,,,,,,18,18,,,,,18,18,,20,',
'442,389,,442,,,42,,442,,,,,,,,,,,,,,20,,,,,42,,,,,42,42,,,,,,,,,,,320',
',,,,,,,,,,320,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,18,,20,,,,324,20,,,',
'18,18,,,,,,18,41,,,,324,,,,,,,41,41,,20,18,20,,41,,,,,,,,,,,,20,20,',
',,,,,18,,,,,624,,624,,,,,,,,,,,18,41,,,,,,,,18,18,,,,,,,,,41,,,,244',
',,,,41,41,,,294,294,294,,18,,20,,,,,,,340,341,18,343,,,,,,,41,,,,,,',
',294,,,41,,,,,,,,,,,,,,,,,,18,18,,,,,,,,,,,,,388,,,,,41,41,,,989,,,',
',,,18,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,18,20,,,,,,,,324,,,,,388,,,324,',
'41,,18,,,,,18,18,,,,,,,,,,,,,41,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,',
'20,,,20,,,,294,446,,,452,294,,,,452,,,,,,,,,,,,,244,,,483,484,485,486',
'487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503',
'504,,,,,505,442,,,,,,,294,,442,442,,,,294,442,442,294,,,,,,,294,,294',
',294,294,,,,,,,,,,,,,,,,324,,,,,,,,,,,324,,,,,,,,,,,554,,555,,,,,,,',
',294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,20,20,,,,,905,20,,,,',
',,,,,,,,,,,442,,,,,,,,,,,,,,,,,,294,,,,,20,,,,,,,,,,,,,,,,,,20,,,,,',
',,,20,20,,,,,,,,,,294,,452,452,452,,,,,,,,,,,,20,,,,,,,,,,,20,,,,,,',
',,,,,,,,,294,,,294,,294,,,,,,,,,,,624,,,,294,20,20,,,993,,,,,720,,,',
',,,,,,,294,,,294,,,,,,,20,,,,,,,,,,,,,,,,,,,294,,,,,624,,,,,20,,,,,',
',,,,,,,294,,,,,,,,20,,,,,20,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,452',
'294,,,803,,,294,294,452,452,,,,,452,452,,,,,,,,,,,,,,,,,,,,,,,294,,',
',,,,,,,,,,,,,,,452,,,,,294,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,',
',294,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,294,,,,,,,452,,,,,,,,,,,,,452',
'452,452,452,,913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,452,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294' ]
        racc_goto_table = arr = ::Array.new(3670, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,120,39,26,45,45,45,37,23,23,171,87,23,69,60,37,30,30,35,10,30,104',
'70,70,115,79,79,73,73,39,21,21,202,74,74,41,41,77,84,84,84,69,108,108',
'170,12,14,5,62,217,2,89,28,28,109,153,153,123,36,8,79,6,207,24,13,59',
'24,120,64,84,51,24,23,23,23,23,16,63,212,35,30,30,30,30,172,90,70,67',
'90,148,217,58,162,6,158,6,6,6,6,6,6,6,160,50,50,50,52,49,49,85,85,111',
'76,5,70,146,135,76,86,86,86,7,213,32,189,57,57,57,32,193,189,192,165',
'193,192,3,193,149,164,193,68,11,68,15,17,19,20,22,25,86,29,31,42,9,44',
'48,49,54,75,9,80,83,88,100,103,106,117,119,124,125,126,127,128,129,30',
'30,130,131,132,133,134,1,30,30,136,162,60,34,159,137,159,138,139,34',
'150,217,213,156,163,166,45,167,168,26,26,169,175,26,34,176,87,89,26',
'178,180,149,181,34,34,34,182,34,34,34,183,37,6,184,187,84,84,165,188',
'90,90,190,191,164,194,7,67,70,195,158,60,160,148,196,202,197,13,146',
'34,34,45,198,34,34,199,200,170,45,201,206,45,209,87,60,35,149,115,207',
'64,210,13,216,159,9,,212,64,,162,52,,,9,6,84,,,36,,,6,6,,,84,207,,23',
',120,,149,79,39,,30,37,34,,87,,36,34,34,34,34,34,,,79,172,,77,37,85',
',,35,,205,205,205,,,,153,,16,13,59,109,,62,13,59,5,,6,,,49,49,37,63',
',120,,8,79,,79,76,111,76,86,58,36,,,,58,57,,,86,,193,,207,193,,57,,',
',13,13,159,,,,153,153,,123,,,,,36,35,5,,34,34,34,34,34,34,34,,,10,34',
'34,34,49,,,6,,159,60,,159,37,49,34,,39,,,217,70,,86,64,87,73,,,21,,87',
'74,,45,,89,35,6,6,,87,6,202,202,9,51,,,,,34,51,60,60,170,170,2,34,90',
'6,34,,,,12,12,,39,,60,85,70,87,,,60,49,,34,36,153,9,34,,24,159,34,34',
'30,6,,,,24,24,,45,,,24,24,,14,34,,,87,,,,79,,,34,,34,87,50,79,,,,6,50',
',49,49,,34,34,34,,,62,,,28,70,12,76,76,62,34,89,34,76,76,70,,35,32,32',
'108,,,,32,32,30,9,,,,,30,50,,41,,45,,,,,,12,,,,87,,,,,,,120,76,,,86',
',,34,,6,,,,108,,205,205,,205,205,6,205,,,70,,,,13,,,13,45,,,,108,,,26',
'24,,87,,104,86,,,26,26,49,,,,26,26,,,6,,34,,,39,,36,70,,115,,60,73,171',
'70,21,,60,74,,,,152,,,6,,76,39,,,,87,79,6,87,,,32,60,76,76,76,76,79',
',,,,6,39,,12,12,34,,62,,6,,6,69,34,,34,,,62,84,,34,,154,,,154,60,,,34',
',,,39,,,45,,,,6,,6,86,87,205,205,205,205,,,,,,,,,,84,,,,6,,152,,39,',
',,102,,26,70,,,34,,,34,,,,,70,76,13,34,,,,,6,39,,,,60,,34,,,,,13,34',
',,23,35,,60,,205,154,,30,,6,,102,102,23,102,,,,,,,30,,,,6,34,34,60,',
',,,,13,34,34,,,,,34,34,,,53,,,,,39,53,13,,,,,,,,,13,,,,,53,,,120,,34',
',120,,53,53,53,,53,,39,34,,,,,,13,49,208,79,,,6,6,6,,,,79,152,,,152',
',,152,,152,53,53,,,53,,,,,,,,,,,,157,,157,,,,,,34,,13,13,120,,34,,,',
',34,34,,,,79,154,34,,154,,39,154,37,154,,,,,6,102,13,,34,53,,,,,53,53',
'53,53,53,,,152,45,152,,152,,152,6,,,34,87,,,13,6,6,6,6,,6,,,,,,,6,34',
'152,,157,,,,13,70,34,34,,6,39,70,,82,82,,,,,154,,154,,154,208,154,,208',
',,208,34,208,34,,,,,,6,6,6,6,,34,34,147,,154,,6,,,53,53,53,53,53,53',
'53,,,,53,53,53,,102,,,,,,102,,,34,53,102,,,34,34,,,34,102,102,,82,,82',
',82,82,,,,,,,155,155,155,208,,208,,208,,208,34,,53,,157,,157,,157,53',
',,53,27,,,,,,27,,,208,,34,,,,,34,53,,82,,53,,,,,53,,157,102,157,,,,27',
',,34,,,,,34,34,56,,,,,,56,,53,,53,,,,,34,,,,,,56,,53,53,53,27,,,,56',
'56,56,,56,155,155,155,155,,155,,,,157,,,,,,,,,,,,,82,157,,157,,157,',
',56,56,,,56,,102,102,,,,,,,,27,,,,,,,157,53,27,155,155,155,155,147,',
',,,,,155,,,,,,,,,147,,,,,,,,,,,,,,56,,,,,56,56,56,56,56,,,,,,,,53,,82',
',,82,,82,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,27,,,27,,,82,,27,82,,,,,,,53',
',,,,,27,,,,53,,,,,,,,,82,,,,,,53,56,56,56,56,56,56,56,,,,56,56,56,,',
',,,,,,,,,56,,,,,,,,,,,,,,,147,,147,,,27,,53,147,27,53,147,,,27,,,,53',
',,56,,,82,,,,56,,53,56,82,82,,66,53,,,,27,66,27,,,,147,147,,56,,,,56',
',,27,27,56,,,,,,82,,53,53,,66,66,66,,,,53,53,,,,,53,53,,56,,56,82,147',
',,,,,,,,,,56,56,56,,,,66,82,,66,,,,,,,,,,,,27,,,,,,,82,,,,,,,,147,,147',
',,,,,,,,,,,,,,,,,,,,,66,82,,,,56,,,,66,,,,,,53,,,,,,53,,,,,53,53,,,',
',,53,,,,,,,,,,,147,,,,,53,,,,,,147,147,,56,,,,,,,,,27,,,,,53,,,,,,147',
',,147,,,,,,,,,53,,,,,,66,,,53,53,,,,,,,,,,147,56,147,,,82,,,,,66,56',
',,53,,53,,,,,,,,,,56,53,53,27,,,27,,,,147,,,,,,,,,147,,,,,,,82,,,,,',
',,,,,,53,53,33,,,,,,33,56,66,,56,,66,,,,66,66,56,65,,,27,,,65,,,53,',
'56,27,27,66,33,,56,27,27,,,,,66,,66,,,,,,,,65,65,65,,53,,66,66,,,,,',
'56,56,,,,,66,,66,56,56,,53,,,56,56,53,53,,,,,65,,,65,,,,,,,,53,,,,,',
',,,,,,,,,,,,,,,,,66,33,,,,,,27,,,33,,,,,,,,27,27,65,,,,,27,,,,65,,,',
',,,,,,,,27,,,,,,,,,,56,,,,,,56,,,,,56,56,27,,,,,56,,,,,,,,,,,,,27,,',
'56,,,,,,27,27,,,,,33,,33,,,33,,,,66,33,56,,,,,,66,,65,,27,,,33,66,,',
',56,,,27,,,,,,56,56,,,,65,,,,,,,,,,,,,,,,,,,,56,,56,,,,27,27,,,27,,',
'56,56,,,,66,,,66,,,,33,,,,33,,,,,33,,27,,,,,,,,65,,,,65,,56,56,65,65',
',,,,,,33,,33,,,27,,,,65,,,,,,,33,33,,65,56,65,,,,,27,,,,,27,27,,,65',
'65,,,,,,,,,,,,65,56,65,,,,,,,,,,,,66,,,,,,,,56,,,66,,56,56,,,,33,,,',
',,,,,,,,56,,,,,,,65,,,,,,,,,,,,,,,,38,,,,,,38,,,,66,,,,,,,,,,,66,66',
',,,,,66,,,,,,38,38,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,38,33,,,,,',
',,,,,,,,66,,,,,65,,,,66,66,,,65,,,,,,,,65,,,,,,,,,,,,,,,66,,,38,,,,',
',,,66,38,,,,,,,,,,33,,,33,,,,,,,,,,,,,,,,65,,66,65,,,,66,66,,,66,,,',
',,,,,,,,,,,,,,,,,,,,,,66,,,33,,,,,,,,,33,33,,,,,33,33,,38,,38,66,,38',
',,66,,38,,,,,,,,,,,,,,38,,,,,66,,,,,66,66,,,,,,,,,,,65,,,,,,,,,,,65',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,33,,38,,,,38,38,,,,33,33,,,,,,33,65',
',,,38,,,,,,,65,65,,38,33,38,,65,,,,,,,,,,,,38,38,,,,,,,33,,,,,38,,38',
',,,,,,,,,,33,65,,,,,,,,33,33,,,,,,,,,65,,,,40,,,,,65,65,,,40,40,40,',
'33,,38,,,,,,,40,40,33,40,,,,,,,65,,,,,,,,40,,,65,,,,,,,,,,,,,,,,,,33',
'33,,,,,,,,,,,,,65,,,,,65,65,,,65,,,,,,,33,,,,,,,,,,,,,,,,,,,65,,,,,',
',,,,33,38,,,,,,,,38,,,,,65,,,38,,65,,33,,,,,33,33,,,,,,,,,,,,,65,,,',
',65,65,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,38,,,,40,40,,,40,40,,,,40,,,,',
',,,,,,,,40,,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
'40,40,40,,,,,40,38,,,,,,,40,,38,38,,,,40,38,38,40,,,,,,,40,,40,,40,40',
',,,,,,,,,,,,,,,38,,,,,,,,,,,38,,,,,,,,,,,40,,40,,,,,,,,,40,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,38,38,,,,,38,38,,,,,,,,,,,,,,,,38,',
',,,,,,,,,,,,,,,,40,,,,,38,,,,,,,,,,,,,,,,,,38,,,,,,,,,38,38,,,,,,,,',
',40,,40,40,40,,,,,,,,,,,,38,,,,,,,,,,,38,,,,,,,,,,,,,,,,40,,,40,,40',
',,,,,,,,,,38,,,,40,38,38,,,38,,,,,40,,,,,,,,,,,40,,,40,,,,,,,38,,,,',
',,,,,,,,,,,,,,40,,,,,38,,,,,38,,,,,,,,,,,,,40,,,,,,,,38,,,,,38,38,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,40,,,40,40,40,40,,,,,40,40',
',,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,40,,,,,40,,,,,,,,,,,,,,,,',
',,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,',
',,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40' ]
        racc_goto_check = arr = ::Array.new(3670, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   181,    48,   135,   nil,    42,    -2,   113,    54,   151,
  -117,   131,  -300,    28,  -511,  -579,  -646,  -697,   nil,  -386,
  -166,    19,   135,   -59,  -161,    76,   -20,  1155,  -171,   -73,
   -51,    14,  -104,  1793,   185,  -210,  -395,   -12,  2251,   -20,
  2638,   -34,  -455,   nil,  -603,   -28,   nil,   nil,   128,  -122,
    74,  -211,  -409,   864,  -354,   nil,  1199,    93,    55,    29,
   -48,   nil,    11,    39,  -267,  1812,  1493,  -534,  -234,   -62,
    11,   nil,   nil,    16,    22,  -272,  -115,    -7,   nil,   -12,
   113,   nil,   823,    98,     6,  -241,    86,   -19,  -346,  -246,
  -436,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    88,   nil,   224,  -189,   -44,   nil,    99,   nil,  -316,  -700,
   nil,  -645,   nil,   nil,   nil,  -340,   nil,    94,   nil,  -458,
    -4,   nil,   nil,  -571,    93,  -218,   109,   109,  -387,   109,
   103,  -600,  -197,  -601,  -784,    42,  -443,  -197,  -438,  -707,
   nil,   nil,   nil,   nil,   nil,   nil,  -757,   723,  -499,  -737,
  -631,   nil,   -49,  -519,     1,   217,  -628,   208,  -731,  -549,
  -587,   nil,  -640,  -739,  -799,  -805,  -157,  -530,   136,  -366,
  -312,   -15,  -192,   nil,   nil,   -80,   -78,   nil,  -481,   nil,
  -293,  -795,  -393,  -500,  -621,   nil,   nil,   136,   137,    27,
   137,   137,  -269,  -264,   138,   141,   145,  -538,  -381,  -379,
   156,  -516,  -324,   nil,   nil,  -244,  -474,  -675,    86,  -468,
  -698,   nil,  -661,  -855,   nil,   nil,  -116,  -475 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   308,     7,   365,   311,
   nil,   nil,   nil,   557,   nil,   nil,   nil,   nil,   307,   309,
   nil,   nil,   nil,   nil,    14,    15,    21,   242,   nil,   nil,
    17,   nil,   440,   243,   339,   nil,   nil,   775,   241,   348,
    24,   nil,   nil,   360,   nil,    25,    26,    27,   nil,   716,
   nil,   nil,   nil,   328,   nil,    28,   325,   455,    35,   nil,
   nil,    37,    40,    39,   nil,   238,   239,   622,   nil,   144,
   463,   143,   146,    90,    91,   nil,   445,   105,    47,    50,
   274,   550,   300,   nil,   456,   nil,   457,   468,   676,   520,
   298,   282,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   283,    65,   nil,    67,   nil,   nil,
    68,   878,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   604,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   287,   276,   724,   845,   613,   879,   746,   869,   nil,   747,
  1018,   914,   575,   nil,   576,   nil,   nil,   577,   nil,   579,
   nil,   824,   nil,   nil,   nil,   585,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   467,   285,   nil,   nil,   694,   nil,   507,
   nil,   nil,   nil,   nil,   nil,    89,    92,    94,   nil,   nil,
   nil,   nil,   nil,   639,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   861,   784,   574,   nil,   578,   589,   591,   592,
   925,   595,   596,   926,   599,   602,   nil,   302 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_8,
  0, 155, :_reduce_9,
  3, 151, :_reduce_10,
  3, 154, :_reduce_11,
  0, 161, :_reduce_12,
  6, 156, :_reduce_13,
  3, 156, :_reduce_14,
  2, 157, :_reduce_15,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_18,
  2, 162, :_reduce_19,
  1, 163, :_reduce_none,
  0, 164, :_reduce_21,
  3, 163, :_reduce_22,
  0, 175, :_reduce_23,
  4, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  2, 153, :_reduce_28,
  3, 153, :_reduce_29,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  3, 153, :_reduce_32,
  3, 153, :_reduce_33,
  4, 153, :_reduce_34,
  1, 153, :_reduce_none,
  3, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  1, 153, :_reduce_none,
  3, 168, :_reduce_40,
  3, 168, :_reduce_41,
  6, 168, :_reduce_42,
  5, 168, :_reduce_43,
  5, 168, :_reduce_44,
  5, 168, :_reduce_45,
  5, 168, :_reduce_46,
  3, 168, :_reduce_47,
  1, 176, :_reduce_48,
  1, 176, :_reduce_none,
  1, 174, :_reduce_none,
  3, 174, :_reduce_51,
  3, 174, :_reduce_52,
  3, 174, :_reduce_53,
  2, 174, :_reduce_54,
  1, 174, :_reduce_none,
  1, 167, :_reduce_56,
  0, 187, :_reduce_57,
  0, 188, :_reduce_58,
  4, 185, :_reduce_59,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 190, :_reduce_none,
  4, 190, :_reduce_63,
  0, 198, :_reduce_64,
  4, 195, :_reduce_65,
  1, 197, :_reduce_66,
  2, 189, :_reduce_67,
  3, 189, :_reduce_68,
  4, 189, :_reduce_69,
  5, 189, :_reduce_70,
  4, 189, :_reduce_71,
  5, 189, :_reduce_72,
  2, 189, :_reduce_73,
  2, 189, :_reduce_74,
  2, 189, :_reduce_75,
  2, 189, :_reduce_76,
  2, 189, :_reduce_77,
  1, 169, :_reduce_none,
  3, 169, :_reduce_79,
  1, 203, :_reduce_none,
  3, 203, :_reduce_81,
  1, 202, :_reduce_82,
  2, 202, :_reduce_83,
  3, 202, :_reduce_84,
  5, 202, :_reduce_85,
  2, 202, :_reduce_86,
  4, 202, :_reduce_87,
  2, 202, :_reduce_88,
  4, 202, :_reduce_89,
  1, 202, :_reduce_90,
  3, 202, :_reduce_91,
  1, 206, :_reduce_none,
  3, 206, :_reduce_93,
  2, 205, :_reduce_94,
  3, 205, :_reduce_95,
  1, 208, :_reduce_96,
  3, 208, :_reduce_97,
  1, 207, :_reduce_98,
  1, 207, :_reduce_99,
  4, 207, :_reduce_100,
  3, 207, :_reduce_101,
  3, 207, :_reduce_102,
  3, 207, :_reduce_103,
  3, 207, :_reduce_104,
  2, 207, :_reduce_105,
  1, 207, :_reduce_106,
  1, 171, :_reduce_107,
  1, 171, :_reduce_108,
  4, 171, :_reduce_109,
  3, 171, :_reduce_110,
  3, 171, :_reduce_111,
  3, 171, :_reduce_112,
  3, 171, :_reduce_113,
  2, 171, :_reduce_114,
  1, 171, :_reduce_115,
  1, 211, :_reduce_116,
  1, 211, :_reduce_none,
  2, 212, :_reduce_118,
  1, 212, :_reduce_119,
  3, 212, :_reduce_120,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_124,
  1, 213, :_reduce_125,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 165, :_reduce_128,
  1, 165, :_reduce_none,
  1, 166, :_reduce_130,
  0, 219, :_reduce_131,
  4, 166, :_reduce_132,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  3, 184, :_reduce_205,
  3, 184, :_reduce_206,
  6, 184, :_reduce_207,
  5, 184, :_reduce_208,
  5, 184, :_reduce_209,
  5, 184, :_reduce_210,
  5, 184, :_reduce_211,
  0, 225, :_reduce_212,
  5, 184, :_reduce_213,
  3, 184, :_reduce_214,
  3, 184, :_reduce_215,
  3, 184, :_reduce_216,
  3, 184, :_reduce_217,
  3, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 184, :_reduce_221,
  3, 184, :_reduce_222,
  4, 184, :_reduce_223,
  2, 184, :_reduce_224,
  2, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  1, 184, :_reduce_none,
  3, 184, :_reduce_231,
  3, 184, :_reduce_232,
  3, 184, :_reduce_233,
  3, 184, :_reduce_234,
  3, 184, :_reduce_235,
  2, 184, :_reduce_236,
  2, 184, :_reduce_237,
  3, 184, :_reduce_238,
  3, 184, :_reduce_239,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  6, 184, :_reduce_243,
  1, 184, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  3, 222, :_reduce_249,
  3, 222, :_reduce_250,
  1, 226, :_reduce_251,
  1, 227, :_reduce_none,
  2, 227, :_reduce_253,
  4, 227, :_reduce_254,
  2, 227, :_reduce_255,
  1, 220, :_reduce_none,
  3, 220, :_reduce_257,
  3, 231, :_reduce_258,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 179, :_reduce_261,
  1, 179, :_reduce_262,
  2, 179, :_reduce_263,
  4, 179, :_reduce_264,
  2, 179, :_reduce_265,
  1, 201, :_reduce_266,
  2, 201, :_reduce_267,
  2, 201, :_reduce_268,
  4, 201, :_reduce_269,
  1, 201, :_reduce_270,
  0, 235, :_reduce_271,
  2, 194, :_reduce_272,
  2, 234, :_reduce_273,
  2, 233, :_reduce_274,
  1, 233, :_reduce_none,
  1, 228, :_reduce_276,
  2, 228, :_reduce_277,
  3, 228, :_reduce_278,
  4, 228, :_reduce_279,
  1, 173, :_reduce_280,
  1, 173, :_reduce_281,
  3, 172, :_reduce_282,
  4, 172, :_reduce_283,
  2, 172, :_reduce_284,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_295,
  0, 270, :_reduce_296,
  4, 223, :_reduce_297,
  2, 223, :_reduce_298,
  0, 271, :_reduce_299,
  0, 272, :_reduce_300,
  5, 223, :_reduce_301,
  3, 223, :_reduce_302,
  3, 223, :_reduce_303,
  2, 223, :_reduce_304,
  3, 223, :_reduce_305,
  0, 273, :_reduce_306,
  4, 223, :_reduce_307,
  1, 223, :_reduce_308,
  4, 223, :_reduce_309,
  3, 223, :_reduce_310,
  1, 223, :_reduce_311,
  5, 223, :_reduce_312,
  4, 223, :_reduce_313,
  3, 223, :_reduce_314,
  2, 223, :_reduce_315,
  1, 223, :_reduce_none,
  2, 223, :_reduce_317,
  2, 223, :_reduce_318,
  6, 223, :_reduce_319,
  6, 223, :_reduce_320,
  4, 223, :_reduce_321,
  4, 223, :_reduce_322,
  5, 223, :_reduce_323,
  4, 223, :_reduce_324,
  6, 223, :_reduce_325,
  0, 274, :_reduce_326,
  0, 275, :_reduce_327,
  7, 223, :_reduce_328,
  0, 276, :_reduce_329,
  0, 277, :_reduce_330,
  0, 278, :_reduce_331,
  9, 223, :_reduce_332,
  0, 279, :_reduce_333,
  0, 280, :_reduce_334,
  6, 223, :_reduce_335,
  0, 281, :_reduce_336,
  6, 223, :_reduce_337,
  0, 282, :_reduce_338,
  0, 283, :_reduce_339,
  9, 223, :_reduce_340,
  1, 223, :_reduce_341,
  1, 223, :_reduce_342,
  1, 223, :_reduce_343,
  1, 223, :_reduce_344,
  1, 178, :_reduce_345,
  1, 245, :_reduce_none,
  1, 251, :_reduce_none,
  1, 254, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 260, :_reduce_none,
  1, 262, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 284, :_reduce_none,
  1, 285, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 159, :_reduce_none,
  1, 289, :_reduce_none,
  1, 246, :_reduce_none,
  1, 200, :_reduce_none,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  2, 252, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 253, :_reduce_none,
  5, 253, :_reduce_371,
  1, 255, :_reduce_none,
  2, 255, :_reduce_373,
  1, 261, :_reduce_none,
  1, 261, :_reduce_375,
  1, 290, :_reduce_none,
  3, 290, :_reduce_377,
  1, 293, :_reduce_378,
  3, 293, :_reduce_379,
  1, 292, :_reduce_380,
  4, 292, :_reduce_381,
  6, 292, :_reduce_382,
  3, 292, :_reduce_383,
  5, 292, :_reduce_384,
  2, 292, :_reduce_385,
  4, 292, :_reduce_386,
  1, 292, :_reduce_387,
  3, 292, :_reduce_388,
  4, 294, :_reduce_389,
  2, 294, :_reduce_390,
  2, 294, :_reduce_391,
  1, 294, :_reduce_392,
  2, 299, :_reduce_393,
  1, 299, :_reduce_none,
  6, 300, :_reduce_395,
  8, 300, :_reduce_396,
  4, 300, :_reduce_397,
  6, 300, :_reduce_398,
  4, 300, :_reduce_399,
  2, 300, :_reduce_400,
  6, 300, :_reduce_401,
  2, 300, :_reduce_402,
  4, 300, :_reduce_403,
  6, 300, :_reduce_404,
  2, 300, :_reduce_405,
  4, 300, :_reduce_406,
  2, 300, :_reduce_407,
  4, 300, :_reduce_408,
  1, 300, :_reduce_409,
  1, 304, :_reduce_410,
  1, 304, :_reduce_411,
  3, 305, :_reduce_412,
  1, 305, :_reduce_413,
  4, 305, :_reduce_414,
  1, 306, :_reduce_none,
  4, 306, :_reduce_416,
  1, 307, :_reduce_417,
  3, 307, :_reduce_418,
  1, 308, :_reduce_419,
  1, 308, :_reduce_none,
  0, 312, :_reduce_421,
  0, 313, :_reduce_422,
  4, 250, :_reduce_423,
  4, 310, :_reduce_424,
  1, 310, :_reduce_425,
  3, 311, :_reduce_426,
  3, 311, :_reduce_427,
  3, 315, :_reduce_428,
  2, 191, :_reduce_429,
  4, 191, :_reduce_430,
  5, 191, :_reduce_431,
  5, 191, :_reduce_432,
  0, 318, :_reduce_433,
  3, 249, :_reduce_434,
  4, 249, :_reduce_435,
  4, 249, :_reduce_436,
  3, 249, :_reduce_437,
  3, 249, :_reduce_438,
  3, 249, :_reduce_439,
  2, 249, :_reduce_440,
  1, 249, :_reduce_441,
  4, 249, :_reduce_442,
  0, 319, :_reduce_443,
  4, 248, :_reduce_444,
  0, 320, :_reduce_445,
  4, 248, :_reduce_446,
  0, 321, :_reduce_447,
  0, 322, :_reduce_448,
  4, 196, :_reduce_449,
  0, 323, :_reduce_450,
  0, 324, :_reduce_451,
  4, 316, :_reduce_452,
  0, 326, :_reduce_453,
  6, 259, :_reduce_454,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  6, 158, :_reduce_457,
  0, 158, :_reduce_458,
  1, 327, :_reduce_459,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  2, 328, :_reduce_462,
  1, 328, :_reduce_none,
  2, 160, :_reduce_464,
  1, 160, :_reduce_none,
  1, 236, :_reduce_466,
  1, 236, :_reduce_467,
  1, 236, :_reduce_none,
  1, 237, :_reduce_469,
  1, 330, :_reduce_470,
  1, 330, :_reduce_none,
  2, 330, :_reduce_472,
  3, 331, :_reduce_473,
  1, 331, :_reduce_474,
  3, 238, :_reduce_475,
  3, 239, :_reduce_476,
  3, 240, :_reduce_477,
  3, 240, :_reduce_478,
  1, 335, :_reduce_479,
  3, 335, :_reduce_480,
  1, 336, :_reduce_none,
  2, 336, :_reduce_482,
  3, 242, :_reduce_483,
  3, 242, :_reduce_484,
  1, 338, :_reduce_485,
  3, 338, :_reduce_486,
  3, 241, :_reduce_487,
  3, 241, :_reduce_488,
  3, 243, :_reduce_489,
  3, 243, :_reduce_490,
  1, 339, :_reduce_491,
  3, 339, :_reduce_492,
  1, 340, :_reduce_493,
  3, 340, :_reduce_494,
  1, 332, :_reduce_495,
  2, 332, :_reduce_496,
  1, 333, :_reduce_497,
  2, 333, :_reduce_498,
  1, 334, :_reduce_499,
  2, 334, :_reduce_500,
  1, 337, :_reduce_501,
  0, 342, :_reduce_502,
  3, 337, :_reduce_503,
  0, 343, :_reduce_504,
  4, 337, :_reduce_505,
  1, 341, :_reduce_506,
  1, 341, :_reduce_507,
  1, 341, :_reduce_508,
  1, 341, :_reduce_none,
  2, 217, :_reduce_510,
  1, 217, :_reduce_511,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  3, 218, :_reduce_516,
  1, 329, :_reduce_none,
  2, 329, :_reduce_518,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_528,
  1, 210, :_reduce_529,
  1, 210, :_reduce_530,
  1, 210, :_reduce_531,
  1, 210, :_reduce_532,
  1, 210, :_reduce_533,
  1, 210, :_reduce_534,
  1, 244, :_reduce_535,
  1, 244, :_reduce_536,
  1, 177, :_reduce_537,
  1, 177, :_reduce_538,
  1, 182, :_reduce_539,
  1, 182, :_reduce_540,
  0, 345, :_reduce_541,
  4, 263, :_reduce_542,
  1, 263, :_reduce_543,
  3, 267, :_reduce_544,
  0, 347, :_reduce_545,
  3, 267, :_reduce_546,
  4, 346, :_reduce_547,
  2, 346, :_reduce_548,
  2, 346, :_reduce_549,
  1, 346, :_reduce_none,
  2, 349, :_reduce_551,
  0, 349, :_reduce_552,
  6, 314, :_reduce_553,
  8, 314, :_reduce_554,
  4, 314, :_reduce_555,
  6, 314, :_reduce_556,
  4, 314, :_reduce_557,
  6, 314, :_reduce_558,
  2, 314, :_reduce_559,
  4, 314, :_reduce_560,
  6, 314, :_reduce_561,
  2, 314, :_reduce_562,
  4, 314, :_reduce_563,
  2, 314, :_reduce_564,
  4, 314, :_reduce_565,
  1, 314, :_reduce_566,
  0, 314, :_reduce_567,
  1, 309, :_reduce_568,
  1, 309, :_reduce_569,
  1, 309, :_reduce_570,
  1, 309, :_reduce_571,
  1, 291, :_reduce_none,
  1, 291, :_reduce_573,
  1, 351, :_reduce_none,
  3, 351, :_reduce_575,
  1, 301, :_reduce_576,
  3, 301, :_reduce_577,
  1, 352, :_reduce_none,
  2, 353, :_reduce_579,
  1, 353, :_reduce_580,
  2, 354, :_reduce_581,
  1, 354, :_reduce_582,
  1, 295, :_reduce_none,
  3, 295, :_reduce_584,
  1, 348, :_reduce_none,
  3, 348, :_reduce_586,
  1, 355, :_reduce_none,
  1, 355, :_reduce_none,
  2, 296, :_reduce_589,
  1, 296, :_reduce_590,
  3, 356, :_reduce_591,
  3, 357, :_reduce_592,
  1, 302, :_reduce_593,
  3, 302, :_reduce_594,
  1, 350, :_reduce_595,
  3, 350, :_reduce_596,
  1, 358, :_reduce_none,
  1, 358, :_reduce_none,
  2, 303, :_reduce_599,
  1, 303, :_reduce_600,
  1, 359, :_reduce_none,
  1, 359, :_reduce_none,
  2, 298, :_reduce_603,
  2, 297, :_reduce_604,
  0, 297, :_reduce_605,
  1, 268, :_reduce_none,
  0, 360, :_reduce_607,
  4, 268, :_reduce_608,
  1, 247, :_reduce_609,
  2, 247, :_reduce_610,
  1, 230, :_reduce_none,
  3, 230, :_reduce_612,
  3, 361, :_reduce_613,
  2, 361, :_reduce_614,
  2, 361, :_reduce_615,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 181, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 204, :_reduce_none,
  2, 180, :_reduce_none,
  0, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 264, :_reduce_640,
  1, 264, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_643,
  0, 150, :_reduce_644 ]

racc_reduce_n = 645

racc_shift_n = 1087

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@3",
  "stmts",
  "stmt_or_begin",
  "@4",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "@27",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      _, _, block = val
                      result = block
                    
    result
end

def _reduce_11(val, _values, result)
                      _, stmt, _ = val
                      result = new_iter s(:preexe), 0, stmt
                    
    result
end

def _reduce_12(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res
                    
    result
end

def _reduce_13(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]
                    
    result
end

def _reduce_14(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_22(val, _values, result)
                      _, _, stmt = val
                      result = stmt
                    
    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME
                      result = self.lexer.lineno
                    
    result
end

def _reduce_24(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_28(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_29(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_30(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val
                      result = new_rescue body, new_resbody(s(:array), resbody)
                    
    result
end

def _reduce_34(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_37(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr
                    
    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_52(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_53(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_54(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

def _reduce_57(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_59(val, _values, result)
                      _, expr, _, _ = val
                      result = expr
                    
    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_65(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_69(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_70(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_71(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_72(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_73(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_74(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_75(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_84(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_85(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_87(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_89(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_90(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_91(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_96(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_109(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_110(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_112(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_113(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_114(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_115(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_119(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_120(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]
                    
    result
end

def _reduce_125(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym
                    
    result
end

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME
                    
    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

def _reduce_205(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_207(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_210(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_211(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]
                    
    result
end

def _reduce_212(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_213(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]
                    
    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn
                    
    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, _, resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody
                      result  = new_rescue(body, new_resbody(s(:array), resbody))
                    
    result
end

def _reduce_258(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_267(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_271(val, _values, result)
                      result = lexer.cmdarg.store true
                    
    result
end

def _reduce_272(val, _values, result)
                      lexer.cmdarg.restore val[0]
                      result = val[1]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_278(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_296(val, _values, result)
                      result = self.lexer.lineno
                      # TODO:
                      # $<val>1 = cmdarg_stack;
                      # CMDARG_SET(0);
                    
    result
end

def _reduce_297(val, _values, result)
                      # TODO: CMDARG_SET($<val>1);
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_298(val, _values, result)
                      # TODO: lex_state = EXPR_ENDARG in between
                      debug20 13, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      result = lexer.cmdarg.store false
                      # result = self.lexer.cmdarg.stack.dup
                      # lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                    
    result
end

def _reduce_301(val, _values, result)
                      _, cmdarg, stmt, _, _, = val
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.restore cmdarg
                      result = stmt
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_303(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_304(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_306(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_308(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_312(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_314(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_315(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 316 omitted

def _reduce_317(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_318(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f
                    
    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t
                    
    result
end

def _reduce_321(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true
                    
    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true
                    
    result
end

def _reduce_323(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_324(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_325(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_331(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_334(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_337(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_338(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = EXPR_FNAME
                    
    result
end

def _reduce_339(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = EXPR_ENDFN # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_340(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_343(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_345(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_380(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_381(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_382(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_383(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_384(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_385(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_386(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_387(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_388(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_389(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_410(val, _values, result)
 result = 0 
    result
end

def _reduce_411(val, _values, result)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:args)
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_417(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_418(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.cmdarg.store(false), self.lexer.lineno]
                    
    result
end

def _reduce_423(val, _values, result)
                      lpar, args, (cmdarg, lineno), body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.lexpop

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      result.line = lineno
                      self.env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_425(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      # TODO: maybe fix lineno to kDO's lineno?
                      result = val[1]
                    
    result
end

def _reduce_429(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_431(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_432(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_443(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_444(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_447(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_448(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_449(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?
                    
    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                    
    result
end

def _reduce_453(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 455 omitted

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_470(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_487(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_494(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_496(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_502(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_503(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG
                    
    result
end

def _reduce_505(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_506(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_507(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_508(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_529(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_530(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_531(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_532(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_533(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_534(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_535(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_537(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_539(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_540(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_541(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true
                    
    result
end

def _reduce_545(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL
                    
    result
end

def _reduce_546(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      result = args val
                    
    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_553(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_554(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_555(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_556(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_557(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_558(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_559(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_560(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_562(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_564(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 574 omitted

def _reduce_575(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_576(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_577(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_580(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_581(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_582(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      result = args val
                    
    result
end

# reduce 587 omitted

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"
                    
    result
end

def _reduce_590(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_591(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_592(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 597 omitted

# reduce 598 omitted

def _reduce_599(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_600(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_604(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_605(val, _values, result)
                      result = nil
                    
    result
end

# reduce 606 omitted

def _reduce_607(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_608(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_609(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_610(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 611 omitted

def _reduce_612(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_613(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_614(val, _values, result)
                      (label, _), arg = val
                      result = s(:array, s(:lit, label.to_sym), arg)
                    
    result
end

def _reduce_615(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

def _reduce_640(val, _values, result)
 yyerrok 
    result
end

# reduce 641 omitted

# reduce 642 omitted

def _reduce_643(val, _values, result)
 yyerrok 
    result
end

def _reduce_644(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
