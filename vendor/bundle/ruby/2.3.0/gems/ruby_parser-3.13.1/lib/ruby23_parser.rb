#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby23Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"
include RubyLexer::State::Values

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-625,650,609,225,226,285,-537,-625,-625,-625,-110,-114,-625,-625,-625',
'-102,-625,-112,589,235,586,585,584,-115,587,-625,-625,-625,-625,-538',
'776,285,482,233,777,658,-625,-625,-93,-625,-625,-625,-625,-625,95,-114',
'-109,-101,861,-108,646,764,96,-79,849,236,-103,-100,-107,-115,850,-109',
'917,-107,609,609,-110,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-621,-102,-625,-625,-625,-108,824,-625,-115,-115',
'-625,287,236,-625,-625,1012,-625,657,-625,285,-625,124,-625,-625,-625',
'-625,-625,-625,-625,-111,-625,-625,-625,-101,-101,128,-102,287,964,-102',
'127,-103,-103,-100,-114,-625,-625,-625,-625,-114,-625,-625,-625,-112',
'-102,-113,-115,-625,-625,-625,-625,-115,-625,-111,-625,-625,-113,-625',
'-101,-105,128,-101,860,-99,609,127,-625,-103,-100,-109,-103,-100,-98',
'-106,-109,-100,-101,-625,-625,609,-625,-625,-625,-625,-625,-103,-100',
'128,128,-110,-111,934,127,127,-110,723,287,-621,225,226,655,225,226',
'-107,-108,887,-276,616,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,-622,-622,-625,-625,-625,939,682,231,594,-636',
'-625,-111,285,-625,281,-625,-111,-212,-625,597,-625,822,-625,-625,-625',
'-625,-625,-625,-625,622,-625,-625,-625,128,-621,-112,639,-113,127,-104',
'-112,654,-113,639,236,-625,-625,831,-625,639,-625,-303,605,604,943,831',
'128,-625,-303,-303,-303,127,-625,-111,-303,-303,236,-303,-625,236,236',
'128,232,-102,-114,-625,127,-433,-110,236,-621,830,1042,741,-625,639',
'598,-303,-303,830,-303,-303,-303,-303,-303,-107,-108,641,640,287,-107',
'-108,-625,946,641,640,796,106,107,948,641,640,652,794,823,950,-618,952',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303',
'952,-625,-303,-303,-303,589,681,586,585,584,-303,587,675,-303,641,640',
'637,639,-303,676,-303,236,-303,-303,-303,-303,-303,-303,-303,594,-303',
'231,-303,106,107,708,231,-523,230,-112,597,958,639,620,-523,-303,-303',
'228,-104,-618,-303,-303,618,-523,108,109,731,-303,-303,-303,-303,-103',
'-303,-113,-303,-303,621,-303,420,-110,-530,-618,731,605,604,233,-112',
'-530,641,640,647,128,-304,880,-619,616,127,-303,-303,-304,-303,-303',
'-303,-303,-303,128,232,731,-304,-532,127,232,-523,641,640,642,-532,598',
'-523,-537,569,676,108,109,236,-523,918,-106,-303,-303,-303,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-115,809,-303,-303,-303',
'-526,681,225,226,-528,-303,639,-526,-303,-538,-304,-528,-619,-303,-98',
'-303,-526,-303,-303,-303,-303,-303,-303,-303,731,-303,-303,-303,231',
'-107,231,-112,231,-303,-619,556,-109,779,-622,669,-303,-303,-303,-303',
'480,-303,781,-523,667,639,731,-99,-303,-109,-523,-523,-523,-303,-113',
'-523,-523,-523,236,-523,256,-526,-108,641,640,637,-526,-523,-533,-523',
'-523,-523,429,-526,-294,-533,976,431,430,-523,-523,-294,-523,-523,-523',
'-523,-523,-303,-303,232,-294,232,253,232,-279,-303,255,254,251,252,-622',
'-212,-529,1063,-303,563,641,640,659,-529,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,-523,-523,-523,256,-536,-523,-523,-523,231',
'-523,-523,-536,554,-523,977,546,-523,-523,-294,-523,-536,-523,-105,-523',
'544,-523,-523,-523,-523,-523,-523,-523,-303,-523,741,-523,589,-114,586',
'585,584,594,587,980,256,983,675,985,-523,-523,-523,-523,597,-523,-625',
'-523,639,-534,987,644,-523,-625,-625,-625,-534,-523,-523,-625,-625,-536',
'-625,-535,566,232,592,568,253,-531,-535,-625,255,254,231,236,-531,605',
'604,-535,-101,1033,-625,-625,989,-625,-625,-625,-625,-625,781,231,634',
'225,226,-110,231,128,479,635,128,566,127,1039,568,127,809,480,550,641',
'640,598,1037,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,290,-535,-625,-625,-625,589,682,586,585,584,-625,587',
'232,-625,128,883,887,236,-625,127,-625,-100,-625,-625,-625,-625,-625',
'-625,-625,232,-625,-625,-625,293,232,589,-109,586,585,584,594,587,231',
'750,566,-625,-625,568,-102,1033,-625,597,-303,566,883,887,565,-625,781',
'-303,-303,-303,-625,-111,-303,-303,-303,547,-303,225,226,605,604,592',
'273,274,1001,1002,-303,-303,-303,540,602,601,605,604,539,236,-303,-303',
'-78,-303,-303,-303,-303,-303,1014,-304,528,-345,526,731,788,523,-304',
'290,-345,232,513,272,271,235,1031,-304,484,-345,483,1034,598,-303,-303',
'-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,849,481',
'-303,-303,-303,256,825,-303,432,427,-303,1040,410,-303,-303,1043,-303',
'256,-303,952,-303,952,-303,-303,-303,-303,-303,-303,-303,-304,-303,-345',
'-303,266,267,952,1048,253,1014,407,404,255,254,251,252,-303,-303,-303',
'-303,253,-303,259,-303,255,254,251,252,-303,-526,257,401,258,-303,-113',
'741,-526,-526,-526,1057,1059,-526,-526,-526,589,-526,586,585,584,594',
'587,1061,1063,-526,1063,-526,-526,-526,908,909,597,377,910,122,123,-526',
'-526,728,-526,-526,-526,-526,-526,589,236,586,585,584,339,587,338,1014',
'592,731,589,731,586,585,584,276,587,602,601,605,604,227,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-622,750,-526',
'-526,-526,-621,-526,-526,236,224,-526,223,750,-526,-526,222,-526,598',
'-526,256,-526,753,-526,-526,-526,-526,-526,-526,-526,952,-526,589,-526',
'586,585,584,1014,587,589,616,586,585,584,594,587,-526,-526,-526,-526',
'731,-526,253,-526,731,597,255,254,-526,-626,731,760,758,-526,-526,756',
'-626,-626,-626,757,750,-626,-626,-626,783,-626,748,592,788,957,746,744',
'742,797,-626,-626,-626,-626,605,604,131,132,133,134,135,-626,-626,798',
'-626,-626,-626,-626,-626,589,799,586,585,584,589,587,586,585,584,589',
'587,586,585,584,741,587,-277,738,598,528,734,731,-626,-626,-626,-626',
'-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,1086,750,-626,-626',
'-626,810,750,-626,728,724,-626,750,723,-626,-626,753,-626,513,-626,559',
'-626,236,-626,-626,-626,-626,-626,-626,-626,513,-626,-626,-626,589,1063',
'586,585,584,594,587,131,132,133,134,135,-626,-626,-626,-626,597,-626',
'-441,-626,1063,712,-93,236,-626,-441,-441,-441,827,-626,-441,-441,-441',
'276,-441,256,236,836,592,838,526,528,427,-441,-441,-441,236,723,236',
'605,604,266,267,236,-441,-441,692,-441,-441,-441,-441,-441,589,290,586',
'585,584,253,587,259,290,255,254,251,252,723,256,257,1005,258,586,585',
'584,598,587,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441',
'-441,-441,236,750,-441,-441,-441,236,878,-441,236,290,-441,887,731,-441',
'-441,236,-441,256,-441,256,-441,256,-441,-441,-441,-441,-441,-441,-441',
'256,-441,-441,-441,1005,290,586,585,584,3,587,131,132,133,134,135,-441',
'-441,-311,-441,674,-441,673,236,666,-311,-311,-311,-441,665,-311,-311',
'-311,-441,-311,256,131,132,133,134,135,-276,-278,663,-311,-311,236,1063',
'656,653,,266,267,,-311,-311,,-311,-311,-311,-311,-311,,,,,,253,,259',
',255,254,251,252,,,,,,,,,,,-311,-311,-311,-311,-311,-311,-311,-311,-311',
'-311,-311,-311,-311,-311,,,-311,-311,-311,,,-311,,293,-311,,,-311,-311',
',-311,,-311,,-311,,-311,-311,-311,-311,-311,-311,-311,,-311,,-311,,',
',,,,,,,,,,-311,-311,-295,-311,,-311,,,,-295,-295,-295,-311,,-295,-295',
'-295,-311,-295,256,,,,,,,,,-295,-295,-295,,,,,266,267,,-295,-295,,-295',
'-295,-295,-295,-295,,,,,,253,,259,,255,254,251,252,,,,,,,,,,,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295',
'-295,,,-295,,,-295,,,-295,-295,,-295,,-295,,-295,,-295,-295,-295,-295',
'-295,-295,-295,,-295,,-295,589,,586,585,584,594,587,,,,,,-295,-295,-295',
'-295,597,-295,-647,-295,,,,,-295,-647,-647,-647,,-295,-647,-647,-647',
',-647,256,,,592,,,,,-647,-647,-647,,,,605,604,266,267,,-647,-647,,-647',
'-647,-647,-647,-647,,,,,,253,,,,255,254,251,252,,,,,,,,,598,,-647,-647',
'-647,-647,-647,-647,-647,-647,-647,-647,-647,-647,-647,-647,,,-647,-647',
'-647,,,-647,,290,-647,,,-647,-647,,-647,,-647,,-647,,-647,-647,-647',
'-647,-647,-647,-647,,-647,-647,-647,,,,,,,,,,,,,-647,-647,-627,-647',
',-647,,,,-627,-627,-627,-647,,-627,-627,-627,-647,-627,,,,,,,,,-627',
'-627,-627,-627,,,,,,,,-627,-627,,-627,-627,-627,-627,-627,,,,,,,,,,',
',,,,,,,,,,,,,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,-627',
'-627,-627,-627,,,-627,-627,-627,,,-627,,,-627,,,-627,-627,,-627,,-627',
',-627,,-627,-627,-627,-627,-627,-627,-627,,-627,-627,-627,589,,586,585',
'584,594,587,,,,,,-627,-627,-627,-627,597,-627,-647,-627,,,,,-627,-647',
'-647,-647,,-627,-647,-647,-647,,-647,,,,592,,,,,-647,-647,,,602,601',
'605,604,,,,-647,-647,,-647,-647,-647,-647,-647,,589,,586,585,584,594',
'587,,,,,,,,,,597,,,,598,,,,,,,,,,,,,-647,,,,,592,,-647,,,,,290,-647',
'602,601,605,604,,,,,,,,,,,,,,,,,-647,-647,,,,,,,,,,,,,-647,,598,,,-647',
'312,85,86,87,12,78,-647,,,79,80,-647,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,670,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,,270,,-251,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,',
',79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,670,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,',
',266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271',
'257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253',
',259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,',
',96,104,236,270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274',
'268,269,264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259',
'48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',270,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
'256,260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,',
',36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258',
',,,103,95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269',
'264,265,,249,250,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,270',
',,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'260,261,262,263,273,274,268,269,264,265,,249,250,,,266,267,,43,,,36',
',,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103',
'95,97,98,99,101,,,,96,104,,270,,,,,66,,,93,100,102,,,108,109,312,85',
'86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,256,260,261,262,263,273,274,268,269,264,265,',
'-648,-648,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251',
'252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263',
'273,274,268,269,264,265,,-648,-648,,,266,267,,43,,,36,,,62,63,,,64,',
'38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,-648,-648,-648,-648,273,274,,,-648,-648,,,,,,266,267,',
'43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,256,260,261,262,263,273,274,,,264,265',
',,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272',
'271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,45,46,44,256,260,261,262,263,273',
'274,268,,264,265,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48',
'255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256',
'-648,-648,-648,-648,273,274,,,-648,-648,,,,,,266,267,,43,,,36,,,62,63',
',,64,,38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,',
'106,107,,45,46,44,256,-648,-648,-648,-648,273,274,,,-648,-648,,,,,,266',
'267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257',
'23,258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,256,-648,-648,-648,-648,273',
'274,,,-648,-648,,,,,,266,267,,43,,,36,,,62,63,,,64,,38,253,,259,48,255',
'254,251,252,272,271,257,23,258,,,,103,95,97,98,99,101,,,,96,104,,,,',
',,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13',
'120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,256,-648',
'-648,-648,-648,273,274,,,-648,-648,,,,,,266,267,,43,,,36,,,62,63,,,64',
',38,253,,259,48,255,254,251,252,272,271,257,23,258,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,256,-648,-648,-648,-648,273,274,,,-648,-648,,,,,,266,267,',
'43,,,36,,,62,63,,,64,,38,253,,259,48,255,254,251,252,272,271,257,23',
'258,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,',
',64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,43,,,316,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22',
',,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,8',
'85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116',
'115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,',
'38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,316,,,62,63,,,64,,38',
',,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,312,85,86,87,12,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49',
'314,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,312,85,86',
'87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,11,49,314,13,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,316,,,62,63,,,64,,38',
',,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,8,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,236,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77',
',,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60',
'112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321',
',,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,10,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',,,335,,,,,,,,,,,,,,,,,,,,991,,,247,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305',
'114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,',
',,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99',
'101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80',
',,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45',
'46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76',
'77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60',
'112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101',
',,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,',
',,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,',
',,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,,,335',
',,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97',
'98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,',
'79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248',
',,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106,107,',
'45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,',
',,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
'305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
'236,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,705,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,11,49,,13,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,',
',,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81',
'82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,314',
'13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,420,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,300',
',48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,247,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,542,,',
'66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331',
'332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,',
',,,,,241,,,247,,,62,63,,,64,,705,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,,,,,,,,,,,,,,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,998,,,247,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,',
'120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,',
',,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,',
',103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,802,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,',
',,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120',
'119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,',
',,,,,,,,,,,,,241,,,247,,,62,63,,,64,,705,,,,48,,,,,,,,246,,,,,103,303',
'97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48',
',,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88',
'31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
'305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104',
',,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82',
'84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,,,,103,303',
'97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63,,,64,,320,,,,,,,,,,',
',,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,247,,,62,63,,,64,,',
',,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,337,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,',
',241,,,247,,,62,63,,,64,,705,,300,,48,,,,,,,,246,,,,,103,303,97,98,99',
'101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106',
'107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,',
',,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103',
'303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117',
'118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300',
',48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,',
'247,,,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96',
'104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49',
',,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,',
',,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,128,,,,,127,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,371',
',,36,,,62,63,,,64,,38,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,',
',83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11',
'49,10,13,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,420,66,,,93,100,102,,,108,109,85,86,87',
',78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118',
',,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,',
'108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31',
'30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,',
',88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34',
'76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,',
',,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,437,,,,48,,,,,',
',,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30',
'116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',437,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93',
'100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77',
',,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,,',
',,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,33',
'34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104',
',,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,,,120,119,121',
'110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,',
',,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101',
',,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83',
',81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,',
',,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302,,300,,48,,,,,,,,246,,',
',,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109',
'85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334',
'116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111,113,,114',
'122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,991,,,247,,,62,63,,,64,,',
',,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102',
',,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,,62,63',
',,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,329,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,325,,,321,,',
'62,63,,,64,,,,,,,,,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,559,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,12,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,',
',,,88,31,30,116,115,117,118,,,22,,,,,,11,49,,13,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,',
',62,63,,,64,,38,,,,48,,,,,,,,23,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,305,114,122,123,,106,107,,45,46,44,,,,,,,,,,',
',,,,,,,,,241,,,247,,,62,63,,,64,,,,300,,48,,,,,,,,246,,,,,103,303,97',
'98,99,101,,,,96,104,,,,,,,66,,306,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,',
',22,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114',
'122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64',
',,,,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306',
'93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76',
'77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,437,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,',
'96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,',
'81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,,,,,,49,,,120',
'119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,',
',,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,22,,',
',,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,23,,,,,103',
'95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,',
'78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117',
'118,,,248,,,,,,,329,,,120,119,121,623,60,112,111,624,,114,122,123,,106',
'107,,,,335,,,,,,,,,,,,,,,,,,,,625,,,247,,,62,63,,,64,,,,,,,,,,,,,,,',
',,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,329,,,120,119,121,623,60,112,111,624,,114,122',
'123,,106,107,,,,335,,,,,,,,,,,,,,,,,,,,625,,,247,,,62,63,,,64,,,,,,',
',,,,,,,,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108',
'109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328',
'334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113',
',114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63',
',,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,',
',93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116',
'115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,',
',,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100',
'102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,',
',,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112',
'111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247',
',,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,',
',,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84',
'331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119',
'121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,',
',,,,,,241,,,247,,,62,63,,,64,,302,,,,48,,,,,,,,246,,,,,103,95,97,98',
'99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79',
'80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115,117,118,,,248,',
',,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46',
'44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,',
'103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86',
'87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123',
',106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48',
',,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,',
',108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88',
'328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111',
'113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62',
'63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96,104,,,,,,,66',
',,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81,82,84,331,332',
'76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,,,120,119,121,110',
'60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241',
',,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95,97,98,99,101,,,,96',
'104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78,,,,79,80,,,,83,,81',
'82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118,,,248,,,,,,,49,',
',120,119,121,110,60,112,111,113,,114,122,123,,106,107,,45,46,44,,,,',
',,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246,,,,,103,95',
'97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85,86,87,,78',
',,,79,80,,,,83,,81,82,84,331,332,76,77,,,,,,88,328,334,116,115,117,118',
',,248,,,,,,,49,,,120,119,121,110,60,112,111,113,,114,122,123,,106,107',
',45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,,,,,48,,,,,,,,246',
',,,,103,95,97,98,99,101,,,,96,104,,,,,,,66,,,93,100,102,,,108,109,85',
'86,87,,78,,,,79,80,,,,83,,81,82,84,33,34,76,77,,,,,,88,31,30,116,115',
'117,118,,,248,,,,,,,49,,,120,119,121,110,60,112,111,113,305,114,122',
'123,,106,107,,45,46,44,,,,,,,,,,,,,,,,,,,,241,,,247,,,62,63,,,64,,302',
',300,,48,,,,,,,,246,,,,,103,303,97,98,99,101,,,,96,104,,,,,,,66,,306',
'93,100,102,,,108,109,189,200,190,213,186,206,196,195,216,217,211,194',
'193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202',
'212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,',
',,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176,161',
'162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196',
'195,216,217,211,194,193,188,214,218,219,198,187,201,205,207,199,192',
',,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182,183,179',
'180,181,139,141,,,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,',
',154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163',
'164,158,156,148,171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189',
'200,190,213,186,206,196,195,216,217,211,194,193,188,214,218,219,198',
'187,201,205,207,199,192,,,,208,215,210,386,385,387,384,185,204,203,',
',,,,184,191,182,183,381,382,383,379,141,112,111,380,,114,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,393,',
',,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,',
',,,,,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217',
'211,194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210',
'209,202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141',
',,140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148',
'171,149,,,177,103,,,,,,,,,,104,,,,,,,,,170,,,,,178,189,200,190,213,186',
'206,196,195,216,217,211,194,193,188,214,218,219,198,187,201,205,207',
'199,192,,,,208,215,210,209,202,212,197,185,204,203,,,,,,184,191,182',
'183,179,180,181,139,141,417,416,140,,418,,,,,,,173,174,,169,151,152',
'153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,,,,,,,,,,,170',
',,,,178,189,200,190,213,186,206,196,195,216,217,211,194,193,188,214',
'218,219,198,187,201,205,207,199,192,,,,208,215,210,209,202,212,197,185',
'204,203,,,,,,184,191,182,183,179,180,181,139,141,,,140,,,,,,,,,173,174',
',169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,,,,,',
',,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,',
',,,,,,,,,,,,,170,,,,,178,189,200,190,213,186,206,196,195,216,217,211',
'194,193,188,214,218,219,198,187,201,205,207,199,192,,,,208,215,210,209',
'202,212,197,185,204,203,,,,,,184,191,182,183,179,180,181,139,141,138',
',140,,,,,,,,,173,174,,169,151,152,153,160,157,159,,,154,155,,,,175,176',
'161,162,,,,,,,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,103,,,,,,,,,,104,,686,464,,,687,,,170,,,,,178,173,174,,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',773,471,,,774,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,771,464,,,772,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,1072,471,,,1073,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,1070,464,,,1071',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,1067,471,,,1066,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',460,464,,,461,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,,177,,,,,,,,,,467,471,,,466,,,,,,170,,',
'173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',589,177,586,585,584,594,587,,,,,511,464,,,512,597,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,592,,,175,176,161,162,,,602',
'601,605,604,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171',
'149,,,177,236,,,,,,,,598,688,471,,,689,,,,,,170,,,173,174,178,169,151',
'152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166',
'165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,511',
'464,,,512,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155',
',,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164',
'158,156,148,171,149,,,177,,,,,,,,,,894,471,,,895,,,,,,170,,,173,174',
'178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290',
',,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,',
',,,,,,,716,464,,,717,,,,,,170,,,173,174,178,169,151,152,153,160,157',
'159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168',
'167,163,164,158,156,148,171,149,,,177,,,,,,,,,,719,471,,,720,,,,,,170',
',,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175,176,161,162',
',,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156,148,171,149',
',,177,,,,,,,,,,686,464,,,687,,,,,,170,,,173,174,178,169,151,152,153',
'160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150',
'172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,,,688,471,,,689',
',,,,,170,,,173,174,178,169,151,152,153,160,157,159,,,154,155,,,,175',
'176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167,163,164,158,156',
'148,171,149,,,177,,,,,,,,,,807,471,,,806,,,,,,170,,,173,174,178,169',
'151,152,153,160,157,159,,,154,155,,,,175,176,161,162,,,,,,290,,,,,,',
',166,165,,150,172,168,167,163,164,158,156,148,171,149,,,177,,,,,,,,',
',804,464,,,805,,,,,,170,,,173,174,178,169,151,152,153,160,157,159,,',
'154,155,,,,175,176,161,162,,,,,,290,,,,,,,,166,165,,150,172,168,167',
'163,164,158,156,148,171,149,,589,177,586,585,584,594,587,589,,586,585',
'584,594,587,,,597,,,,,170,,597,,589,178,586,585,584,594,587,,,,,,,592',
'575,,597,,,,592,,602,601,605,604,,,,602,601,605,604,,,,,589,592,586',
'585,584,594,587,,,,,,605,604,,,597,,,,589,598,586,585,584,594,587,589',
'598,586,585,584,594,587,,,597,,592,,,,,597,,,598,,,605,604,589,,586',
'585,584,594,587,592,,,,,,,592,,597,,605,604,,,,602,601,605,604,,,,,',
'598,,,,,589,592,586,585,584,594,587,,,,602,601,605,604,,598,597,,,,',
'589,598,586,585,584,594,587,589,,586,585,584,594,587,,,597,592,,,,,',
'597,,598,602,601,605,604,589,,586,585,584,594,587,589,592,586,585,584',
'594,587,,592,597,,,605,604,,,597,,,605,604,,,,,598,,,,,,592,,,,,,,592',
',602,601,605,604,,,598,,,605,604,,,598,,,,,,,,,,,,,,,,,,,,,,,598,,,',
',,,598' ]
        racc_action_table = arr = ::Array.new(26261, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'688,404,891,476,476,330,239,688,688,688,771,1040,688,688,688,719,688',
'772,957,22,957,957,957,999,957,688,688,688,688,240,625,65,242,444,625',
'411,688,688,711,688,688,688,688,688,92,621,1084,716,736,369,401,611',
'92,711,727,22,717,843,368,372,727,892,811,239,938,961,1070,688,688,688',
'688,688,688,688,688,688,688,688,688,688,688,719,719,688,688,688,240',
'688,688,242,444,688,330,476,688,688,957,688,411,688,695,688,3,688,688',
'688,688,688,688,688,1072,688,688,688,716,771,891,719,65,891,719,891',
'772,717,843,1040,688,688,688,688,1040,688,807,688,1071,719,1073,999',
'688,807,807,807,999,688,688,807,807,774,807,716,621,611,716,736,369',
'360,611,807,717,843,1084,717,843,368,372,1084,892,716,807,807,361,807',
'807,807,807,807,717,843,938,961,1070,773,835,938,961,1070,842,695,1072',
'791,791,408,726,726,995,996,1017,853,1017,807,807,807,807,807,807,807',
'807,807,807,807,807,807,807,774,1073,807,807,807,854,807,27,977,62,807',
'1072,29,807,27,894,1072,481,807,977,807,686,807,807,807,807,807,807',
'807,373,807,807,807,904,773,1071,651,1073,904,774,1071,408,1073,648',
'62,807,807,837,807,405,807,466,977,977,862,693,360,807,466,466,466,360',
'807,807,466,466,791,466,894,726,863,361,27,773,481,894,361,29,686,1003',
'894,837,1003,864,894,530,977,466,466,693,466,466,466,466,466,995,996',
'651,651,29,995,996,894,868,648,648,651,44,44,869,405,405,405,648,687',
'871,623,872,466,466,466,466,466,466,466,466,466,466,466,466,466,466',
'874,894,466,466,466,753,466,753,753,753,466,753,804,466,530,530,530',
'402,466,461,466,877,466,466,466,466,466,466,466,738,466,19,466,335,335',
'530,370,623,19,687,738,879,397,370,623,466,466,19,466,623,466,806,370',
'623,44,44,882,466,806,806,806,461,466,466,806,806,371,806,367,804,387',
'623,888,738,738,20,461,387,402,402,402,309,547,753,624,366,309,806,806',
'547,806,806,806,806,806,969,19,893,547,382,969,370,623,397,397,397,382',
'738,379,41,354,805,335,335,897,379,826,20,806,806,806,806,806,806,806',
'806,806,806,806,806,806,806,20,914,806,806,806,624,806,785,785,385,806',
'395,624,806,42,547,385,624,806,41,806,624,806,806,806,806,806,806,806',
'901,806,895,806,341,41,627,805,443,895,624,341,826,627,895,443,806,806',
'895,806,341,806,627,110,443,413,902,42,806,914,110,110,110,806,806,110',
'110,110,903,110,503,624,42,395,395,395,380,110,381,110,110,110,138,380',
'326,381,912,138,138,110,110,326,110,110,110,110,110,895,720,341,326',
'627,503,443,913,720,503,503,503,503,720,339,386,1091,720,350,413,413',
'413,386,110,110,110,110,110,110,110,110,110,110,110,110,110,110,343',
'323,110,110,110,324,110,110,323,340,110,920,324,110,110,326,110,323',
'110,339,110,324,110,110,110,110,110,110,110,720,110,921,110,1043,339',
'1043,1043,1043,1043,1043,923,488,924,460,925,110,110,110,110,1043,110',
'467,110,399,383,927,399,110,467,467,467,383,110,110,467,467,323,467',
'322,572,324,1043,572,488,384,322,467,488,488,990,928,384,1043,1043,322',
'460,990,467,467,929,467,467,467,467,467,990,238,389,17,17,460,997,365',
'238,389,5,733,365,997,733,5,671,238,336,399,399,1043,997,467,467,467',
'467,467,467,467,467,467,467,467,467,467,467,334,322,467,467,467,880',
'467,880,880,880,467,880,990,467,900,1050,1050,329,467,900,467,671,467',
'467,467,467,467,467,467,238,467,467,467,328,997,744,671,744,744,744',
'744,744,1032,880,353,467,467,353,467,1032,467,744,689,352,759,759,352',
'467,1032,689,689,689,467,467,689,689,689,325,689,359,359,741,741,744',
'47,47,941,942,689,689,689,319,744,744,744,744,318,317,689,689,315,689',
'689,689,689,689,959,777,301,50,298,968,975,297,777,286,50,1032,282,47',
'47,248,988,777,244,50,243,991,744,689,689,689,689,689,689,689,689,689',
'689,689,689,689,689,993,241,689,689,689,502,689,689,220,136,689,998',
'102,689,689,1007,689,507,689,1008,689,1009,689,689,689,689,689,689,689',
'777,689,50,689,507,507,1010,1011,502,1013,101,100,502,502,502,502,689',
'689,689,689,507,689,507,689,507,507,507,507,689,113,507,99,507,689,689',
'1022,113,113,113,1025,1026,113,113,113,742,113,742,742,742,742,742,1027',
'1028,113,1030,113,113,113,792,792,742,73,792,792,792,113,113,1036,113',
'113,113,113,113,1012,49,1012,1012,1012,43,1012,40,1049,742,1054,750',
'1055,750,750,750,25,750,742,742,742,742,18,113,113,113,113,113,113,113',
'113,113,113,113,113,113,113,1066,1012,113,113,113,1067,113,113,1069',
'16,113,15,750,113,113,13,113,742,113,487,113,750,113,113,113,113,113',
'113,113,1075,113,878,113,878,878,878,1076,878,746,614,746,746,746,746',
'746,113,113,113,113,615,113,487,113,613,746,487,487,113,471,612,608',
'606,113,113,599,471,471,471,603,878,471,471,471,629,471,591,746,632',
'878,582,581,580,655,471,471,471,471,746,746,562,562,562,562,562,471',
'471,658,471,471,471,471,471,1014,660,1014,1014,1014,592,1014,592,592',
'592,1048,592,1048,1048,1048,578,1048,664,577,746,573,570,561,471,471',
'471,471,471,471,471,471,471,471,471,471,471,471,1080,1014,471,471,471',
'672,592,471,560,553,471,1048,551,471,471,592,471,677,471,548,471,543',
'471,471,471,471,471,471,471,683,471,471,471,1061,1081,1061,1061,1061',
'1061,1061,9,9,9,9,9,471,471,471,471,1061,471,30,471,1082,541,538,690',
'471,30,30,30,691,471,30,30,30,694,30,557,537,697,1061,699,702,704,536',
'30,30,30,520,713,715,1061,1061,557,557,519,30,30,508,30,30,30,30,30',
'958,718,958,958,958,557,958,557,721,557,557,557,557,722,725,557,1042',
'557,1042,1042,1042,1061,1042,30,30,30,30,30,30,30,30,30,30,30,30,30',
'30,732,958,30,30,30,737,752,30,754,30,30,761,767,30,30,770,30,492,30',
'491,30,490,30,30,30,30,30,30,30,489,30,30,30,943,468,943,943,943,1,943',
'535,535,535,535,535,30,30,31,30,459,30,458,455,441,31,31,31,30,438,31',
'31,31,30,31,494,313,313,313,313,313,436,801,433,31,31,803,1083,410,407',
',494,494,,31,31,,31,31,31,31,31,,,,,,494,,494,,494,494,494,494,,,,,',
',,,,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31',
',,31,31,,31,,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,,31,31',
'60,31,,31,,,,60,60,60,31,,60,60,60,31,60,493,,,,,,,,,60,60,60,,,,,493',
'493,,60,60,,60,60,60,60,60,,,,,,493,,493,,493,493,493,493,,,,,,,,,,',
'60,60,60,60,60,60,60,60,60,60,60,60,60,60,,,60,60,60,,,60,,,60,,,60',
'60,,60,,60,,60,,60,60,60,60,60,60,60,,60,,60,1063,,1063,1063,1063,1063',
'1063,,,,,,60,60,60,60,1063,60,462,60,,,,,60,462,462,462,,60,462,462',
'462,,462,495,,,1063,,,,,462,462,462,,,,1063,1063,495,495,,462,462,,462',
'462,462,462,462,,,,,,495,,,,495,495,495,495,,,,,,,,,1063,,462,462,462',
'462,462,462,462,462,462,462,462,462,462,462,,,462,462,462,,,462,,462',
'462,,,462,462,,462,,462,,462,,462,462,462,462,462,462,462,,462,462,462',
',,,,,,,,,,,,462,462,472,462,,462,,,,472,472,472,462,,472,472,472,462',
'472,,,,,,,,,472,472,472,472,,,,,,,,472,472,,472,472,472,472,472,,,,',
',,,,,,,,,,,,,,,,,,,472,472,472,472,472,472,472,472,472,472,472,472,472',
'472,,,472,472,472,,,472,,,472,,,472,472,,472,,472,,472,,472,472,472',
'472,472,472,472,,472,472,472,575,,575,575,575,575,575,,,,,,472,472,472',
'472,575,472,510,472,,,,,472,510,510,510,,472,510,510,510,,510,,,,575',
',,,,510,510,,,575,575,575,575,,,,510,510,,510,510,510,510,510,,1057',
',1057,1057,1057,1057,1057,,,,,,,,,,1057,,,,575,,,,,,,,,,,,,510,,,,,1057',
',510,,,,,510,510,1057,1057,1057,1057,,,,,,,,,,,,,,,,,510,510,,,,,,,',
',,,,,510,,1057,,,510,610,610,610,610,610,610,510,,,610,610,510,,,610',
',610,610,610,610,610,610,610,,,,,,610,610,610,610,610,610,610,,,610',
',,,,448,610,610,610,610,610,610,610,610,610,610,610,610,,610,610,610',
',610,610,,610,610,610,448,448,448,448,448,448,448,448,448,448,448,,448',
'448,,,448,448,,610,,,610,,,610,610,,,610,,610,448,,448,610,448,448,448',
'448,448,448,448,610,448,,,,610,610,610,610,610,610,,,,610,610,,448,',
'448,,,610,,,610,610,610,,,610,610,935,935,935,935,935,935,,,,935,935',
',,,935,,935,935,935,935,935,935,935,,,,,,935,935,935,935,935,935,935',
',,935,,,,,454,935,935,935,935,935,935,935,935,935,935,935,935,,935,935',
'935,,935,935,,935,935,935,454,454,454,454,454,454,454,454,454,454,454',
',454,454,,,454,454,,935,,,935,,,935,935,,,935,,935,454,,454,935,454',
'454,454,454,454,454,454,935,454,,,,935,935,935,935,935,935,,,,935,935',
',454,,,,,935,,,935,935,935,,,935,935,775,775,775,775,775,775,,,,775',
'775,,,,775,,775,775,775,775,775,775,775,,,,,,775,775,775,775,775,775',
'775,,,775,,,,,,775,775,775,775,775,775,775,775,775,775,775,775,,775',
'775,775,,775,775,,775,775,775,506,506,506,506,506,506,506,506,506,506',
'506,,506,506,,,506,506,,775,,,775,,,775,775,,,775,,775,506,,506,775',
'506,506,506,506,506,506,506,775,506,,,,775,775,775,775,775,775,,,,775',
'775,506,506,,,,,775,,,775,775,775,,,775,775,793,793,793,793,793,793',
',,,793,793,,,,793,,793,793,793,793,793,793,793,,,,,,793,793,793,793',
'793,793,793,,,793,,,,,,793,793,793,793,793,793,793,793,793,793,793,793',
',793,793,793,,793,793,,793,793,793,919,919,919,919,919,919,919,919,919',
'919,919,,919,919,,,919,919,,793,,,793,,,793,793,,,793,,793,919,,919',
'793,919,919,919,919,919,919,919,793,919,,,,793,793,793,793,793,793,',
',,793,793,,919,,,,,793,,,793,793,793,,,793,793,607,607,607,607,607,607',
',,,607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607,607,607',
'607,607,607,,,607,,,,,,607,607,607,607,607,607,607,607,607,607,607,607',
',607,607,607,,607,607,,607,607,607,808,808,808,808,808,808,808,808,808',
'808,808,,808,808,,,808,808,,607,,,607,,,607,607,,,607,,607,808,,808',
'607,808,808,808,808,808,808,808,607,808,,,,607,607,607,607,607,607,',
',,607,607,,808,,,,,607,,,607,607,607,,,607,607,860,860,860,860,860,860',
',,,860,860,,,,860,,860,860,860,860,860,860,860,,,,,,860,860,860,860',
'860,860,860,,,860,,,,,,860,860,860,860,860,860,860,860,860,860,860,860',
',860,860,860,,860,860,,860,860,860,24,24,24,24,24,24,24,24,24,24,24',
',24,24,,,24,24,,860,,,860,,,860,860,,,860,,860,24,,24,860,24,24,24,24',
'24,24,24,860,24,,,,860,860,860,860,860,860,,,,860,860,,24,,,,,860,,',
'860,860,860,,,860,860,898,898,898,898,898,898,,,,898,898,,,,898,,898',
'898,898,898,898,898,898,,,,,,898,898,898,898,898,898,898,,,898,,,,,',
'898,898,898,898,898,898,898,898,898,898,898,898,,898,898,898,,898,898',
',898,898,898,558,558,558,558,558,558,558,558,558,558,558,,558,558,,',
'558,558,,898,,,898,,,898,898,,,898,,898,558,,558,898,558,558,558,558',
'558,558,558,898,558,,,,898,898,898,898,898,898,,,,898,898,,558,,,,,898',
',,898,898,898,,,898,898,851,851,851,851,851,851,,,,851,851,,,,851,,851',
'851,851,851,851,851,851,,,,,,851,851,851,851,851,851,851,,,851,,,,,',
'851,851,851,851,851,851,851,851,851,851,851,851,,851,851,851,,851,851',
',851,851,851,295,295,295,295,295,295,295,295,295,295,295,,295,295,,',
'295,295,,851,,,851,,,851,851,,,851,,851,295,,295,851,295,295,295,295',
'295,295,295,851,295,,,,851,851,851,851,851,851,,,,851,851,,295,,,,,851',
',,851,851,851,,,851,851,222,222,222,222,222,222,,,,222,222,,,,222,,222',
'222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,',
'222,222,222,222,222,222,222,222,222,222,222,222,,222,222,222,,222,222',
',222,222,222,486,486,486,486,486,486,486,486,486,486,486,,486,486,,',
'486,486,,222,,,222,,,222,222,,,222,,222,486,,486,222,486,486,486,486',
'486,486,486,222,486,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222',
',,222,222,222,,,222,222,965,965,965,965,965,965,,,,965,965,,,,965,,965',
'965,965,965,965,965,965,,,,,,965,965,965,965,965,965,965,,,965,,,,,',
'965,965,965,965,965,965,965,965,965,965,965,965,,965,965,965,,965,965',
',965,965,965,485,485,485,485,485,485,485,485,485,485,485,,485,485,,',
'485,485,,965,,,965,,,965,965,,,965,,965,485,,485,965,485,485,485,485',
'485,485,485,965,485,,,,965,965,965,965,965,965,,,,965,965,,,,,,,965',
',,965,965,965,,,965,965,994,994,994,994,994,994,,,,994,994,,,,994,,994',
'994,994,994,994,994,994,,,,,,994,994,994,994,994,994,994,,,994,,,,,',
'994,994,994,994,994,994,994,994,994,994,994,994,,994,994,994,,994,994',
',994,994,994,499,499,499,499,499,499,499,,,499,499,,,,,,499,499,,994',
',,994,,,994,994,,,994,,994,499,,499,994,499,499,499,499,499,499,499',
'994,499,,,,994,994,994,994,994,994,,,,994,994,,,,,,,994,,,994,994,994',
',,994,994,347,347,347,347,347,347,,,,347,347,,,,347,,347,347,347,347',
'347,347,347,,,,,,347,347,347,347,347,347,347,,,347,,,,,,347,347,347',
'347,347,347,347,347,347,347,347,347,,347,347,347,,347,347,,347,347,347',
'504,504,504,504,504,504,504,,,504,504,,,,,,504,504,,347,,,347,,,347',
'347,,,347,,347,504,,504,347,504,504,504,504,504,504,504,347,504,,,,347',
'347,347,347,347,347,,,,347,347,,,,,,,347,,,347,347,347,,,347,347,363',
'363,363,363,363,363,,,,363,363,,,,363,,363,363,363,363,363,363,363,',
',,,,363,363,363,363,363,363,363,,,363,,,,,,363,363,363,363,363,363,363',
'363,363,363,363,363,,363,363,363,,363,363,,363,363,363,505,505,505,505',
'505,505,505,505,,505,505,,,,,,505,505,,363,,,363,,,363,363,,,363,,363',
'505,,505,363,505,505,505,505,505,505,505,363,505,,,,363,363,363,363',
'363,363,,,,363,363,,,,,,,363,,,363,363,363,,,363,363,1021,1021,1021',
'1021,1021,1021,,,,1021,1021,,,,1021,,1021,1021,1021,1021,1021,1021,1021',
',,,,,1021,1021,1021,1021,1021,1021,1021,,,1021,,,,,,1021,1021,1021,1021',
'1021,1021,1021,1021,1021,1021,1021,1021,,1021,1021,1021,,1021,1021,',
'1021,1021,1021,496,496,496,496,496,496,496,,,496,496,,,,,,496,496,,1021',
',,1021,,,1021,1021,,,1021,,1021,496,,496,1021,496,496,496,496,496,496',
'496,1021,496,,,,1021,1021,1021,1021,1021,1021,,,,1021,1021,,,,,,,1021',
',,1021,1021,1021,,,1021,1021,1020,1020,1020,1020,1020,1020,,,,1020,1020',
',,,1020,,1020,1020,1020,1020,1020,1020,1020,,,,,,1020,1020,1020,1020',
'1020,1020,1020,,,1020,,,,,,1020,1020,1020,1020,1020,1020,1020,1020,1020',
'1020,1020,1020,,1020,1020,1020,,1020,1020,,1020,1020,1020,500,500,500',
'500,500,500,500,,,500,500,,,,,,500,500,,1020,,,1020,,,1020,1020,,,1020',
',1020,500,,500,1020,500,500,500,500,500,500,500,1020,500,,,,1020,1020',
'1020,1020,1020,1020,,,,1020,1020,,,,,,,1020,,,1020,1020,1020,,,1020',
'1020,936,936,936,936,936,936,,,,936,936,,,,936,,936,936,936,936,936',
'936,936,,,,,,936,936,936,936,936,936,936,,,936,,,,,,936,936,936,936',
'936,936,936,936,936,936,936,936,,936,936,936,,936,936,,936,936,936,497',
'497,497,497,497,497,497,,,497,497,,,,,,497,497,,936,,,936,,,936,936',
',,936,,936,497,,497,936,497,497,497,497,497,497,497,936,497,,,,936,936',
'936,936,936,936,,,,936,936,,,,,,,936,,,936,936,936,,,936,936,247,247',
'247,247,247,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,',
'247,247,247,247,247,247,247,,,247,,,,,,247,247,247,247,247,247,247,247',
'247,247,247,247,,247,247,247,,247,247,,247,247,247,498,498,498,498,498',
'498,498,,,498,498,,,,,,498,498,,247,,,247,,,247,247,,,247,,247,498,',
'498,247,498,498,498,498,498,498,498,247,498,,,,247,247,247,247,247,247',
',,,247,247,,,,,,,247,,,247,247,247,,,247,247,1015,1015,1015,1015,1015',
'1015,,,,1015,1015,,,,1015,,1015,1015,1015,1015,1015,1015,1015,,,,,,1015',
'1015,1015,1015,1015,1015,1015,,,1015,,,,,,1015,1015,1015,1015,1015,1015',
'1015,1015,1015,1015,1015,1015,,1015,1015,1015,,1015,1015,,1015,1015',
'1015,501,501,501,501,501,501,501,,,501,501,,,,,,501,501,,1015,,,1015',
',,1015,1015,,,1015,,1015,501,,501,1015,501,501,501,501,501,501,501,1015',
'501,,,,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,,,,1015,,,1015',
'1015,1015,,,1015,1015,861,861,861,861,861,861,,,,861,861,,,,861,,861',
'861,861,861,861,861,861,,,,,,861,861,861,861,861,861,861,,,861,,,,,',
'861,861,861,861,861,861,861,861,861,861,861,861,,861,861,861,,861,861',
',861,861,861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861,861,,,861,,861,,,,861',
',,,,,,,861,,,,,861,861,861,861,861,861,,,,861,861,,,,,,,861,,,861,861',
'861,,,861,861,316,316,316,316,316,316,,,,316,316,,,,316,,316,316,316',
'316,316,316,316,,,,,,316,316,316,316,316,316,316,,,316,,,,,,316,316',
'316,316,316,316,316,316,316,316,316,316,,316,316,316,,316,316,,316,316',
'316,,,,,,,,,,,,,,,,,,,,316,,,316,,,316,316,,,316,,316,,,,316,,,,,,,',
'316,,,,,316,316,316,316,316,316,,,,316,316,,,,,,,316,,,316,316,316,',
',316,316,887,887,887,887,887,887,,,,887,887,,,,887,,887,887,887,887',
'887,887,887,,,,,,887,887,887,887,887,887,887,,,887,,,,,,887,887,887',
'887,887,887,887,887,887,887,887,887,,887,887,887,,887,887,,887,887,887',
',,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,887,,,,887,,,,,,,,887',
',,,,887,887,887,887,887,887,,,,887,887,,,,,,,887,,,887,887,887,,,887',
'887,427,427,427,427,427,427,,,,427,427,,,,427,,427,427,427,427,427,427',
'427,,,,,,427,427,427,427,427,427,427,,,427,,,,,,427,427,427,427,427',
'427,427,427,427,427,427,427,,427,427,427,,427,427,,427,427,427,,,,,',
',,,,,,,,,,,,,,427,,,427,,,427,427,,,427,,427,,,,427,,,,,,,,427,,,,,427',
'427,427,427,427,427,,,,427,427,,,,,,,427,,,427,427,427,,,427,427,364',
'364,364,364,364,364,,,,364,364,,,,364,,364,364,364,364,364,364,364,',
',,,,364,364,364,364,364,364,364,,,364,,,,,,364,364,364,364,364,364,364',
'364,364,364,364,364,,364,364,364,,364,364,,364,364,364,,,,,,,,,,,,,',
',,,,,,364,,,364,,,364,364,,,364,,364,,,,364,,,,,,,,364,,,,,364,364,364',
'364,364,364,,,,364,364,,,,,,,364,,,364,364,364,,,364,364,832,832,832',
'832,832,832,,,,832,832,,,,832,,832,832,832,832,832,832,832,,,,,,832',
'832,832,832,832,832,832,,,832,,,,,,832,832,832,832,832,832,832,832,832',
'832,832,832,,832,832,832,,832,832,,832,832,832,,,,,,,,,,,,,,,,,,,,832',
',,832,,,832,832,,,832,,832,,,,832,,,,,,,,832,,,,,832,832,832,832,832',
'832,,,,832,832,,,,,,,832,,,832,832,832,,,832,832,321,321,321,321,321',
'321,,,,321,321,,,,321,,321,321,321,321,321,321,321,,,,,,321,321,321',
'321,321,321,321,,,321,,,,,,321,321,321,321,321,321,321,321,321,321,321',
'321,,321,321,321,,321,321,,321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321',
',,321,321,,,321,,321,,,,321,,,,,,,,321,,,,,321,321,321,321,321,321,',
',,321,321,,,,,,,321,,,321,321,321,,,321,321,787,787,787,787,787,787',
',,,787,787,,,,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787',
'787,787,787,,,787,,,,,,787,787,787,787,787,787,787,787,787,787,787,787',
',787,787,787,,787,787,,787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787',
'787,,,787,,787,,,,787,,,,,,,,787,,,,,787,787,787,787,787,787,,,,787',
'787,,,,,,,787,,,787,787,787,,,787,787,786,786,786,786,786,786,,,,786',
'786,,,,786,,786,786,786,786,786,786,786,,,,,,786,786,786,786,786,786',
'786,,,786,,,,,,786,786,786,786,786,786,786,786,786,786,786,786,,786',
'786,786,,786,786,,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786',
',,786,,786,,,,786,,,,,,,,786,,,,,786,786,786,786,786,786,,,,786,786',
',,,,,,786,,,786,786,786,,,786,786,36,36,36,36,36,36,,,,36,36,,,,36,',
'36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,36,36',
'36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,,,,,,,,,,,,,,,,,',
',,36,,,36,,,36,36,,,36,,36,,,,36,,,,,,,,36,,,,,36,36,36,36,36,36,,,',
'36,36,,,,,,,36,,,36,36,36,,,36,36,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2',
'2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2',
',2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2',
'2,2,2,,,,2,2,,,,,,,2,,,2,2,2,,,2,2,595,595,595,,595,,,,595,595,,,,595',
',595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595',
',,,,,,595,,,595,595,595,595,595,595,595,595,,595,595,595,,595,595,,595',
'595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595,,,,,,595,,,,,,',
',595,,,,,595,595,595,595,595,595,,,,595,595,,,,,,,595,,,595,595,595',
',,595,595,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233',
'233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233',
'233,233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,',
',,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233',
'233,233,,,,233,233,,,,,,,233,,,233,233,233,,,233,233,234,234,234,,234',
',,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234',
'234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234',
'234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234',
',,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234',
',,234,234,234,,,234,234,235,235,235,,235,,,,235,235,,,,235,,235,235',
'235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235',
',,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,235',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,',
',235,235,235,235,235,235,,,,235,235,235,,,,,,235,,,235,235,235,,,235',
'235,550,550,550,,550,,,,550,550,,,,550,,550,550,550,550,550,550,550',
',,,,,550,550,550,550,550,550,550,,,550,,,,,,,550,,,550,550,550,550,550',
'550,550,550,,550,550,550,,550,550,,,,550,,,,,,,,,,,,,,,,,,,,550,,,550',
',,550,550,,,550,,,,,,,,,,,,,,,,,,,550,550,550,550,550,550,,,,550,550',
',,,,,,550,,,550,550,550,,,550,550,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8',
'8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8',
'8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,681,681,681,,681,,,,681,681,,,,681',
',681,681,681,681,681,681,681,,,,,,681,681,681,681,681,681,681,,,681',
',,,,,,681,,,681,681,681,681,681,681,681,681,,681,681,681,,681,681,,681',
'681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,,681,,,,,,681,,,,,,',
',681,,,,,681,681,681,681,681,681,,,,681,681,,,,,,,681,,,681,681,681',
',,681,681,989,989,989,,989,,,,989,989,,,,989,,989,989,989,989,989,989',
'989,,,,,,989,989,989,989,989,989,989,,,989,,,,,,,989,,,989,989,989,989',
'989,989,989,989,,989,989,989,,989,989,,,,989,,,,,,,,,,,,,,,,,,,,989',
',,989,,,989,989,,,989,,,,,,,,,,,,,,,,,,,989,989,989,989,989,989,,,,989',
'989,,,,,,,989,,,989,989,989,,,989,989,246,246,246,,246,,,,246,246,,',
',246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,',
',246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246',
',246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,',
',,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246',
'246,,,246,246,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544',
'544,544,,,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544',
'544,544,544,544,544,544,544,544,544,,544,544,,544,544,544,,,,,,,,,,',
',,,,,,,,,544,,,544,,,544,544,,,544,,544,,544,,544,,,,,,,,544,,,,,544',
'544,544,544,544,544,,,,544,544,,,,,,,544,,544,544,544,544,,,544,544',
'249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249,,,,',
',249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249',
'249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,',
'249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249',
',,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250,,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250,',
'250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,',
',250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251,251,252',
'252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252',
',,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252',
'252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253,253,,',
',253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,',
',253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253',
',253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,',
',,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253',
'253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,',
',,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254',
'254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255,255,255',
',255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,',
',,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,,,256,,256',
'256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,',
',256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256',
'256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256',
',,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256',
'256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257',
',,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,',
'258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,',
',258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,',
',,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259,259,260',
'260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260',
'260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260',
'260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260',
',,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260',
'260,,,,,,,260,,,260,260,260,,,260,260,261,261,261,,261,,,,261,261,,',
',261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,',
',261,,,,,,,261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261',
',261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,',
',,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,,,,,,,261,,,261,261',
'261,,,261,261,262,262,262,,262,,,,262,262,,,,262,,262,262,262,262,262',
'262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262',
'262,262,262,262,262,,262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,',
',,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,262,,,,,262,262,262',
'262,262,262,,,,262,262,,,,,,,262,,,262,262,262,,,262,262,263,263,263',
',263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263,263',
'263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263,,263',
'263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263',
',,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263,,,',
',,,263,,,263,263,263,,,263,263,264,264,264,,264,,,,264,264,,,,264,,264',
'264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,',
',264,,,264,264,264,264,264,264,264,264,,264,264,264,,264,264,,264,264',
'264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,264',
',,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,,,264,264,264,,,264',
'264,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265',
',,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265',
'265,265,265,,265,265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265',
',,265,,,265,265,,,265,,,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265',
',,,265,265,,,,,,,265,,,265,265,265,,,265,265,266,266,266,,266,,,,266',
'266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266',
'266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266,,266,266,266,',
'266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,',
',,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,',
',266,266,266,,,266,266,267,267,267,,267,,,,267,267,,,,267,,267,267,267',
'267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267',
'267,267,267,267,267,267,267,,267,267,267,,267,267,,267,267,267,,,,,',
',,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267,,,,,,,,267,,,,,267',
'267,267,267,267,267,,,,267,267,,,,,,,267,,,267,267,267,,,267,267,268',
'268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268',
'268,,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268',
'268,,,,,,,268,,,268,268,268,,,268,268,269,269,269,,269,,,,269,269,,',
',269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,',
',269,,,,,,,269,,,269,269,269,269,269,269,269,269,,269,269,269,,269,269',
',269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,,,,,269,',
',,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,,,269,269',
'269,,,269,269,270,270,270,,270,,,,270,270,,,,270,,270,270,270,270,270',
'270,270,,,,,,270,270,270,270,270,270,270,,,270,,,,,,,270,,,270,270,270',
'270,270,270,270,270,,270,270,270,,270,270,,270,270,270,,,,,,,,,,,,,',
',,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,,,270,,,,,270,270,270',
'270,270,270,,,,270,270,,,,,,,270,,,270,270,270,,,270,270,275,275,275',
',275,,,,275,275,,,,275,,275,275,275,275,275,275,275,,,,,,275,275,275',
'275,275,275,275,,,275,,,,,,,275,,,275,275,275,275,275,275,275,275,,275',
'275,275,,275,275,,275,275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275',
',,275,,,,,,275,,,,,,,,275,,,,,275,275,275,275,275,275,,,,275,275,,,',
',,,275,,,275,275,275,,,275,275,682,682,682,,682,,,,682,682,,,,682,,682',
'682,682,682,682,682,682,,,,,,682,682,682,682,682,682,682,,,682,,,,,',
',682,,,682,682,682,682,682,682,682,682,,682,682,682,,682,682,,682,682',
'682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,,682,,,,,,682,,,,,,,,682',
',,,,682,682,682,682,682,682,,,,682,682,,,,,,,682,,,682,682,682,,,682',
'682,283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283',
',,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283',
'283,283,283,283,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,',
',283,,,283,,,283,283,,,283,,283,,283,,283,,,,,,,,283,,,,,283,283,283',
'283,283,283,,,,283,283,,,,,,,283,,283,283,283,283,,,283,283,542,542',
'542,,542,,,,542,542,,,,542,,542,542,542,542,542,542,542,,,,,,542,542',
'542,542,542,542,542,,,542,,,,,,,542,,,542,542,542,542,542,542,542,542',
',542,542,542,,542,542,,,,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542',
',,542,,,,,,,,,,,,,,,,,,,542,542,542,542,542,542,,,,542,542,,,,,,,542',
',,542,542,542,,,542,542,290,290,290,,290,,,,290,290,,,,290,,290,290',
'290,290,290,290,290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290',
',,290,290,290,290,290,290,290,290,290,290,290,290,,290,290,,290,290',
'290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,290,,290,,290,,,,',
',,,290,,,,,290,290,290,290,290,290,,,,290,290,,,,,,,290,,290,290,290',
'290,,,290,290,293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293',
'293,293,,,,,,293,293,293,293,293,293,293,,,293,,,,,,,293,,,293,293,293',
'293,293,293,293,293,293,293,293,293,,293,293,,293,293,293,,,,,,,,,,',
',,,,,,,,,293,,,293,,,293,293,,,293,,293,,293,,293,,,,,,,,293,,,,,293',
'293,293,293,293,293,,,,293,293,293,,,,,,293,,293,293,293,293,,,293,293',
'300,300,300,,300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,',
',300,300,300,300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300',
'300,300,,300,300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,',
'300,,,300,300,,,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300',
',,,300,300,,,,,,,300,,,300,300,300,,,300,300,964,964,964,,964,,,,964',
'964,,,,964,,964,964,964,964,964,964,964,,,,,,964,964,964,964,964,964',
'964,,,964,,,,,,,964,,,964,964,964,964,964,964,964,964,,964,964,964,',
'964,964,,964,964,964,,,,,,,,,,,,,,,,,,,,964,,,964,,,964,964,,,964,,964',
',,,964,,,,,,,,964,,,,,964,964,964,964,964,964,,,,964,964,,,,,,,964,',
',964,964,964,,,964,964,302,302,302,,302,,,,302,302,,,,302,,302,302,302',
'302,302,302,302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302,,,302',
'302,302,302,302,302,302,302,,302,302,302,,302,302,,302,302,302,,,,,',
',,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,,,,302,,,,,,,,302,,,,,302',
'302,302,302,302,302,,,,302,302,,,,,,,302,,,302,302,302,,,302,302,305',
'305,305,,305,,,,305,305,,,,305,,305,305,305,305,305,305,305,,,,,,305',
'305,305,305,305,305,305,,,305,,,,,,,305,,,305,305,305,305,305,305,305',
'305,,305,305,305,,305,305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305',
',,305,305,,,305,,,,,,305,,,,,,,,305,,,,,305,305,305,305,305,305,,,,305',
'305,,,,,,,305,,,305,305,305,,,305,305,306,306,306,,306,,,,306,306,,',
',306,,306,306,306,306,306,306,306,,,,,,306,306,306,306,306,306,306,',
',306,,,,,,,306,,,306,306,306,306,306,306,306,306,,306,306,306,,306,306',
',306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,306,,,306,,,,,,306,',
',,,,,,306,,,,,306,306,306,306,306,306,,,,306,306,,,,,,,306,,,306,306',
'306,,,306,306,312,312,312,312,312,,,,312,312,,,,312,,312,312,312,312',
'312,312,312,,,,,,312,312,312,312,312,312,312,,,312,,,,,,312,312,,312',
'312,312,312,312,312,312,312,312,,312,312,312,,312,312,,312,312,312,',
',,,,,,,,,,,,,,,,,,312,,,312,,,312,312,,,312,,312,,,,312,,,,,,,,312,',
',,,312,312,312,312,312,312,,,,312,312,,,,,,,312,,,312,312,312,,,312',
'312,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705,705,705,705',
',,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705,705,705,705,705',
'705,705,705,,705,705,705,,705,705,,705,705,705,,,,,,,,,,,,,,,,,,,,705',
',,705,,,705,705,,,705,,,,,,705,,,,,,,,705,,,,,705,705,705,705,705,705',
',,,705,705,,,,,,,705,,,705,705,705,,,705,705,708,708,708,,708,,,,708',
'708,,,,708,,708,708,708,708,708,708,708,,,,,,708,708,708,708,708,708',
'708,,,708,,,,,,,708,,,708,708,708,708,708,708,708,708,,708,708,708,',
'708,708,,708,708,708,,,,,,,,,,,,,,,,,,,,708,,,708,,,708,708,,,708,,',
',,,708,,,,,,,,708,,,,,708,708,708,708,708,708,,,,708,708,,,,,,,708,',
',708,708,708,,,708,708,534,534,534,534,534,,,,534,534,,,,534,,534,534',
'534,534,534,534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,534',
'534,534,534,534,534,534,534,534,534,534,534,,534,534,534,,534,534,,534',
'534,534,,,,,,,,,,,,,,,,,,,,534,,,534,,,534,534,,,534,,534,,,,534,,,',
',,,,534,,,,,534,534,534,534,534,534,,,,534,534,,,,,,534,534,,,534,534',
'534,,,534,534,526,526,526,,526,,,,526,526,,,,526,,526,526,526,526,526',
'526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526,526,526',
'526,526,526,526,526,526,526,526,526,,526,526,,526,526,526,,,,,,,,,,',
',,,,,,,,,526,,,526,,,526,526,,,526,,,,526,,526,,,,,,,,526,,,,,526,526',
'526,526,526,526,,,,526,526,,,,,,,526,,526,526,526,526,,,526,526,320',
'320,320,,320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320',
'320,320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320,320,320,320',
'320,,320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320',
'320,,,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320,320,,,,320',
',,320,,,320,320,320,,,320,320,523,523,523,,523,,,,523,523,,,,523,,523',
'523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,',
',523,,,523,523,523,523,523,523,523,523,523,523,523,523,,523,523,,523',
'523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,,523,,523,,523',
',,,,,,,523,,,,,523,523,523,523,523,523,,,,523,523,,,,,,,523,,523,523',
'523,523,,,523,523,712,712,712,,712,,,,712,712,,,,712,,712,712,712,712',
'712,712,712,,,,,,712,712,712,712,712,712,712,,,712,,,,,,,712,,,712,712',
'712,712,712,712,712,712,,712,712,712,,712,712,,,,712,,,,,,,,,,,,,,,',
',,,,712,,,712,,,712,712,,,712,,,,,,,,,,,,,,,,,,,712,712,712,712,712',
'712,,,,712,712,,,,,,,712,,,712,712,712,,,712,712,939,939,939,,939,,',
',939,939,,,,939,,939,939,939,939,939,939,939,,,,,,939,939,939,939,939',
'939,939,,,939,,,,,,,939,,,939,939,939,939,939,939,939,939,,939,939,939',
',939,939,,,,939,,,,,,,,,,,,,,,,,,,,939,,,939,,,939,939,,,939,,,,,,,',
',,,,,,,,,,,939,939,939,939,939,939,,,,939,939,,,,,,,939,,,939,939,939',
',,939,939,528,528,528,,528,,,,528,528,,,,528,,528,528,528,528,528,528',
'528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528,,,528,528,528,528',
'528,528,528,528,,528,528,528,,528,528,,528,528,528,,,,,,,,,,,,,,,,,',
',,528,,,528,,,528,528,,,528,,,,,,528,,,,,,,,528,,,,,528,528,528,528',
'528,528,,,,528,528,,,,,,,528,,,528,528,528,,,528,528,781,781,781,,781',
',,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781',
'781,781,781,,,781,,,,,,,781,,,781,781,781,781,781,781,781,781,781,781',
'781,781,,781,781,,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781',
',,781,,781,,781,,781,,,,,,,,781,,,,,781,781,781,781,781,781,,,,781,781',
',,,,,,781,,781,781,781,781,,,781,781,618,618,618,,618,,,,618,618,,,',
'618,,618,618,618,618,618,618,618,,,,,,618,618,618,618,618,618,618,,',
'618,,,,,,,618,,,618,618,618,618,618,618,618,618,618,618,618,618,,618',
'618,,618,618,618,,,,,,,,,,,,,,,,,,,,618,,,618,,,618,618,,,618,,618,',
'618,,618,,,,,,,,618,,,,,618,618,618,618,618,618,,,,618,618,,,,,,,618',
',618,618,618,618,,,618,618,630,630,630,,630,,,,630,630,,,,630,,630,630',
'630,630,630,630,630,,,,,,630,630,630,630,630,630,630,,,630,,,,,,,630',
',,630,630,630,630,630,630,630,630,,630,630,630,,630,630,,630,630,630',
',,,,,,,,,,,,,,,,,,,630,,,630,,,630,630,,,630,,,,,,630,,,,,,,,630,,,',
',630,630,630,630,630,630,,,,630,630,,,,,,,630,,,630,630,630,,,630,630',
'636,636,636,,636,,,,636,636,,,,636,,636,636,636,636,636,636,636,,,,',
',636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636',
'636,636,,636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636,,',
'636,,,636,636,,,636,,,,,,636,,,,,,,,636,,,,,636,636,636,636,636,636',
',,,636,636,,,,,,,636,,,636,636,636,,,636,636,665,665,665,,665,,,,665',
'665,,,,665,,665,665,665,665,665,665,665,,,,,,665,665,665,665,665,665',
'665,,,665,,,,,,,665,,,665,665,665,665,665,665,665,665,,665,665,665,',
'665,665,,665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,665',
',,,665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,',
',665,665,665,,,665,665,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23',
'23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23',
',23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,',
',,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23',
',,23,23,666,666,666,,666,,,,666,666,,,,666,,666,666,666,666,666,666',
'666,,,,,,666,666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666',
'666,666,666,666,,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,',
',,666,,,666,,,666,666,,,666,,,,,,666,,,,,,,,666,,,,,666,666,666,666',
'666,666,,,,666,666,,,,,,,666,,,666,666,666,,,666,666,667,667,667,,667',
',,,667,667,,,,667,,667,667,667,667,667,667,667,,,,,,667,667,667,667',
'667,667,667,,,667,,,,,,,667,,,667,667,667,667,667,667,667,667,667,667',
'667,667,,667,667,,667,667,667,,,,,,,,,,,,,,,,,,,,667,,,667,,,667,667',
',,667,,667,,667,,667,,,,,,,,667,,,,,667,667,667,667,667,667,,,,667,667',
',,,,,,667,,667,667,667,667,,,667,667,568,568,568,,568,,,,568,568,,,',
'568,,568,568,568,568,568,568,568,,,,,,568,568,568,568,568,568,568,,',
'568,,,,,,,568,,,568,568,568,568,568,568,568,568,568,568,568,568,,568',
'568,,568,568,568,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,568,,,568,,,,,,568',
',,,,,,,568,,,,,568,568,568,568,568,568,,,,568,568,,,,,,,568,,568,568',
'568,568,,,568,568,565,565,565,,565,,,,565,565,,,,565,,565,565,565,565',
'565,565,565,,,,,,565,565,565,565,565,565,565,,,565,,,,,,,565,,,565,565',
'565,565,565,565,565,565,565,565,565,565,,565,565,,565,565,565,,,,,,',
',,,,,,,,,,,,,565,,,565,,,565,565,,,565,,565,,,,565,,,,,,,,565,,,,,565',
'565,565,565,565,565,,,,565,565,,,,,,,565,,565,565,565,565,,,565,565',
'32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32',
'32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32',
'32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32',
',,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33',
',33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,',
',33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33',
',,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33',
'33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,',
',,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,',
',,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,',
',,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34',
'34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37',
',,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37',
',,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,',
'37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37',
',,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38',
'38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38',
'38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38',
',,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,',
',38,38,670,670,670,,670,,,,670,670,,,,670,,670,670,670,670,670,670,670',
',,,,,670,670,670,670,670,670,670,,,670,,,,,,,670,,,670,670,670,670,670',
'670,670,670,,670,670,670,,670,670,,670,670,670,,,,,,,,,,,,,,,,,,,,670',
',,670,,,670,670,,,670,,,,,,670,,,,,,,,670,,,,,670,670,670,670,670,670',
',,,670,670,,,,,,,670,,,670,670,670,,,670,670,673,673,673,,673,,,,673',
'673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673,673,673',
'673,,,673,,,,,,,673,,,673,673,673,673,673,673,673,673,673,673,673,673',
',673,673,,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,',
'673,,673,,673,,,,,,,,673,,,,,673,673,673,673,673,673,,,,673,673,,,,',
',,673,,673,673,673,673,,,673,673,559,559,559,,559,,,,559,559,,,,559',
',559,559,559,559,559,559,559,,,,,,559,559,559,559,559,559,559,,,559',
',,,,,,559,,,559,559,559,559,559,559,559,559,,559,559,559,,559,559,,559',
'559,559,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,559,,,559,,,,,,559,,,,,,',
',559,,,,,559,559,559,559,559,559,,,,559,559,,,,,,,559,,,559,559,559',
',,559,559,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45',
'45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45',
',45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,',
',,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46',
'46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46',
'46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46',
',,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46',
'46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,48,48,48,,48,,,,48',
'48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,,',
'48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,,48,48,48,,,,,,,,,,,,',
',,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,48,,,,,48,48,48,48,48,48',
',,,48,48,,,,,,,48,,,48,48,48,,,48,48,674,674,674,,674,,,,674,674,,,',
'674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,,',
'674,,,,,,,674,,,674,674,674,674,674,674,674,674,674,674,674,674,,674',
'674,,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,,,674',
',674,,,,,,,,674,,,,,674,674,674,674,674,674,,,,674,674,,,,,,,674,,674',
'674,674,674,,,674,674,1037,1037,1037,,1037,,,,1037,1037,,,,1037,,1037',
'1037,1037,1037,1037,1037,1037,,,,,,1037,1037,1037,1037,1037,1037,1037',
',,1037,,,,,,,1037,,,1037,1037,1037,1037,1037,1037,1037,1037,1037,1037',
'1037,1037,,1037,1037,,1037,1037,1037,,,,,,,,,,,,,,,,,,,,1037,,,1037',
',,1037,1037,,,1037,,1037,,1037,,1037,,,,,,,,1037,,,,,1037,1037,1037',
'1037,1037,1037,,,,1037,1037,,,,,,,1037,,1037,1037,1037,1037,,,1037,1037',
'63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,63,,,,,,,,63,,',
',,63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,554,554,554',
',554,,,,554,554,,,,554,,554,554,554,554,554,554,554,,,,,,554,554,554',
'554,554,554,554,,,554,,,,,,,554,,,554,554,554,554,554,554,554,554,,554',
'554,554,,554,554,,554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554',
',,554,,,,,,554,,,,,,,,554,,,,,554,554,554,554,554,554,,,,554,554,,,',
',,,554,,,554,554,554,,,554,554,67,67,67,,67,,,,67,67,,,,67,,67,67,67',
'67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67',
'67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67',
'67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,',
'67,67,67,,,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,',
',,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68',
'68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,',
'68,,,,,,,,68,,,,,68,68,68,68,68,68,,,,68,68,,,,,,,68,,,68,68,68,,,68',
'68,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71',
'71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,71',
'71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,,,,,,,,71,,,,',
'71,71,71,71,71,71,,,,71,71,71,,,,,71,71,,,71,71,71,,,71,71,72,72,72',
',72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,',
',72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,,72,,,,,,',
',,,,,,,,,,,,,72,,,72,,,72,72,,,72,,72,,,,,,,,,,,,,,,,,72,72,72,72,72',
'72,,,,72,72,,,,,,,72,,,72,72,72,,,72,72,675,675,675,,675,,,,675,675',
',,,675,,675,675,675,675,675,675,675,,,,,,675,675,675,675,675,675,675',
',,675,,,,,,,675,,,675,675,675,675,675,675,675,675,,675,675,675,,675',
'675,,675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,,,,,675',
',,,,,,,675,,,,,675,675,675,675,675,675,,,,675,675,,,,,,,675,,,675,675',
'675,,,675,675,126,126,126,126,126,,,,126,126,,,,126,,126,126,126,126',
'126,126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,,126,126,126',
'126,126,126,126,126,126,126,126,126,,126,126,126,,126,126,,126,126,126',
',,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,,,,,,126',
',,,,126,126,126,126,126,126,,,,126,126,,,,,,126,126,,,126,126,126,,',
'126,126,131,131,131,,131,,,,131,131,,,,131,,131,131,131,131,131,131',
'131,,,,,,131,131,131,131,131,131,131,,,131,,,,,,,131,,,131,131,131,131',
'131,131,131,131,,131,131,131,,131,131,,131,131,131,,,,,,,,,,,,,,,,,',
',,131,,,131,,,131,131,,,131,,,,,,131,,,,,,,,131,,,,,131,131,131,131',
'131,131,,,,131,131,,,,,,,131,,,131,131,131,,,131,131,132,132,132,,132',
',,,132,132,,,,132,,132,132,132,132,132,132,132,,,,,,132,132,132,132',
'132,132,132,,,132,,,,,,,132,,,132,132,132,132,132,132,132,132,,132,132',
'132,,132,132,,132,132,132,,,,,,,,,,,,,,,,,,,,132,,,132,,,132,132,,,132',
',,,,,132,,,,,,,,132,,,,,132,132,132,132,132,132,,,,132,132,,,,,,,132',
',,132,132,132,,,132,132,133,133,133,,133,,,,133,133,,,,133,,133,133',
'133,133,133,133,133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,,133',
',,133,133,133,133,133,133,133,133,,133,133,133,,133,133,,133,133,133',
',,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,,,,,133,,,,,,,,133,,,',
',133,133,133,133,133,133,,,,133,133,,,,,,,133,,,133,133,133,,,133,133',
'134,134,134,,134,,,,134,134,,,,134,,134,134,134,134,134,134,134,,,,',
',134,134,134,134,134,134,134,,,134,,,,,,,134,,,134,134,134,134,134,134',
'134,134,,134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,',
'134,,,134,134,,,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134',
',,,134,134,,,,,,,134,,,134,134,134,,,134,134,135,135,135,135,135,,,',
'135,135,,,,135,,135,135,135,135,135,135,135,,,,,,135,135,135,135,135',
'135,135,,,135,,,,,,135,135,,135,135,135,135,135,135,135,135,135,,135',
'135,135,,135,135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135',
',,135,,135,,,,135,,,,,,,,135,,,,,135,135,135,135,135,135,,,,135,135',
',,,,,,135,,,135,135,135,,,135,135,676,676,676,,676,,,,676,676,,,,676',
',676,676,676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676',
',,,,,,676,,,676,676,676,676,676,676,676,676,,676,676,676,,676,676,,676',
'676,676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,676,,,,,,',
',676,,,,,676,676,676,676,676,676,,,,676,676,,,,,,,676,,,676,676,676',
',,676,676,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223,223',
'223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223',
'223,223,223,223,,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,',
',,223,,,223,,,223,223,,,223,,223,,,,223,,,,,,,,223,,,,,223,223,223,223',
'223,223,,,,223,223,,,,,,,223,,,223,223,223,,,223,223,224,224,224,,224',
',,,224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224',
'224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224',
'224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224',
',224,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,,,,,,',
'224,,,224,224,224,,,224,224,225,225,225,,225,,,,225,225,,,,225,,225',
'225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,',
',225,,,225,225,225,225,225,225,225,225,,225,225,225,,225,225,,225,225',
'225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225',
',,,,225,225,225,225,225,225,,,,225,225,,,,,,,225,,,225,225,225,,,225',
'225,226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226',
'226,226,226,,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226',
',,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226',
',,,226,226,,,,,,,226,,,226,226,226,,,226,226,227,227,227,,227,,,,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,',
',,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,,,,,,,227,',
',227,227,227,,,227,227,228,228,228,,228,,,,228,228,,,,228,,228,228,228',
'228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228',
'228,228,228,228,228,228,228,228,228,228,228,,228,228,,228,228,228,,',
',,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,228,,228,,228,,,,,,,,228',
',,,,228,228,228,228,228,228,,,,228,228,,,,,,,228,,228,228,228,228,,',
'228,228,930,930,930,,930,,,,930,930,,,,930,,930,930,930,930,930,930',
'930,,,,,,930,930,930,930,930,930,930,,,930,,,,,,,930,,,930,930,930,930',
'930,930,930,930,,930,930,930,,930,930,,,,930,,,,,,,,,,,,,,,,,,,,930',
',,930,,,930,930,,,930,,,,,,,,,,,,,,,,,,,930,930,930,930,930,930,,,,930',
'930,,,,,,,930,,,930,930,930,,,930,930,337,337,337,,337,,,,337,337,,',
',337,,337,337,337,337,337,337,337,,,,,,337,337,337,337,337,337,337,',
',337,,,,,,,337,,,337,337,337,337,337,337,337,337,,337,337,337,,337,337',
',,,337,,,,,,,,,,,,,,,,,,,,337,,,337,,,337,337,,,337,,,,,,,,,,,,,,,,',
',,337,337,337,337,337,337,,,,337,337,,,,,,,337,,,337,337,337,,,337,337',
'723,723,723,,723,,,,723,723,,,,723,,723,723,723,723,723,723,723,,,,',
',723,723,723,723,723,723,723,,,723,,,,,,,723,,,723,723,723,723,723,723',
'723,723,,723,723,723,,723,723,,,,723,,,,,,,,,,,,,,,,,,,,723,,,723,,',
'723,723,,,723,,,,,,,,,,,,,,,,,,,723,723,723,723,723,723,,,,723,723,',
',,,,,723,,,723,723,723,,,723,723,724,724,724,,724,,,,724,724,,,,724',
',724,724,724,724,724,724,724,,,,,,724,724,724,724,724,724,724,,,724',
',,,,,,724,,,724,724,724,724,724,724,724,724,,724,724,724,,724,724,,724',
'724,724,,,,,,,,,,,,,,,,,,,,724,,,724,,,724,724,,,724,,,,,,724,,,,,,',
',724,,,,,724,724,724,724,724,724,,,,724,724,,,,,,,724,,,724,724,724',
',,724,724,918,918,918,,918,,,,918,918,,,,918,,918,918,918,918,918,918',
'918,,,,,,918,918,918,918,918,918,918,,,918,,,,,,,918,,,918,918,918,918',
'918,918,918,918,,918,918,918,,918,918,,918,918,918,,,,,,,,,,,,,,,,,',
',,918,,,918,,,918,918,,,918,,,,,,918,,,,,,,,918,,,,,918,918,918,918',
'918,918,,,,918,918,,,,,,,918,,,918,918,918,,,918,918,344,344,344,,344',
',,,344,344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344',
'344,344,344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344',
'344,,344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344',
',,,,,344,,,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344',
',,344,344,344,,,344,344,346,346,346,,346,,,,346,346,,,,346,,346,346',
'346,346,346,346,346,,,,,,346,346,346,346,346,346,346,,,346,,,,,,,346',
',,346,346,346,346,346,346,346,346,,346,346,346,,346,346,,346,346,346',
',,,,,,,,,,,,,,,,,,,346,,,346,346,,346,346,,,346,,,,,,346,,,,,,,,346',
',,,,346,346,346,346,346,346,,,,346,346,,,,,,,346,,,346,346,346,,,346',
'346,349,349,349,349,349,,,,349,349,,,,349,,349,349,349,349,349,349,349',
',,,,,349,349,349,349,349,349,349,,,349,,,,,,349,349,,349,349,349,349',
'349,349,349,349,349,,349,349,349,,349,349,,349,349,349,,,,,,,,,,,,,',
',,,,,,349,,,349,,,349,349,,,349,,349,,,,349,,,,,,,,349,,,,,349,349,349',
'349,349,349,,,,349,349,,,,,,,349,,,349,349,349,,,349,349,917,917,917',
',917,,,,917,917,,,,917,,917,917,917,917,917,917,917,,,,,,917,917,917',
'917,917,917,917,,,917,,,,,,,917,,,917,917,917,917,917,917,917,917,917',
'917,917,917,,917,917,,917,917,917,,,,,,,,,,,,,,,,,,,,917,,,917,,,917',
'917,,,917,,,,917,,917,,,,,,,,917,,,,,917,917,917,917,917,917,,,,917',
'917,,,,,,,917,,917,917,917,917,,,917,917,899,899,899,,899,,,,899,899',
',,,899,,899,899,899,899,899,899,899,,,,,,899,899,899,899,899,899,899',
',,899,,,,,,,899,,,899,899,899,899,899,899,899,899,,899,899,899,,899',
'899,,899,899,899,,,,,,,,,,,,,,,,,,,,899,,,899,,,899,899,,,899,,,,,,899',
',,,,,,,899,,,,,899,899,899,899,899,899,,,,899,899,,,,,,,899,,,899,899',
'899,,,899,899,355,355,355,,355,,,,355,355,,,,355,,355,355,355,355,355',
'355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,,355,,,355,355,355',
'355,355,355,355,355,355,355,355,355,,355,355,,355,355,355,,,,,,,,,,',
',,,,,,,,,355,,,355,,,355,355,,,355,,,,,,355,,,,,,,,355,,,,,355,355,355',
'355,355,355,,,,355,355,,,,,,,355,,355,355,355,355,,,355,355,729,729',
'729,,729,,,,729,729,,,,729,,729,729,729,729,729,729,729,,,,,,729,729',
'729,729,729,729,729,,,729,,,,,,,729,,,729,729,729,729,729,729,729,729',
',729,729,729,,729,729,,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729',
'729,,,729,,729,,,,729,,,,,,,,729,,,,,729,729,729,729,729,729,,,,729',
'729,,,,,,,729,,,729,729,729,,,729,729,362,362,362,,362,,,,362,362,,',
',362,,362,362,362,362,362,362,362,,,,,,362,362,362,362,362,362,362,',
',362,,,,,,,362,,,362,362,362,362,362,362,362,362,,362,362,362,,362,362',
',362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,362,,,362,,,,,,362,',
',,,,,,362,,,,,362,362,362,362,362,362,,,,362,362,,,,,,,362,,,362,362',
'362,,,362,362,885,885,885,,885,,,,885,885,,,,885,,885,885,885,885,885',
'885,885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,,885,,,885,885,885',
'885,885,885,885,885,,885,885,885,,885,885,,885,885,885,,,,,,,,,,,,,',
',,,,,,885,,,885,,,885,885,,,885,,,,,,885,,,,,,,,885,,,,,885,885,885',
'885,885,885,,,,885,885,,,,,,,885,,,885,885,885,,,885,885,376,376,376',
',376,,,,376,376,,,,376,,376,376,376,376,376,376,376,,,,,,376,376,376',
'376,376,376,376,,,376,,,,,,,376,,,376,376,376,376,376,376,376,376,,376',
'376,376,,376,376,,,,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376,376,,,376',
',,,,,,,,,,,,,,,,,,376,376,376,376,376,376,,,,376,376,,,,,,,376,,,376',
'376,376,,,376,376,378,378,378,,378,,,,378,378,,,,378,,378,378,378,378',
'378,378,378,,,,,,378,378,378,378,378,378,378,,,378,,,,,,,378,,,378,378',
'378,378,378,378,378,378,,378,378,378,,378,378,,,,378,,,,,,,,,,,,,,,',
',,,,378,,,378,,,378,378,,,378,,,,,,,,,,,,,,,,,,,378,378,378,378,378',
'378,,,,378,378,,,,,,,378,,,378,378,378,,,378,378,748,748,748,,748,,',
',748,748,,,,748,,748,748,748,748,748,748,748,,,,,,748,748,748,748,748',
'748,748,,,748,,,,,,,748,,,748,748,748,748,748,748,748,748,,748,748,748',
',748,748,,748,748,748,,,,,,,,,,,,,,,,,,,,748,,,748,,,748,748,,,748,',
',,,,748,,,,,,,,748,,,,,748,748,748,748,748,748,,,,748,748,,,,,,,748',
',,748,748,748,,,748,748,827,827,827,,827,,,,827,827,,,,827,,827,827',
'827,827,827,827,827,,,,,,827,827,827,827,827,827,827,,,827,,,,,,,827',
',,827,827,827,827,827,827,827,827,,827,827,827,,827,827,,827,827,827',
',,,,,,,,,,,,,,,,,,,827,,,827,,,827,827,,,827,,,,,,827,,,,,,,,827,,,',
',827,827,827,827,827,827,,,,827,827,,,,,,,827,,,827,827,827,,,827,827',
'825,825,825,,825,,,,825,825,,,,825,,825,825,825,825,825,825,825,,,,',
',825,825,825,825,825,825,825,,,825,,,,,,,825,,,825,825,825,825,825,825',
'825,825,,825,825,825,,825,825,,825,825,825,,,,,,,,,,,,,,,,,,,,825,,',
'825,,,825,825,,,825,,,,,,825,,,,,,,,825,,,,,825,825,825,825,825,825',
',,,825,825,,,,,,,825,,,825,825,825,,,825,825,824,824,824,,824,,,,824',
'824,,,,824,,824,824,824,824,824,824,824,,,,,,824,824,824,824,824,824',
'824,,,824,,,,,,,824,,,824,824,824,824,824,824,824,824,,824,824,824,',
'824,824,,824,824,824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,',
',,,824,,,,,,,,824,,,,,824,824,824,824,824,824,,,,824,824,,,,,,,824,',
',824,824,824,,,824,824,823,823,823,,823,,,,823,823,,,,823,,823,823,823',
'823,823,823,823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,,823,,,823',
'823,823,823,823,823,823,823,,823,823,823,,823,823,,823,823,823,,,,,',
',,,,,,,,,,,,,,823,,,823,,,823,823,,,823,,,,,,823,,,,,,,,823,,,,,823',
'823,823,823,823,823,,,,823,823,,,,,,,823,,,823,823,823,,,823,823,822',
'822,822,,822,,,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,,822',
'822,822,822,822,822,822,,,822,,,,,,,822,,,822,822,822,822,822,822,822',
'822,,822,822,822,,822,822,,822,822,822,,,,,,,,,,,,,,,,,,,,822,,,822',
',,822,822,,,822,,,,,,822,,,,,,,,822,,,,,822,822,822,822,822,822,,,,822',
'822,,,,,,,822,,,822,822,822,,,822,822,769,769,769,,769,,,,769,769,,',
',769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,',
',769,,,,,,,769,,,769,769,769,769,769,769,769,769,,769,769,769,,769,769',
',769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,769,,,,769',
',,,,,,,769,,,,,769,769,769,769,769,769,,,,769,769,,,,,,,769,,,769,769',
'769,,,769,769,809,809,809,,809,,,,809,809,,,,809,,809,809,809,809,809',
'809,809,,,,,,809,809,809,809,809,809,809,,,809,,,,,,,809,,,809,809,809',
'809,809,809,809,809,,809,809,809,,809,809,,809,809,809,,,,,,,,,,,,,',
',,,,,,809,,,809,,,809,809,,,809,,,,,,809,,,,,,,,809,,,,,809,809,809',
'809,809,809,,,,809,809,,,,,,,809,,,809,809,809,,,809,809,484,484,484',
',484,,,,484,484,,,,484,,484,484,484,484,484,484,484,,,,,,484,484,484',
'484,484,484,484,,,484,,,,,,,484,,,484,484,484,484,484,484,484,484,,484',
'484,484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484,,,484,484',
',,484,,,,,,484,,,,,,,,484,,,,,484,484,484,484,484,484,,,,484,484,,,',
',,,484,,,484,484,484,,,484,484,483,483,483,,483,,,,483,483,,,,483,,483',
'483,483,483,483,483,483,,,,,,483,483,483,483,483,483,483,,,483,,,,,',
',483,,,483,483,483,483,483,483,483,483,,483,483,483,,483,483,,483,483',
'483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483,,,483,,,,,,483,,,,,,,,483',
',,,,483,483,483,483,483,483,,,,483,483,,,,,,,483,,,483,483,483,,,483',
'483,482,482,482,,482,,,,482,482,,,,482,,482,482,482,482,482,482,482',
',,,,,482,482,482,482,482,482,482,,,482,,,,,,,482,,,482,482,482,482,482',
'482,482,482,,482,482,482,,482,482,,482,482,482,,,,,,,,,,,,,,,,,,,,482',
',,482,,,482,482,,,482,,,,,,482,,,,,,,,482,,,,,482,482,482,482,482,482',
',,,482,482,,,,,,,482,,,482,482,482,,,482,482,802,802,802,,802,,,,802',
'802,,,,802,,802,802,802,802,802,802,802,,,,,,802,802,802,802,802,802',
'802,,,802,,,,,,,802,,,802,802,802,802,802,802,802,802,,802,802,802,',
'802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802,,',
',,,802,,,,,,,,802,,,,,802,802,802,802,802,802,,,,802,802,,,,,,,802,',
',802,802,802,,,802,802,437,437,437,,437,,,,437,437,,,,437,,437,437,437',
'437,437,437,437,,,,,,437,437,437,437,437,437,437,,,437,,,,,,,437,,,437',
'437,437,437,437,437,437,437,,437,437,437,,437,437,,437,437,437,,,,,',
',,,,,,,,,,,,,,437,,,437,,,437,437,,,437,,,,,,437,,,,,,,,437,,,,,437',
'437,437,437,437,437,,,,437,437,,,,,,,437,,,437,437,437,,,437,437,480',
'480,480,,480,,,,480,480,,,,480,,480,480,480,480,480,480,480,,,,,,480',
'480,480,480,480,480,480,,,480,,,,,,,480,,,480,480,480,480,480,480,480',
'480,480,480,480,480,,480,480,,480,480,480,,,,,,,,,,,,,,,,,,,,480,,,480',
',,480,480,,,480,,480,,480,,480,,,,,,,,480,,,,,480,480,480,480,480,480',
',,,480,480,,,,,,,480,,480,480,480,480,,,480,480,428,428,428,428,428',
'428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428',
'428,428,,,,428,428,428,428,428,428,428,428,428,428,,,,,,428,428,428',
'428,428,428,428,428,428,,,428,,,,,,,,,428,428,,428,428,428,428,428,428',
'428,,,428,428,,,,428,428,428,428,,,,,,,,,,,,,,428,428,,428,428,428,428',
'428,428,428,428,428,428,428,,,428,428,,,,,,,,,,428,,,,,,,,,428,,,,,428',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12',
',,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,',
',,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12',
',,,,,,,,12,,,,,12,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,,,,75,75,75,75,75,75,75,75,75,75,,,,,,75,75,75',
'75,75,75,75,75,75,75,75,75,,75,,,,,,,75,75,,75,75,75,75,75,75,75,,,75',
'75,,,,75,75,75,75,,,,,,75,,,,,,,,75,75,,75,75,75,75,75,75,75,75,75,75',
'75,,,75,,,,,,,,,,,,,,,,,,,,75,,,,,75,662,662,662,662,662,662,662,662',
'662,662,662,662,662,662,662,662,662,662,662,662,662,662,662,662,,,,662',
'662,662,662,662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662',
'662,662,,,662,,,,,,,,,662,662,,662,662,662,662,662,662,662,,,662,662',
',,,662,662,662,662,,,,,,,,,,,,,,662,662,,662,662,662,662,662,662,662',
'662,662,662,662,,,662,662,,,,,,,,,,662,,,,,,,,,662,,,,,662,103,103,103',
'103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,103,103,103,,,,103,103,103,103,103,103,103,103,103,103,,,,,,103',
'103,103,103,103,103,103,103,103,103,103,103,,103,,,,,,,103,103,,103',
'103,103,103,103,103,103,,,103,103,,,,103,103,103,103,,,,,,,,,,,,,,103',
'103,,103,103,103,103,103,103,103,103,103,103,103,,,103,,,,,,,,,,,,,',
',,,,,,103,,,,,103,790,790,790,790,790,790,790,790,790,790,790,790,790',
'790,790,790,790,790,790,790,790,790,790,790,,,,790,790,790,790,790,790',
'790,790,790,790,,,,,,790,790,790,790,790,790,790,790,790,,,790,,,,,',
',,,790,790,,790,790,790,790,790,790,790,,,790,790,,,,790,790,790,790',
',,,,,,,,,,,,,790,790,,790,790,790,790,790,790,790,790,790,790,790,,',
'790,,,,,,,,,,,,,,,,,,,,790,,,,,790,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11',
'11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11',
'11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11',
'11,11,11,11,11,,,11,11,,,,,,,,,,11,,478,478,,,478,,,11,,,,,11,478,478',
',478,478,478,478,478,478,478,,,478,478,,,,478,478,478,478,,,,,,478,',
',,,,,,478,478,,478,478,478,478,478,478,478,478,478,478,478,,,478,,,',
',,,,,,620,620,,,620,,,,,,478,,,620,620,478,620,620,620,620,620,620,620',
',,620,620,,,,620,620,620,620,,,,,,620,,,,,,,,620,620,,620,620,620,620',
'620,620,620,620,620,620,620,,,620,,,,,,,,,,619,619,,,619,,,,,,620,,',
'619,619,620,619,619,619,619,619,619,619,,,619,619,,,,619,619,619,619',
',,,,,619,,,,,,,,619,619,,619,619,619,619,619,619,619,619,619,619,619',
',,619,,,,,,,,,,1039,1039,,,1039,,,,,,619,,,1039,1039,619,1039,1039,1039',
'1039,1039,1039,1039,,,1039,1039,,,,1039,1039,1039,1039,,,,,,1039,,,',
',,,,1039,1039,,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039,1039',
',,1039,,,,,,,,,,1038,1038,,,1038,,,,,,1039,,,1038,1038,1039,1038,1038',
'1038,1038,1038,1038,1038,,,1038,1038,,,,1038,1038,1038,1038,,,,,,1038',
',,,,,,,1038,1038,,1038,1038,1038,1038,1038,1038,1038,1038,1038,1038',
'1038,,,1038,,,,,,,,,,1033,1033,,,1033,,,,,,1038,,,1033,1033,1038,1033',
'1033,1033,1033,1033,1033,1033,,,1033,1033,,,,1033,1033,1033,1033,,,',
',,1033,,,,,,,,1033,1033,,1033,1033,1033,1033,1033,1033,1033,1033,1033',
'1033,1033,,,1033,,,,,,,,,,229,229,,,229,,,,,,1033,,,229,229,1033,229',
'229,229,229,229,229,229,,,229,229,,,,229,229,229,229,,,,,,229,,,,,,',
',229,229,,229,229,229,229,229,229,229,229,229,229,229,,,229,,,,,,,,',
',230,230,,,230,,,,,,229,,,230,230,229,230,230,230,230,230,230,230,,',
'230,230,,,,230,230,230,230,,,,,,230,,,,,,,,230,230,,230,230,230,230',
'230,230,230,230,230,230,230,,830,230,830,830,830,830,830,,,,,279,279',
',,279,830,,,,,230,,,279,279,230,279,279,279,279,279,279,279,,,279,279',
'830,,,279,279,279,279,,,830,830,830,830,,,,,,,,279,279,,279,279,279',
'279,279,279,279,279,279,279,279,,,279,830,,,,,,,,830,479,479,,,479,',
',,,,279,,,479,479,279,479,479,479,479,479,479,479,,,479,479,,,,479,479',
'479,479,,,,,,479,,,,,,,,479,479,,479,479,479,479,479,479,479,479,479',
'479,479,,,479,,,,,,,,,,780,780,,,780,,,,,,479,,,780,780,479,780,780',
'780,780,780,780,780,,,780,780,,,,780,780,780,780,,,,,,780,,,,,,,,780',
'780,,780,780,780,780,780,780,780,780,780,780,780,,,780,,,,,,,,,,779',
'779,,,779,,,,,,780,,,779,779,780,779,779,779,779,779,779,779,,,779,779',
',,,779,779,779,779,,,,,,779,,,,,,,,779,779,,779,779,779,779,779,779',
'779,779,779,779,779,,,779,,,,,,,,,,545,545,,,545,,,,,,779,,,545,545',
'779,545,545,545,545,545,545,545,,,545,545,,,,545,545,545,545,,,,,,545',
',,,,,,,545,545,,545,545,545,545,545,545,545,545,545,545,545,,,545,,',
',,,,,,,546,546,,,546,,,,,,545,,,546,546,545,546,546,546,546,546,546',
'546,,,546,546,,,,546,546,546,546,,,,,,546,,,,,,,,546,546,,546,546,546',
'546,546,546,546,546,546,546,546,,,546,,,,,,,,,,555,555,,,555,,,,,,546',
',,555,555,546,555,555,555,555,555,555,555,,,555,555,,,,555,555,555,555',
',,,,,555,,,,,,,,555,555,,555,555,555,555,555,555,555,555,555,555,555',
',,555,,,,,,,,,,556,556,,,556,,,,,,555,,,556,556,555,556,556,556,556',
'556,556,556,,,556,556,,,,556,556,556,556,,,,,,556,,,,,,,,556,556,,556',
'556,556,556,556,556,556,556,556,556,556,,,556,,,,,,,,,,669,669,,,669',
',,,,,556,,,669,669,556,669,669,669,669,669,669,669,,,669,669,,,,669',
'669,669,669,,,,,,669,,,,,,,,669,669,,669,669,669,669,669,669,669,669',
'669,669,669,,,669,,,,,,,,,,668,668,,,668,,,,,,669,,,668,668,669,668',
'668,668,668,668,668,668,,,668,668,,,,668,668,668,668,,,,,,668,,,,,,',
',668,668,,668,668,668,668,668,668,668,668,668,668,668,,358,668,358,358',
'358,358,358,946,,946,946,946,946,946,,,358,,,,,668,,946,,948,668,948',
'948,948,948,948,,,,,,,358,358,,948,,,,946,,358,358,358,358,,,,946,946',
'946,946,,,,,950,948,950,950,950,950,950,,,,,,948,948,,,950,,,,952,358',
'952,952,952,952,952,789,946,789,789,789,789,789,,,952,,950,,,,,789,',
',948,,,950,950,980,,980,980,980,980,980,952,,,,,,,789,,980,,952,952',
',,,789,789,789,789,,,,,,950,,,,,983,980,983,983,983,983,983,,,,980,980',
'980,980,,952,983,,,,,985,789,985,985,985,985,985,1059,,1059,1059,1059',
'1059,1059,,,985,983,,,,,,1059,,980,983,983,983,983,788,,788,788,788',
'788,788,1086,985,1086,1086,1086,1086,1086,,1059,788,,,985,985,,,1086',
',,1059,1059,,,,,983,,,,,,788,,,,,,,1086,,788,788,788,788,,,985,,,1086',
'1086,,,1059,,,,,,,,,,,,,,,,,,,,,,,788,,,,,,,1086' ]
        racc_action_check = arr = ::Array.new(26261, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1323,  5931,   102,   nil,   589,   nil,   nil,  6771,  1154,
   nil, 24539, 23849,   917,   nil,   881,   879,   672,   912,   298,
   333,   nil,   -71, 14191,  2688,   966,   nil,   142,   nil,   200,
  1204,  1332, 14891, 15031, 15171,   nil,  5790, 15311, 15451,   nil,
   855,   367,   404,   927,   259, 16011, 16151,   744, 16291,   852,
   763,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1460,   nil,   131, 16711,   nil,     6,   nil, 16991, 17131,   nil,
   nil, 17271, 17411,   882,   nil, 23987,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -72,   nil,   nil,   nil,   nil,   nil,   nil,   805,
   785,   784,   757, 24263,   nil,   nil,   nil,   nil,   nil,   nil,
   529,   nil,   nil,   933,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 17691,   nil,   nil,   nil,
   nil, 17831, 17971, 18111, 18251, 18391,   772,   nil,   505,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   754,   nil,  3111, 18671, 18811, 18951, 19091, 19231, 19371, 25053,
 25126,   nil,   nil,  6211,  6351,  6491,   nil,   nil,   628,   -81,
   -58,   821,   -55,   714,   769,   nil,  7191,  4239,   763,  7471,
  7611,  7751,  7891,  8031,  8171,  8311,  8451,  8591,  8731,  8871,
  9011,  9151,  9291,  9431,  9571,  9711,  9851,  9991, 10131, 10271,
 10411,   nil,   nil,   nil,   nil, 10551,   nil,   nil,   nil, 25199,
   nil,   nil,   753, 10831,   nil,   nil,   757,   nil,   nil,   nil,
 11111,   nil,   nil, 11251,   nil,  2970,   nil,   716,   713,   nil,
 11391,   752, 11671,   nil,   nil, 11811, 11951,   nil,   nil,   300,
   nil,   nil, 12091,  1311,   nil,   688,  4662,   703,   737,   694,
 12791,  5367,   600,   533,   537,   754,   482,   nil,   685,   633,
   -20,   nil,   nil,   nil,   652,   317,   594, 19651,   nil,   500,
   552,   432,   nil,   543, 20211,   nil, 20351,  3534,   nil, 20491,
   500,   nil,   669,   660,   360, 20911,   nil,   nil, 25918,   775,
   143,   158, 21191,  3675,  5085,   586,   414,   282,    34,    25,
   303,   356,    35,   218,   nil,   nil, 21471,   nil, 21611,   375,
   474,   476,   366,   586,   606,   408,   510,   337,   nil,   629,
   nil,   nil,   nil,   nil,   nil,   428,   nil,   327,   nil,   603,
   nil,   -73,   302,   nil,  -122,   202,   nil,  1240,   131,   nil,
  1239,   -25,   nil,   471,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4944, 23711,   nil,
   nil,   nil,   nil,  1244,   nil,   nil,  1226, 23431,  1214,   nil,
   nil,  1194,   nil,   436,   -54,   nil,   nil,   nil,  1983,   nil,
   nil,   nil,   nil,   nil,  2124,  1211,   nil,   nil,  1207,  1205,
   566,   277,  1592,   nil,   nil,   nil,   264,   661,  1229,   nil,
   nil,  1072,  1720,   nil,   nil,   nil,   -33,   nil, 24615, 25272,
 23571,   143, 23151, 23011, 22871,  3252,  3111,   966,   584,  1247,
  1239,  1237,  1235,  1410,  1282,  1542,  3816,  4098,  4239,  3393,
  3957,  4380,   813,   479,  3534,  3675,  2265,   825,  1233,   nil,
  1852,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1113,
  1106,   nil,   nil, 12931,   nil,   nil, 12651,   nil, 13351,   nil,
   238,   nil,   nil,   nil, 12511,  1286,  1116,  1096,  1079,   nil,
   nil,  1078, 10971,  1048,  7331, 25491, 25564,   349,  1082,   nil,
  6631,  1036,   nil,  1075, 16851, 25637, 25710,  1154,  2829, 15871,
  1154,  1129,  1064,   nil,   nil, 14751,   nil,   nil, 14611,   nil,
  1024,   nil,   553,  1048,   nil,  1783,   nil,  1005,  1002,   nil,
   966,   965,   964,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   945,  1070,   nil,   nil,  6071,   nil,   nil,   nil,  1027,
   nil,   nil,   nil,  1031,   nil,   nil,  1024,  2547,  1062,   nil,
  1983,    25,  1064,  1058,  1037,  1054,   nil,   nil, 13631, 24761,
 24688,    21,   nil,   304,   404,   -21,   nil,   434,   nil,   980,
 13771,   nil,  1001,   nil,   nil,   nil, 13911,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   196,   nil,
   nil,   189,   nil,   nil,   nil,   966,   nil,   nil,   980,   nil,
  1004,   nil, 24125,   nil,  1004, 14051, 14331, 14471, 25856, 25783,
 15591,   634,  1063, 15731, 16431, 17551, 18531,  1073,   nil,   nil,
   nil,  6911, 10691,  1085,   nil,   nil,   147,   240,     0,   794,
  1083,  1086,   nil,   193,  1192,    75,   nil,  1110,   nil,  1216,
   nil,   nil,  1097,   nil,  1139, 12231,   nil,   nil, 12371,   nil,
   nil,   -91, 13071,  1104,   nil,  1108,    23,    32,  1159,    -9,
   496,  1166,  1132, 19791, 19931,  1195,   156,    46,   nil, 21051,
   nil,   nil,  1159,   590,   nil,   nil,    20,  1164,   318,   nil,
   nil,   713,   897,   nil,   726,   nil,  1001,   nil, 21751,   nil,
   937,   nil,  1162,   299,  1167,   nil,   nil,   nil,   nil,   783,
   nil,  1282,   nil,   nil,   nil,   nil,   nil,  1288,   nil, 22591,
  1174,   -14,    -7,   157,   123,  2265,   nil,   761,   nil, 25418,
 25345, 13491,   nil,   nil,   nil,   448,  5649,  5508, 26119, 26007,
 24401,   153,   909,  2406,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1227, 23291,  1234,   270,   369,   396,   132,  2547, 22731,
   nil,   -67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 22451, 22311, 22171, 22031,   374, 21891,   nil,   nil,
 25188,   nil,  5226,   nil,   nil,    69,   nil,   185,   nil,   nil,
   nil,   nil,    57,    33,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  2970,   nil,    68,   130,   nil,   nil,   nil,   nil,   nil,
  2688,  4521,   136,   157,   167,   nil,   nil,   nil,   187,   193,
   nil,   199,   201,   nil,   216,   nil,   nil,   240,   994,   257,
   696,   nil,   392,   nil,   nil, 21331,   nil,  4803,   408,   nil,
   nil,   -10,    37,   433,   203,   430,   nil,   333,  2829, 20771,
   630,   497,   523,   418,   120,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   424,   451,   391,   nil,   nil, 20631, 20071,  2406,
   492,   512,   nil,   521,   523,   525,   nil,   556,   564,   555,
 19511,   nil,   nil,   nil,   nil,  2124,  4098,   nil,    52, 13211,
   nil,   705,   810,  1267,   nil,   nil, 25925,   nil, 25943,   nil,
 25980,   nil, 26000,   nil,   nil,   nil,   nil,   -33,  1197,   709,
   nil,    53,   nil,   nil, 11531,  3252,   nil,   nil,   834,   314,
   nil,   nil,   nil,   nil,   nil,   754,   nil,   165,   nil,   nil,
 26031,   nil,   nil, 26068,   nil, 26089,   nil,   nil,   745,  7051,
   611,   804,   nil,   867,  3393,   182,   183,   633,   831,    11,
   nil,   nil,   nil,   166,   nil,   nil,   nil,   761,   765,   767,
   781,   782,   926,   784,  1065,  4380,   nil,   182,   nil,   nil,
  3957,  3816,   810,   nil,   nil,   814,   815,   826,   827,   nil,
   829,   nil,   706, 24980,   nil,   nil,   964, 16571, 24907, 24834,
    -1,   nil,  1213,   592,   nil,   nil,   nil,   nil,  1075,   856,
   744,   nil,   nil,   nil,   978,   980,   nil,  1846,   nil, 26096,
   nil,  1135,   nil,  1523,   nil,   nil,   924,   929,   nil,   896,
    54,   122,    98,   124,   nil,   914,   921,   nil,   nil,   nil,
  1024,  1058,  1077,  1232,    34,   nil, 26126,   nil,   nil,   nil,
   nil,   460,   nil ]

racc_action_default = [
    -1,  -648,  -647,  -648,    -2,  -634,    -4,    -5,  -648,    -8,
    -9,  -648,  -648,  -648,   -35,  -648,  -648,   -39,  -648,  -648,
  -294,   -50,  -636,  -648,   -55,   -60,   -61,   -62,   -66,  -271,
  -271,  -271,  -308,  -341,  -342,   -78,  -647,   -82,   -90,   -92,
  -648,  -535,  -536,  -648,  -648,  -648,  -648,  -230,  -648,  -636,
  -244,  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -620,  -296,  -299,  -647,  -306,  -316,  -421,  -648,  -648,   -57,
   -57,  -634,  -648,  -326,  -333,  -648,  -343,  -344,  -346,  -347,
  -348,  -349,  -350,  -351,  -352,  -353,  -354,  -355,  -364,  -466,
  -467,  -468,  -469,  -470,  -471,  -647,  -474,  -647,  -647,  -647,
  -647,  -647,  -647,  -647,  -511,  -517,  -519,  -520,  -521,  -522,
  -618,  -524,  -525,  -619,  -527,  -528,  -529,  -530,  -531,  -532,
  -533,  -534,  -539,  -540,  1093,    -3,  -635,  -643,  -644,  -645,
    -7,  -648,  -648,  -648,  -648,  -648,  -648,   -23,  -648,  -121,
  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
   -28,  -130,  -647,  -648,  -648,  -648,  -648,  -648,  -647,  -648,
  -648,  -630,  -631,  -648,  -648,  -636,  -637,   -54,  -648,  -535,
  -536,  -648,  -294,  -648,  -648,  -236,  -648,  -647,  -648,  -648,
  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,  -648,
  -648,  -245,  -246,  -247,  -248,  -648,  -357,  -450,  -429,  -648,
  -632,  -633,   -67,  -648,  -315,  -356,  -648,  -443,  -445,   -73,
  -647,  -440,   -74,  -636,   -75,  -251,  -266,  -647,  -647,  -270,
  -648,  -276,  -648,  -647,  -612,  -648,  -648,   -76,   -77,  -634,
   -16,   -17,  -648,   -20,   -21,   -80,  -647,  -636,  -648,   -83,
   -86,  -647,   -98,   -99,  -648,  -648,  -106,  -308,  -311,  -636,
  -433,  -341,  -342,  -345,  -441,  -648,   -88,  -648,   -94,  -304,
  -518,  -648,  -224,  -225,  -648,  -237,  -648,  -647,  -298,  -648,
  -648,  -252,  -640,  -640,  -648,  -647,  -317,  -318,  -567,   -56,
  -648,  -648,  -648,  -647,  -647,  -634,  -648,  -635,  -535,  -536,
  -648,  -648,  -294,  -648,  -374,  -375,  -648,  -329,  -648,  -121,
  -122,  -164,  -165,  -166,  -182,  -187,  -194,  -197,  -336,  -648,
  -535,  -536,  -607,  -608,  -472,  -648,  -495,  -648,  -497,  -648,
  -499,  -648,  -648,  -479,  -648,  -648,  -485,  -648,  -648,  -491,
  -648,  -648,  -493,  -648,  -510,  -512,  -513,  -514,  -515,    -6,
  -646,   -29,   -30,   -31,   -32,   -33,   -10,  -647,  -648,   -25,
   -26,   -27,  -131,  -648,   -36,   -38,  -281,  -648,  -648,  -280,
   -37,  -648,   -40,  -648,  -294,   -48,   -49,  -205,  -256,  -276,
   -51,   -52,   -41,  -206,  -256,  -636,  -261,  -262,  -647,  -647,
  -621,  -622,  -271,  -438,  -623,  -624,  -622,  -621,  -271,  -437,
  -439,  -623,  -624,   -47,  -214,   -53,  -636,  -314,  -648,  -648,
  -647,  -304,  -648,  -648,  -648,  -215,  -216,  -217,  -218,  -219,
  -220,  -221,  -222,  -226,  -227,  -228,  -229,  -231,  -232,  -233,
  -234,  -235,  -238,  -239,  -240,  -241,  -636,  -249,  -648,  -451,
  -271,  -621,  -622,   -64,   -68,  -272,  -434,  -447,  -450,  -636,
  -636,  -310,  -267,  -648,  -275,  -268,  -648,  -273,  -648,  -277,
  -648,  -615,  -617,   -15,  -635,   -19,  -648,  -636,   -79,  -302,
   -95,   -84,  -648,  -636,  -647,  -648,  -648,  -105,  -648,  -518,
  -648,   -91,   -96,  -648,  -648,  -648,  -648,  -250,  -242,  -648,
  -458,  -648,  -300,  -638,  -253,  -642,  -641,  -255,  -642,  -305,
  -648,  -610,  -640,  -648,  -422,  -567,  -425,  -606,  -606,  -550,
  -552,  -552,  -552,  -566,  -568,  -569,  -570,  -571,  -572,  -573,
  -574,  -575,  -648,  -577,  -579,  -581,  -586,  -588,  -589,  -591,
  -596,  -598,  -599,  -601,  -602,  -603,  -648,  -647,  -365,  -366,
  -647,  -648,  -648,  -648,  -648,  -648,  -360,  -453,  -647,  -648,
  -648,  -304,   -57,  -116,  -117,  -648,  -119,  -648,  -294,  -647,
  -648,  -334,  -545,  -338,  -628,  -629,  -648,  -473,  -496,  -501,
  -502,  -504,  -475,  -498,  -476,  -500,  -477,  -478,  -648,  -481,
  -483,  -648,  -484,  -487,  -488,  -648,  -489,  -490,  -648,  -516,
  -648,   -24,  -648,   -34,  -284,  -648,  -648,  -647,  -648,  -648,
  -648,  -442,  -648,  -263,  -265,  -648,  -648,   -69,  -259,  -260,
  -435,  -648,  -648,   -71,  -436,  -313,  -621,  -622,  -621,  -622,
  -636,  -648,  -428,  -647,   -63,  -430,  -447,  -648,  -448,  -648,
  -258,  -309,  -647,  -274,  -278,  -648,  -613,  -614,  -648,   -18,
   -22,   -81,  -648,   -87,   -93,  -636,  -621,  -622,  -647,  -625,
  -104,  -648,   -89,  -648,  -648,  -223,  -636,  -647,  -358,  -647,
  -297,  -363,  -636,  -640,  -307,  -611,  -648,  -636,  -648,  -548,
  -549,  -648,  -648,  -559,  -648,  -562,  -648,  -564,  -648,  -376,
  -648,  -378,  -380,  -387,  -636,  -580,  -590,  -600,  -604,  -647,
  -367,  -647,   -58,  -368,  -369,  -321,  -322,  -648,  -324,  -648,
  -636,  -621,  -622,  -625,  -303,  -647,  -116,  -117,  -118,  -648,
  -648,  -647,  -327,  -541,  -543,  -330,  -647,  -647,  -567,  -567,
  -648,  -636,  -648,  -647,  -480,  -482,  -486,  -492,  -494,   -11,
  -132,  -282,  -648,  -636,  -621,  -622,  -622,  -621,  -257,  -648,
  -639,  -647,   -43,  -208,   -44,  -209,   -70,   -45,  -211,   -46,
  -210,   -72,  -648,  -648,  -648,  -648,  -442,  -648,  -410,  -411,
  -636,  -413,  -647,  -432,  -431,  -648,  -444,  -647,  -446,  -269,
  -279,  -616,   -85,  -442,   -97,  -213,  -312,   -12,   -14,  -359,
  -361,  -647,  -465,  -459,  -647,  -460,  -461,  -301,  -254,  -423,
  -647,  -647,  -415,  -636,  -606,  -587,  -605,  -551,  -552,  -552,
  -578,  -552,  -552,  -597,  -552,  -575,  -592,  -636,  -648,  -385,
  -648,  -576,  -648,  -362,  -370,  -648,  -372,  -647,  -648,   -59,
  -323,  -648,  -442,  -648,  -116,  -117,  -120,  -636,  -647,  -648,
  -648,  -648,  -648,  -636,  -648,  -339,  -609,  -503,  -506,  -507,
  -508,  -509,  -648,  -283,  -442,   -42,  -207,  -264,  -648,  -243,
  -606,  -606,  -392,  -647,  -647,  -647,  -409,  -648,  -636,  -575,
  -583,  -584,  -594,  -452,   -65,  -647,  -647,  -464,  -648,  -648,
  -463,  -648,  -648,  -648,  -424,  -547,  -648,  -555,  -648,  -557,
  -648,  -560,  -648,  -563,  -565,  -377,  -379,  -383,  -648,  -388,
  -319,  -648,  -373,  -320,  -648,  -647,  -325,  -442,  -648,  -648,
  -331,  -335,  -337,  -544,  -546,  -545,  -505,  -648,  -390,  -391,
  -400,  -394,  -402,  -648,  -405,  -648,  -407,  -412,  -648,  -648,
  -582,  -648,  -449,  -647,  -647,  -535,  -536,  -648,  -648,  -294,
  -462,  -426,  -427,  -636,  -417,  -419,  -420,  -552,  -552,  -552,
  -552,  -381,  -648,  -386,  -648,  -647,  -278,  -647,  -328,  -542,
  -647,  -647,  -606,  -585,  -393,  -647,  -647,  -647,  -647,  -595,
  -647,  -414,  -593,  -648,  -304,   -13,  -458,  -647,  -648,  -648,
  -304,  -416,  -648,  -648,  -553,  -556,  -558,  -561,  -648,  -384,
  -647,  -454,  -455,  -456,  -648,  -648,  -389,  -648,  -397,  -648,
  -399,  -648,  -403,  -648,  -406,  -408,  -303,  -625,  -457,  -636,
  -621,  -622,  -625,  -303,  -418,  -552,  -382,  -371,  -332,  -340,
  -647,  -647,  -647,  -647,  -442,  -554,  -648,  -395,  -398,  -401,
  -404,  -647,  -396 ]

clist = [
'6,525,234,229,462,468,356,388,561,278,615,280,551,291,129,137,221,296',
'296,296,147,147,142,142,727,455,348,319,4,346,439,440,145,145,318,415',
'426,446,360,361,446,29,365,607,610,882,446,29,363,364,671,514,340,787',
'510,126,333,333,282,289,292,351,29,452,703,317,869,703,871,473,336,29',
'29,29,125,29,739,740,873,706,129,848,564,567,359,359,142,519,359,754',
'870,333,888,396,576,398,400,403,406,409,412,398,421,422,423,424,29,29',
'863,924,29,832,956,395,142,298,298,298,743,745,747,706,778,508,297,297',
'297,697,315,294,307,308,583,1006,237,1004,1029,397,648,376,366,651,130',
'413,898,629,353,631,359,359,359,359,630,900,925,352,1020,378,786,632',
'790,975,525,389,782,29,373,357,926,570,29,29,29,29,29,643,392,645,695',
'354,649,928,344,649,662,696,279,1003,2,1,574,643,859,358,736,889,762',
'428,517,477,518,927,837,693,1051,769,854,938,394,435,1029,399,463,296',
'703,703,402,713,375,405,433,408,478,411,907,722,456,706,792,793,414',
'899,1006,220,1074,536,868,709,936,847,865,472,450,451,1023,318,136,877',
'956,636,347,475,476,462,468,935,591,521,767,1025,419,29,29,29,29,29',
'29,29,296,516,1007,633,29,29,29,296,896,690,296,349,873,538,732,355',
',826,29,,456,,436,449,,,,524,524,453,,988,870,396,735,474,1026,,835',
'1027,545,548,843,737,,,318,438,438,291,129,318,718,530,29,,,555,,552',
'870,29,718,,29,611,434,445,1077,,445,333,,715,,549,445,537,,1035,1052',
'583,543,29,541,571,619,29,333,,,534,29,612,613,945,699,892,298,527,',
'529,,,531,532,129,297,298,,533,359,515,1080,,,,297,29,842,29,,520,,',
',718,333,1021,333,914,,,29,29,29,,839,947,949,315,951,953,870,954,315',
',770,,,959,978,979,,573,,,6,795,668,,795,,,661,,614,672,710,147,572',
'142,685,,,462,468,679,816,901,902,145,,684,821,660,,,524,524,703,,678',
'463,,858,803,296,29,,,,706,,,591,,,,,456,446,,,,700,701,,691,,446,446',
'472,677,967,679,446,446,1013,683,,,1068,711,,,664,,,714,678,,,812,814',
',839,,,817,819,29,,1056,942,,903,904,,,463,296,,749,552,,,9,855,,463',
'694,552,9,456,,,1044,1045,1046,1047,,1049,,474,,453,718,,472,,968,,333',
'583,583,,,,472,,333,,,,29,965,,726,,897,,,,,29,,,1076,,,,704,,,573,',
'707,,,29,,,775,463,296,,759,702,,761,,,,,1085,,,456,,,,763,994,446,',
',,,784,,,,472,704,,,573,834,,,,591,,591,,1015,915,29,785,733,29,,463',
'296,791,,,,29,,9,,1053,755,,1084,456,800,,425,29,672,147,,142,,29,,',
'833,,472,1054,1055,145,,,591,591,,749,846,828,879,,,672,857,,,,524,679',
'552,,684,29,29,,,,,,,844,29,29,678,862,881,,29,29,905,,,852,,856,929',
',,333,801,,,,,,,,704,573,333,,,813,815,,,,672,818,820,,,906,811,886',
',886,,,,463,,,296,,,,,,840,893,32,841,,445,,456,32,,,672,,,445,445,',
',472,912,445,445,845,32,853,,,,,142,,,32,32,32,,32,524,862,,930,718',
'29,876,,749,,749,29,438,,,,29,29,944,,,933,,29,,1069,828,449,,,32,32',
'955,,32,591,535,,,29,937,,,940,,,,961,,941,,730,891,,,,866,,973,866',
'913,969,29,,,,,,672,929,916,,929,562,,,962,,,,,29,,813,815,820,818,1011',
'749,32,29,29,,359,32,32,32,32,32,862,970,,765,766,974,768,,359,,,,445',
'981,981,981,29,,29,,,,,,,992,993,864,,29,29,,,,,,872,,874,,,333,,749',
',749,,929,,922,333,930,9,,930,1017,,930,,930,,,,,,,29,29,,,1019,,,1038',
',1041,573,,,749,916,,,852,1036,,32,32,32,32,32,32,32,,,,29,32,32,32',
'333,,,,,1050,,886,,,,32,,463,296,981,981,981,981,921,981,,923,1016,',
'29,,456,,,,930,,930,,930,472,930,,,886,672,472,982,984,986,29,32,,,',
'29,29,,32,,,32,890,,930,,,,,,,,29,,981,981,981,981,,,32,,,,32,981,,',
',32,,,,19,,,,,,19,866,,,922,,,922,,922,,,,,,238,32,,32,,,,,,238,238',
'238,,19,324,324,32,32,32,,,,,18,,,,,1008,18,1009,,1010,,,1058,1060,1062',
'1064,,1065,,,,238,238,,,238,370,,,,,,,1022,18,,921,,,921,960,921,1028',
'922,1030,922,963,922,,922,,966,,,,,,,32,971,972,,,,,,,1087,1088,1089',
'1090,,922,,,,,,1092,,19,,,,,238,238,238,238,19,,,,,,,,,,,,,1075,,,,',
',,,,32,,921,,921,1081,921,1082,921,1083,,,,18,,1018,,,,,,,18,,,,,,,',
',921,,,1091,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,32,19,238,443,238,238,443',
'238,,,,,443,238,238,32,,,,,,,,,,,19,,,,,,,,,,,1078,1079,,,,,,,18,,18',
',,18,,,,,,18,,,,,,238,32,,,32,,,238,18,,238,,32,,,,,,,,,,,,32,,,,,19',
'32,,,19,,,,324,19,,,,,,,,,,,,,,,,324,,,,,,32,32,,,19,,19,,,32,32,,,18',
',32,32,18,,238,19,19,18,,,,,,,,,,,627,,627,,,,,,,,,,,,,18,,18,,,,,,',
',,,,,,,18,18,,,,,,,,,,,,,,,,,,,19,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,32',
',,,,32,32,,42,,,,32,18,42,,,,,,,,238,,,,,,32,,,,,,,,,,,,,,42,323,323',
',,,,,,32,,,,,,,,,,,,,,,,,,,32,,,,,,19,,369,32,32,391,,,324,,238,,,,',
',324,,,,,,,,,238,,,32,,32,,,,,,,,,,,32,32,,18,,,,,,,,,,,,42,,,,,,,,',
'42,,,,,,,,19,,,19,,32,32,,,,,238,,,,,,,,,,,,238,,,,,,238,,,,,,32,,,',
',,,,,18,,,18,,,,,,,,,,,,443,238,,,,32,41,,,443,443,,41,,,443,443,,,',
'42,,,,,,32,,,,,32,32,,,,,,,,41,322,322,,18,42,324,,32,,,,,18,18,,,324',
',18,18,,,,,,,16,,,,,,16,,,368,,,390,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,19',
'42,,,,42,238,,,323,42,19,19,,,,,,19,,,41,,,,,323,,374,,41,,,,443,,42',
',42,,,,,,18,,,,,,,,42,42,,18,18,19,,,,,18,,,391,,391,,,,,,,,,19,,18',
',,,16,,,19,19,,,,,16,,,,,,,,,,18,,,,,,,,,238,,19,,,,42,41,,,18,,,19',
'238,,,,,18,18,,,,,,,,,,,,41,,,,,,,,,,,,,990,18,,,,19,19,,,997,,,18,',
',,,,,,,,,16,,441,,,441,,,,,,441,19,,,,,,,,,,,,,16,18,18,,41,,,,41,,',
'1032,322,41,,,19,,,,42,,,,,,,,323,322,,18,,,,,323,19,,41,,41,19,19,',
',,,,,,,,,,41,41,,,238,18,,,,,16,,,390,16,390,,,,16,,,,,,,18,,,,,18,18',
',,,,,42,,,42,,,,16,,16,,,,,,,,,,,,,,16,16,,41,,,,,,,,,,,,,,,,,20,,,',
',,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,326,326,,,,,,,,16,,,,,,,,,,,,,,,',
',,323,,,,,,,,372,,,323,,,,,,,,,,,,,,,,,41,,,,,,,,322,,,,,,,,322,,,,',
',,,,,,,,,,,,,20,42,,,,,,,,20,,,42,42,,,,,,42,,,,,,,,16,,,,,,,,,,,,41',
',,41,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,42,,,,,,,,,42,42,,,,,,,,,20',
',444,,16,444,,16,,,,444,,,,,,42,,,,,,,,20,,,42,,,,,,,,,,,,,,,,,,,,322',
',,,,,,,,,,322,391,,,441,,42,42,,,996,,,441,441,,,,,441,441,,,,,,,,,',
',20,,,,20,42,,,326,20,,,,,,,,,,,,41,,,,326,,,,391,,,41,41,42,20,,20',
',41,,,,,,,,,,,,20,20,,,42,,,,,42,42,,,628,,628,,,,,,,,,,,,41,,,,16,',
',,,,,,,,,16,16,,,41,,,16,,,,,,41,41,,,,,,,,20,441,,,,,,,,,,,,,,,,,41',
',,,,,16,,,,,41,,,,,,,,,,,,,,16,,,,,,,,,16,16,,,,,,,,390,,,,,41,41,,',
'995,,,,,,,,,16,,,,,,,,,,,16,,,,,,41,,,,,,,,,,,20,,,,,,,,326,,,,,390',
',,326,,41,,16,16,,,1000,,,,,,,,,,,,,,,41,,,,,41,41,,,,,16,,,,,,,,,,',
',,,,,,,,,,,,20,,,20,,,16,,,,,,,,,,,,,,,,,,,,,16,,,,,16,16,,,,,,,,,,',
',,,,,,,,,,,,,,,444,,,,,,,,245,444,444,,,,,444,444,295,295,295,,,,,,',
',,,,342,343,,345,,,,,,,,,,,,,326,,295,,,,,,,,,326,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,20,20,,,,,911,20,,,,,',
',,,,,,,,,,444,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,20,,,,,,,,',
'20,20,,,,,,,,,,,,,295,448,,,454,295,,,,,454,,,20,,,,,,,,,,245,20,,485',
'486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502',
'503,504,505,506,,,,,507,,,,628,,,,295,20,20,,,999,,295,,,295,,,,,,,295',
',295,,,295,295,,,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,628,,,,,20,557,,558',
',,,,,,,,295,,,,,,,,,20,,,,,20,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,295,,454,454,454,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295',
',,295,,295,,,,,,,,,,,,,,,,295,,,,,,,,,,725,,,,,,,,,,,295,,,295,,,,,',
',,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,295,454,295,,,808,,,295,295,454,454,,,',
',454,454,,,,,,,,,,,,,,,,,,,,,,,295,,,295,,,,,,,,,,,,,,,,454,,,,,295',
',,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,,,,,,,,,,295,,,,,,,,,,,,295,,,,,,,',
',,,,,,,,,,,,,295,,,,,,,454,,,,,,,,,,,,,454,454,454,454,,919,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,295,454,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,295',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,295' ]
        racc_goto_table = arr = ::Array.new(3896, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,89,39,37,49,49,104,69,12,171,115,37,64,87,120,21,21,45,45,45,74,74',
'70,70,14,35,60,62,2,39,28,28,73,73,13,69,10,24,23,23,24,53,23,108,108',
'109,24,53,41,41,36,51,77,123,49,8,79,79,50,50,50,6,53,32,90,59,159,90',
'159,32,63,53,53,53,5,53,153,153,213,218,120,16,85,85,30,30,70,35,30',
'148,208,79,111,6,170,6,6,6,6,6,6,6,23,23,23,23,53,53,162,158,53,160',
'146,188,70,86,86,86,205,205,205,218,67,172,84,84,84,52,58,57,57,57,202',
'165,26,164,214,189,192,130,5,192,7,189,131,68,86,68,30,30,30,30,132',
'133,159,84,134,135,136,137,138,139,89,124,119,53,117,106,150,103,53',
'53,53,53,53,193,100,193,88,83,193,156,80,193,75,54,48,163,3,1,166,193',
'167,168,169,44,42,31,175,60,176,162,178,180,181,182,183,184,187,29,214',
'190,87,45,90,90,191,64,25,194,13,195,37,196,197,64,6,218,198,199,200',
'201,165,22,164,20,206,19,17,15,210,70,30,30,211,13,11,148,146,217,126',
'30,30,49,49,160,207,60,115,158,7,53,53,53,53,53,53,53,45,87,159,125',
'53,53,53,45,67,35,45,127,213,60,128,129,,36,53,,6,,82,82,,,,6,6,76,',
'162,208,6,85,76,159,,52,159,37,39,36,170,,,13,84,84,87,120,13,49,188',
'53,,,37,,62,208,53,49,,53,23,26,26,109,,26,79,,35,,77,26,59,,16,111',
'202,59,53,63,6,37,53,79,,,8,53,13,13,153,172,36,86,82,,82,,,82,82,120',
'84,86,,5,30,57,159,,,,84,53,64,53,,57,,,,49,79,123,79,36,,,53,53,53',
',89,205,205,58,205,205,208,205,58,,35,,,149,153,153,,82,,,6,193,37,',
'193,,,21,,5,39,10,74,86,70,60,,,49,49,87,51,12,12,73,,87,51,2,,,6,6',
'90,,6,87,,85,35,45,53,,,,218,,,207,,,,,6,24,,,,60,60,,39,,24,24,70,50',
'36,87,24,24,149,50,,,14,60,,,82,,,60,6,,,32,32,,89,,,32,32,53,,153,12',
',170,170,,,87,45,,147,62,,,9,28,,87,50,62,9,6,,,205,205,205,205,,149',
',76,,76,49,,70,,12,,79,202,202,,,,70,,79,,,,53,108,,30,,35,,,,,53,,',
'149,,,,82,,,82,,82,,,53,,,41,87,45,,13,86,,13,,,,,205,,,6,,,,120,108',
'24,,,,,6,,,,70,82,,,82,104,,,,207,,207,,108,32,53,30,86,53,,87,45,30',
',,,53,,9,,115,82,,36,6,21,,9,53,39,74,,70,,53,,,171,,70,12,12,73,,,207',
'207,,147,60,6,147,,,39,60,,,,6,87,62,,87,53,53,,,,,,,62,53,53,6,39,60',
',53,53,69,,,6,,6,207,,,79,82,,,,,,,,82,82,79,,,76,76,,,,39,76,76,,,60',
'86,6,,6,,,,87,,,45,,,,,,82,13,56,82,,26,,6,56,,,39,,,26,26,,,70,13,26',
'26,76,56,82,,,,,70,,,56,56,56,,56,6,39,,209,49,53,82,,147,,147,53,84',
',,,53,53,60,,,13,,53,,35,6,82,,,56,56,60,,56,207,9,,,53,13,,,6,,,,23',
',13,,102,84,,,,154,,60,154,82,23,53,,,,,,39,207,76,,207,9,,,13,,,,,53',
',76,76,76,76,147,147,56,53,53,,30,56,56,56,56,56,39,120,,102,102,120',
'102,,30,,,,26,6,6,6,53,,53,,,,,,,13,13,152,,53,53,,,,,,157,,157,,,79',
',147,,147,,207,,154,79,209,9,,209,13,,209,,209,,,,,,,53,53,,,120,,,37',
',39,82,,,147,76,,,6,13,,56,56,56,56,56,56,56,,,,53,56,56,56,79,,,,,13',
',6,,,,56,,87,45,6,6,6,6,152,6,,157,82,,53,,6,,,,209,,209,,209,70,209',
',,6,39,70,155,155,155,53,56,,,,53,53,,56,,,56,102,,209,,,,,,,,53,,6',
'6,6,6,,,56,,,,56,6,,,,56,,,,34,,,,,,34,154,,,154,,,154,,154,,,,,,34',
'56,,56,,,,,,34,34,34,,34,34,34,56,56,56,,,,,33,,,,,157,33,157,,157,',
',155,155,155,155,,155,,,,34,34,,,34,34,,,,,,,152,33,,152,,,152,102,152',
'157,154,157,154,102,154,,154,,102,,,,,,,56,102,102,,,,,,,155,155,155',
'155,,154,,,,,,155,,34,,,,,34,34,34,34,34,,,,,,,,,,,,,157,,,,,,,,,56',
',152,,152,157,152,157,152,157,,,,33,,102,,,,,,,33,,,,,,,,,152,,,157',
',,,,,,,,,,,,,,,,,,,56,,,,,,,,,,56,34,34,34,34,34,34,34,,,,,34,34,34',
'56,,,,,,,,,,,34,,,,,,,,,,,102,102,,,,,,,33,,33,,,33,,,,,,33,,,,,,34',
'56,,,56,,,34,33,,34,,56,,,,,,,,,,,,56,,,,,34,56,,,34,,,,34,34,,,,,,',
',,,,,,,,,34,,,,,,56,56,,,34,,34,,,56,56,,,33,,56,56,33,,34,34,34,33',
',,,,,,,,,,34,,34,,,,,,,,,,,,,33,,33,,,,,,,,,,,,,,33,33,,,,,,,,,,,,,',
',,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,,,56,,,,,56,56,,66,,,,56,33,66',
',,,,,,,34,,,,,,56,,,,,,,,,,,,,,66,66,66,,,,,,,56,,,,,,,,,,,,,,,,,,,56',
',,,,,34,,66,56,56,66,,,34,,34,,,,,,34,,,,,,,,,34,,,56,,56,,,,,,,,,,',
'56,56,,33,,,,,,,,,,,,66,,,,,,,,,66,,,,,,,,34,,,34,,56,56,,,,,34,,,,',
',,,,,,,34,,,,,,34,,,,,,56,,,,,,,,,33,,,33,,,,,,,,,,,,34,34,,,,56,65',
',,34,34,,65,,,34,34,,,,66,,,,,,56,,,,,56,56,,,,,,,,65,65,65,,33,66,34',
',56,,,,,33,33,,,34,,33,33,,,,,,,27,,,,,,27,,,65,,,65,,,,,,,,,,,,,,,',
',,,,,,27,,,,,,,,34,66,,,,66,34,,,66,66,34,34,,,,,,34,,,65,,,,,66,,27',
',65,,,,34,,66,,66,,,,,,33,,,,,,,,66,66,,33,33,34,,,,,33,,,66,,66,,,',
',,,,,34,,33,,,,27,,,34,34,,,,,27,,,,,,,,,,33,,,,,,,,,34,,34,,,,66,65',
',,33,,,34,34,,,,,33,33,,,,,,,,,,,,65,,,,,,,,,,,,,34,33,,,,34,34,,,34',
',,33,,,,,,,,,,,27,,27,,,27,,,,,,27,34,,,,,,,,,,,,,27,33,33,,65,,,,65',
',,34,65,65,,,34,,,,66,,,,,,,,66,65,,33,,,,,66,34,,65,,65,34,34,,,,,',
',,,,,,65,65,,,34,33,,,,,27,,,65,27,65,,,,27,,,,,,,33,,,,,33,33,,,,,',
'66,,,66,,,,27,,27,,,,,,,,,,,,,,27,27,,65,,,,,,,,,,,,,,,,,38,,,,,,38',
',,,,,,,,,,,,,,,,,,,,,,,,,,,38,38,38,,,,,,,,27,,,,,,,,,,,,,,,,,,66,,',
',,,,,38,,,66,,,,,,,,,,,,,,,,,65,,,,,,,,65,,,,,,,,65,,,,,,,,,,,,,,,,',
',38,66,,,,,,,,38,,,66,66,,,,,,66,,,,,,,,27,,,,,,,,,,,,65,,,65,,,,,,',
',,,,,,,,,66,,,,,,,,,,,,,,,,,,,66,,,,,,,,,66,66,,,,,,,,,38,,38,,27,38',
',27,,,,38,,,,,,66,,,,,,,,38,,,66,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,65',
'66,,,27,,66,66,,,66,,,27,27,,,,,27,27,,,,,,,,,,,38,,,,38,66,,,38,38',
',,,,,,,,,,,65,,,,38,,,,66,,,65,65,66,38,,38,,65,,,,,,,,,,,,38,38,,,66',
',,,,66,66,,,38,,38,,,,,,,,,,,,65,,,,27,,,,,,,,,,,27,27,,,65,,,27,,,',
',,65,65,,,,,,,,38,27,,,,,,,,,,,,,,,,,65,,,,,,27,,,,,65,,,,,,,,,,,,,',
'27,,,,,,,,,27,27,,,,,,,,65,,,,,65,65,,,65,,,,,,,,,27,,,,,,,,,,,27,,',
',,,65,,,,,,,,,,,38,,,,,,,,38,,,,,65,,,38,,65,,27,27,,,27,,,,,,,,,,,',
',,,65,,,,,65,65,,,,,27,,,,,,,,,,,,,,,,,,,,,,,38,,,38,,,27,,,,,,,,,,',
',,,,,,,,,,27,,,,,27,27,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,40,38,38,',
',,,38,38,40,40,40,,,,,,,,,,,40,40,,40,,,,,,,,,,,,,38,,40,,,,,,,,,38',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,38,38',
',,,,38,38,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,',
',,,38,,,,,,,,,38,38,,,,,,,,,,,,,40,40,,,40,40,,,,,40,,,38,,,,,,,,,,40',
'38,,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40',
',,,,40,,,,38,,,,40,38,38,,,38,,40,,,40,,,,,,,40,,40,,,40,40,,,,,,,,38',
',,,,,,,,,,,,,,,,,,,,,,,38,,,,,38,40,,40,,,,,,,,,40,,,,,,,,,38,,,,,38',
'38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,40,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,40,,,,,,,,,,,,,,,,40,,,,,,,,,',
'40,,,,,,,,,,,40,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,',
',,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,40,,,40,',
',40,40,40,40,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,40,,,40,,,,,,,,,,,,,,,',
'40,,,,,40,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,,,,40',
',,,,,,,,,,,,,,,,,,,,40,,,,,,,40,,,,,,,,,,,,,40,40,40,40,,40,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,40,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,40' ]
        racc_goto_check = arr = ::Array.new(3896, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   189,    26,   188,   nil,    69,    -2,   134,    50,   533,
  -100,   236,  -339,    -2,  -536,  -488,  -646,  -609,   nil,  -297,
   -79,     4,   221,   -29,  -187,   146,   111,  1826,  -193,   -14,
    17,    60,  -164,  1139,  1095,  -203,  -405,   -16,  2207,   -20,
  2858,   -21,  -415,   nil,  -567,   -15,   nil,   nil,   159,  -225,
    29,  -231,  -390,    39,  -328,   nil,   772,    97,    92,    29,
   -36,   nil,   -10,    32,  -325,  1765,  1559,  -503,  -231,   -68,
    11,   nil,   nil,    21,     9,  -248,    70,     8,   nil,    19,
   135,   nil,    67,   116,    92,  -270,    83,   -17,  -332,  -297,
  -459,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   101,   nil,   299,  -186,   -59,   nil,   101,   nil,  -317,  -714,
   nil,  -669,   nil,   nil,   nil,  -356,   nil,    94,   nil,  -465,
     9,   nil,   nil,  -579,    88,  -118,   189,   217,  -280,   219,
    66,  -638,  -225,  -632,  -814,    83,  -473,  -229,  -473,  -744,
   nil,   nil,   nil,   nil,   nil,   nil,  -766,   -61,  -503,  -462,
  -662,   nil,   197,  -501,   127,   128,  -649,   200,  -721,  -676,
  -582,   nil,  -629,  -756,  -808,  -810,  -168,  -544,   127,  -380,
  -264,   -16,  -154,   nil,   nil,   -89,   -88,   nil,  -496,   nil,
  -306,  -813,  -412,  -523,  -647,   nil,   nil,   116,    18,    40,
   113,   117,  -264,  -222,   119,   120,   121,  -568,  -412,  -412,
   127,  -552,  -226,   nil,   nil,  -462,  -506,  -102,  -652,   -18,
  -498,  -733,   nil,  -666,  -847,   nil,   nil,  -144,  -447 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   310,     7,   367,   313,
   nil,   nil,   nil,   560,   nil,   nil,   nil,   nil,   309,   311,
   nil,   nil,   nil,   nil,    14,    15,    21,   243,   nil,   nil,
    17,   nil,   442,   244,   341,   nil,   nil,   780,   242,   350,
    24,   nil,   nil,   362,   nil,    25,    26,    27,   nil,   721,
   nil,   nil,   nil,   330,   nil,    28,   327,   457,    35,   nil,
   nil,    37,    40,    39,   nil,   239,   240,   626,   nil,   144,
   465,   143,   146,    90,    91,   nil,   447,   105,    47,    50,
   275,   553,   301,   nil,   458,   nil,   459,   470,   680,   522,
   299,   283,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    61,   nil,   nil,   284,    65,   nil,    67,   nil,   nil,
    68,   884,    69,    70,    71,   nil,    72,   nil,    73,   nil,
   608,    74,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   288,   277,   729,   851,   617,   885,   751,   590,   nil,   752,
  1024,   920,   578,   nil,   579,   nil,   nil,   580,   nil,   582,
   nil,   829,   nil,   nil,   nil,   588,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   469,   286,   nil,   nil,   698,   nil,   509,
   nil,   nil,   nil,   nil,   nil,    89,    92,    94,   nil,   nil,
   nil,   nil,   nil,   638,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   867,   789,   577,   nil,   581,   875,   593,   595,
   596,   931,   599,   600,   932,   603,   606,   nil,   304 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  3, 153, :_reduce_10,
  3, 156, :_reduce_11,
  0, 163, :_reduce_12,
  6, 158, :_reduce_13,
  3, 158, :_reduce_14,
  2, 159, :_reduce_15,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_18,
  2, 164, :_reduce_19,
  1, 165, :_reduce_none,
  0, 166, :_reduce_21,
  3, 165, :_reduce_22,
  0, 177, :_reduce_23,
  4, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  2, 155, :_reduce_28,
  3, 155, :_reduce_29,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  4, 155, :_reduce_34,
  1, 155, :_reduce_none,
  3, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  1, 155, :_reduce_none,
  3, 170, :_reduce_40,
  3, 170, :_reduce_41,
  6, 170, :_reduce_42,
  5, 170, :_reduce_43,
  5, 170, :_reduce_44,
  5, 170, :_reduce_45,
  5, 170, :_reduce_46,
  3, 170, :_reduce_47,
  1, 178, :_reduce_48,
  1, 178, :_reduce_none,
  1, 176, :_reduce_none,
  3, 176, :_reduce_51,
  3, 176, :_reduce_52,
  3, 176, :_reduce_53,
  2, 176, :_reduce_54,
  1, 176, :_reduce_none,
  1, 169, :_reduce_56,
  0, 189, :_reduce_57,
  0, 190, :_reduce_58,
  4, 187, :_reduce_59,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 192, :_reduce_none,
  4, 192, :_reduce_63,
  0, 200, :_reduce_64,
  4, 197, :_reduce_65,
  1, 199, :_reduce_66,
  2, 191, :_reduce_67,
  3, 191, :_reduce_68,
  4, 191, :_reduce_69,
  5, 191, :_reduce_70,
  4, 191, :_reduce_71,
  5, 191, :_reduce_72,
  2, 191, :_reduce_73,
  2, 191, :_reduce_74,
  2, 191, :_reduce_75,
  2, 191, :_reduce_76,
  2, 191, :_reduce_77,
  1, 171, :_reduce_none,
  3, 171, :_reduce_79,
  1, 205, :_reduce_none,
  3, 205, :_reduce_81,
  1, 204, :_reduce_82,
  2, 204, :_reduce_83,
  3, 204, :_reduce_84,
  5, 204, :_reduce_85,
  2, 204, :_reduce_86,
  4, 204, :_reduce_87,
  2, 204, :_reduce_88,
  4, 204, :_reduce_89,
  1, 204, :_reduce_90,
  3, 204, :_reduce_91,
  1, 208, :_reduce_none,
  3, 208, :_reduce_93,
  2, 207, :_reduce_94,
  3, 207, :_reduce_95,
  1, 210, :_reduce_96,
  3, 210, :_reduce_97,
  1, 209, :_reduce_98,
  1, 209, :_reduce_99,
  4, 209, :_reduce_100,
  3, 209, :_reduce_101,
  3, 209, :_reduce_102,
  3, 209, :_reduce_103,
  3, 209, :_reduce_104,
  2, 209, :_reduce_105,
  1, 209, :_reduce_106,
  1, 173, :_reduce_107,
  1, 173, :_reduce_108,
  4, 173, :_reduce_109,
  3, 173, :_reduce_110,
  3, 173, :_reduce_111,
  3, 173, :_reduce_112,
  3, 173, :_reduce_113,
  2, 173, :_reduce_114,
  1, 173, :_reduce_115,
  1, 213, :_reduce_116,
  1, 213, :_reduce_none,
  2, 214, :_reduce_118,
  1, 214, :_reduce_119,
  3, 214, :_reduce_120,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_124,
  1, 215, :_reduce_125,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 167, :_reduce_128,
  1, 167, :_reduce_none,
  1, 168, :_reduce_130,
  0, 221, :_reduce_131,
  4, 168, :_reduce_132,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  3, 186, :_reduce_205,
  3, 186, :_reduce_206,
  6, 186, :_reduce_207,
  5, 186, :_reduce_208,
  5, 186, :_reduce_209,
  5, 186, :_reduce_210,
  5, 186, :_reduce_211,
  0, 227, :_reduce_212,
  5, 186, :_reduce_213,
  3, 186, :_reduce_214,
  3, 186, :_reduce_215,
  3, 186, :_reduce_216,
  3, 186, :_reduce_217,
  3, 186, :_reduce_218,
  3, 186, :_reduce_219,
  3, 186, :_reduce_220,
  3, 186, :_reduce_221,
  3, 186, :_reduce_222,
  4, 186, :_reduce_223,
  2, 186, :_reduce_224,
  2, 186, :_reduce_225,
  3, 186, :_reduce_226,
  3, 186, :_reduce_227,
  3, 186, :_reduce_228,
  3, 186, :_reduce_229,
  1, 186, :_reduce_none,
  3, 186, :_reduce_231,
  3, 186, :_reduce_232,
  3, 186, :_reduce_233,
  3, 186, :_reduce_234,
  3, 186, :_reduce_235,
  2, 186, :_reduce_236,
  2, 186, :_reduce_237,
  3, 186, :_reduce_238,
  3, 186, :_reduce_239,
  3, 186, :_reduce_240,
  3, 186, :_reduce_241,
  3, 186, :_reduce_242,
  6, 186, :_reduce_243,
  1, 186, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  3, 224, :_reduce_249,
  3, 224, :_reduce_250,
  1, 228, :_reduce_251,
  1, 229, :_reduce_none,
  2, 229, :_reduce_253,
  4, 229, :_reduce_254,
  2, 229, :_reduce_255,
  1, 222, :_reduce_none,
  3, 222, :_reduce_257,
  3, 233, :_reduce_258,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 181, :_reduce_261,
  1, 181, :_reduce_262,
  2, 181, :_reduce_263,
  4, 181, :_reduce_264,
  2, 181, :_reduce_265,
  1, 203, :_reduce_266,
  2, 203, :_reduce_267,
  2, 203, :_reduce_268,
  4, 203, :_reduce_269,
  1, 203, :_reduce_270,
  0, 237, :_reduce_271,
  2, 196, :_reduce_272,
  2, 236, :_reduce_273,
  2, 235, :_reduce_274,
  1, 235, :_reduce_none,
  1, 230, :_reduce_276,
  2, 230, :_reduce_277,
  3, 230, :_reduce_278,
  4, 230, :_reduce_279,
  1, 175, :_reduce_280,
  1, 175, :_reduce_281,
  3, 174, :_reduce_282,
  4, 174, :_reduce_283,
  2, 174, :_reduce_284,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_295,
  0, 272, :_reduce_296,
  4, 225, :_reduce_297,
  2, 225, :_reduce_298,
  0, 273, :_reduce_299,
  0, 274, :_reduce_300,
  5, 225, :_reduce_301,
  3, 225, :_reduce_302,
  3, 225, :_reduce_303,
  2, 225, :_reduce_304,
  3, 225, :_reduce_305,
  0, 275, :_reduce_306,
  4, 225, :_reduce_307,
  1, 225, :_reduce_308,
  4, 225, :_reduce_309,
  3, 225, :_reduce_310,
  1, 225, :_reduce_311,
  5, 225, :_reduce_312,
  4, 225, :_reduce_313,
  3, 225, :_reduce_314,
  2, 225, :_reduce_315,
  1, 225, :_reduce_none,
  2, 225, :_reduce_317,
  2, 225, :_reduce_318,
  6, 225, :_reduce_319,
  6, 225, :_reduce_320,
  4, 225, :_reduce_321,
  4, 225, :_reduce_322,
  5, 225, :_reduce_323,
  4, 225, :_reduce_324,
  6, 225, :_reduce_325,
  0, 276, :_reduce_326,
  0, 277, :_reduce_327,
  7, 225, :_reduce_328,
  0, 278, :_reduce_329,
  0, 279, :_reduce_330,
  0, 280, :_reduce_331,
  9, 225, :_reduce_332,
  0, 281, :_reduce_333,
  0, 282, :_reduce_334,
  6, 225, :_reduce_335,
  0, 283, :_reduce_336,
  6, 225, :_reduce_337,
  0, 284, :_reduce_338,
  0, 285, :_reduce_339,
  9, 225, :_reduce_340,
  1, 225, :_reduce_341,
  1, 225, :_reduce_342,
  1, 225, :_reduce_343,
  1, 225, :_reduce_344,
  1, 180, :_reduce_345,
  1, 247, :_reduce_none,
  1, 253, :_reduce_none,
  1, 256, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 262, :_reduce_none,
  1, 264, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 286, :_reduce_none,
  1, 287, :_reduce_none,
  1, 288, :_reduce_none,
  1, 289, :_reduce_none,
  1, 290, :_reduce_none,
  1, 161, :_reduce_none,
  1, 291, :_reduce_none,
  1, 248, :_reduce_none,
  1, 202, :_reduce_none,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 254, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 255, :_reduce_none,
  5, 255, :_reduce_371,
  1, 257, :_reduce_none,
  2, 257, :_reduce_373,
  1, 263, :_reduce_none,
  1, 263, :_reduce_375,
  1, 292, :_reduce_none,
  3, 292, :_reduce_377,
  1, 295, :_reduce_378,
  3, 295, :_reduce_379,
  1, 294, :_reduce_380,
  4, 294, :_reduce_381,
  6, 294, :_reduce_382,
  3, 294, :_reduce_383,
  5, 294, :_reduce_384,
  2, 294, :_reduce_385,
  4, 294, :_reduce_386,
  1, 294, :_reduce_387,
  3, 294, :_reduce_388,
  4, 296, :_reduce_389,
  2, 296, :_reduce_390,
  2, 296, :_reduce_391,
  1, 296, :_reduce_392,
  2, 301, :_reduce_393,
  1, 301, :_reduce_none,
  6, 302, :_reduce_395,
  8, 302, :_reduce_396,
  4, 302, :_reduce_397,
  6, 302, :_reduce_398,
  4, 302, :_reduce_399,
  2, 302, :_reduce_400,
  6, 302, :_reduce_401,
  2, 302, :_reduce_402,
  4, 302, :_reduce_403,
  6, 302, :_reduce_404,
  2, 302, :_reduce_405,
  4, 302, :_reduce_406,
  2, 302, :_reduce_407,
  4, 302, :_reduce_408,
  1, 302, :_reduce_409,
  1, 306, :_reduce_410,
  1, 306, :_reduce_411,
  3, 307, :_reduce_412,
  1, 307, :_reduce_413,
  4, 307, :_reduce_414,
  1, 308, :_reduce_none,
  4, 308, :_reduce_416,
  1, 309, :_reduce_417,
  3, 309, :_reduce_418,
  1, 310, :_reduce_419,
  1, 310, :_reduce_none,
  0, 314, :_reduce_421,
  0, 315, :_reduce_422,
  4, 252, :_reduce_423,
  4, 312, :_reduce_424,
  1, 312, :_reduce_425,
  3, 313, :_reduce_426,
  3, 313, :_reduce_427,
  3, 317, :_reduce_428,
  2, 193, :_reduce_429,
  4, 193, :_reduce_430,
  5, 193, :_reduce_431,
  5, 193, :_reduce_432,
  0, 320, :_reduce_433,
  3, 251, :_reduce_434,
  4, 251, :_reduce_435,
  4, 251, :_reduce_436,
  3, 251, :_reduce_437,
  3, 251, :_reduce_438,
  3, 251, :_reduce_439,
  2, 251, :_reduce_440,
  1, 251, :_reduce_441,
  4, 251, :_reduce_442,
  0, 321, :_reduce_443,
  4, 250, :_reduce_444,
  0, 322, :_reduce_445,
  4, 250, :_reduce_446,
  0, 323, :_reduce_447,
  0, 324, :_reduce_448,
  4, 198, :_reduce_449,
  0, 325, :_reduce_450,
  0, 326, :_reduce_451,
  4, 318, :_reduce_452,
  0, 328, :_reduce_453,
  6, 261, :_reduce_454,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  6, 160, :_reduce_457,
  0, 160, :_reduce_458,
  1, 329, :_reduce_459,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 330, :_reduce_462,
  1, 330, :_reduce_none,
  2, 162, :_reduce_464,
  1, 162, :_reduce_none,
  1, 238, :_reduce_466,
  1, 238, :_reduce_467,
  1, 238, :_reduce_none,
  1, 239, :_reduce_469,
  1, 332, :_reduce_470,
  1, 332, :_reduce_none,
  2, 332, :_reduce_472,
  3, 333, :_reduce_473,
  1, 333, :_reduce_474,
  3, 240, :_reduce_475,
  3, 241, :_reduce_476,
  3, 242, :_reduce_477,
  3, 242, :_reduce_478,
  1, 337, :_reduce_479,
  3, 337, :_reduce_480,
  1, 338, :_reduce_none,
  2, 338, :_reduce_482,
  3, 244, :_reduce_483,
  3, 244, :_reduce_484,
  1, 340, :_reduce_485,
  3, 340, :_reduce_486,
  3, 243, :_reduce_487,
  3, 243, :_reduce_488,
  3, 245, :_reduce_489,
  3, 245, :_reduce_490,
  1, 341, :_reduce_491,
  3, 341, :_reduce_492,
  1, 342, :_reduce_493,
  3, 342, :_reduce_494,
  1, 334, :_reduce_495,
  2, 334, :_reduce_496,
  1, 335, :_reduce_497,
  2, 335, :_reduce_498,
  1, 336, :_reduce_499,
  2, 336, :_reduce_500,
  1, 339, :_reduce_501,
  0, 344, :_reduce_502,
  3, 339, :_reduce_503,
  0, 345, :_reduce_504,
  4, 339, :_reduce_505,
  1, 343, :_reduce_506,
  1, 343, :_reduce_507,
  1, 343, :_reduce_508,
  1, 343, :_reduce_none,
  2, 219, :_reduce_510,
  1, 219, :_reduce_511,
  1, 346, :_reduce_none,
  1, 346, :_reduce_none,
  1, 346, :_reduce_none,
  1, 346, :_reduce_none,
  3, 220, :_reduce_516,
  1, 331, :_reduce_none,
  2, 331, :_reduce_518,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_528,
  1, 212, :_reduce_529,
  1, 212, :_reduce_530,
  1, 212, :_reduce_531,
  1, 212, :_reduce_532,
  1, 212, :_reduce_533,
  1, 212, :_reduce_534,
  1, 246, :_reduce_535,
  1, 246, :_reduce_536,
  1, 179, :_reduce_537,
  1, 179, :_reduce_538,
  1, 184, :_reduce_539,
  1, 184, :_reduce_540,
  0, 347, :_reduce_541,
  4, 265, :_reduce_542,
  1, 265, :_reduce_543,
  3, 269, :_reduce_544,
  0, 349, :_reduce_545,
  3, 269, :_reduce_546,
  4, 348, :_reduce_547,
  2, 348, :_reduce_548,
  2, 348, :_reduce_549,
  1, 348, :_reduce_none,
  2, 351, :_reduce_551,
  0, 351, :_reduce_552,
  6, 316, :_reduce_553,
  8, 316, :_reduce_554,
  4, 316, :_reduce_555,
  6, 316, :_reduce_556,
  4, 316, :_reduce_557,
  6, 316, :_reduce_558,
  2, 316, :_reduce_559,
  4, 316, :_reduce_560,
  6, 316, :_reduce_561,
  2, 316, :_reduce_562,
  4, 316, :_reduce_563,
  2, 316, :_reduce_564,
  4, 316, :_reduce_565,
  1, 316, :_reduce_566,
  0, 316, :_reduce_567,
  1, 311, :_reduce_568,
  1, 311, :_reduce_569,
  1, 311, :_reduce_570,
  1, 311, :_reduce_571,
  1, 293, :_reduce_none,
  1, 293, :_reduce_573,
  1, 353, :_reduce_none,
  1, 354, :_reduce_none,
  3, 354, :_reduce_576,
  1, 303, :_reduce_577,
  3, 303, :_reduce_578,
  1, 355, :_reduce_none,
  2, 356, :_reduce_580,
  1, 356, :_reduce_581,
  2, 357, :_reduce_582,
  1, 357, :_reduce_583,
  1, 297, :_reduce_none,
  3, 297, :_reduce_585,
  1, 350, :_reduce_none,
  3, 350, :_reduce_587,
  1, 358, :_reduce_none,
  1, 358, :_reduce_none,
  2, 298, :_reduce_590,
  1, 298, :_reduce_591,
  3, 359, :_reduce_592,
  3, 360, :_reduce_593,
  1, 304, :_reduce_594,
  3, 304, :_reduce_595,
  1, 352, :_reduce_596,
  3, 352, :_reduce_597,
  1, 361, :_reduce_none,
  1, 361, :_reduce_none,
  2, 305, :_reduce_600,
  1, 305, :_reduce_601,
  1, 362, :_reduce_none,
  1, 362, :_reduce_none,
  2, 300, :_reduce_604,
  2, 299, :_reduce_605,
  0, 299, :_reduce_606,
  1, 270, :_reduce_none,
  0, 363, :_reduce_608,
  4, 270, :_reduce_609,
  1, 249, :_reduce_610,
  2, 249, :_reduce_611,
  1, 232, :_reduce_none,
  3, 232, :_reduce_613,
  3, 364, :_reduce_614,
  2, 364, :_reduce_615,
  4, 364, :_reduce_616,
  2, 364, :_reduce_617,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  1, 319, :_reduce_none,
  1, 271, :_reduce_none,
  1, 271, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  2, 206, :_reduce_none,
  2, 182, :_reduce_none,
  0, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 266, :_reduce_643,
  1, 266, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_646,
  0, 152, :_reduce_647 ]

racc_reduce_n = 648

racc_shift_n = 1093

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "@2",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "k_else",
  "opt_ensure",
  "@3",
  "stmts",
  "stmt_or_begin",
  "@4",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@5",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@6",
  "@7",
  "command",
  "block_command",
  "block_call",
  "call_op2",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@8",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@9",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@10",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@11",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "opt_else",
  "k_while",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_do",
  "k_do_block",
  "k_rescue",
  "k_ensure",
  "k_when",
  "k_elsif",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "@27",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@28",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "args_tail",
  "@39",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      _, _, block = val
                      result = block
                    
    result
end

def _reduce_11(val, _values, result)
                      _, stmt, _ = val
                      result = new_iter s(:preexe), 0, stmt
                    
    result
end

def _reduce_12(val, _values, result)
                      res = _values[-2]
                      yyerror "else without rescue is useless" unless res
                    
    result
end

def _reduce_13(val, _values, result)
                      body, resc, _, _, els, ens = val

                      result = new_body [body, resc, els, ens]
                    
    result
end

def _reduce_14(val, _values, result)
                      body, resc, ens = val

                      result = new_body [body, resc, nil, ens]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_19(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_22(val, _values, result)
                      _, _, stmt = val
                      result = stmt
                    
    result
end

def _reduce_23(val, _values, result)
                      lexer.lex_state = EXPR_FNAME
                      result = self.lexer.lineno
                    
    result
end

def _reduce_24(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_27(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_28(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_29(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_30(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_33(val, _values, result)
                      body, _, resbody = val
                      result = new_rescue body, new_resbody(s(:array), resbody)
                    
    result
end

def _reduce_34(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_37(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_41(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_42(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_44(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_47(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_48(val, _values, result)
                      expr, = val
                      result = value_expr expr
                    
    result
end

# reduce 49 omitted

# reduce 50 omitted

def _reduce_51(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_52(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_53(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_54(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 55 omitted

def _reduce_56(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

def _reduce_57(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_58(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_59(val, _values, result)
                      _, expr, _, _ = val
                      result = expr
                    
    result
end

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      # self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_65(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      # self.env.unextend
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_68(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_69(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_70(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_71(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_72(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_73(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_74(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_75(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_76(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_77(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 80 omitted

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_84(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_85(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_87(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_89(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_90(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_91(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_96(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_109(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_110(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_112(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_113(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_114(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_115(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_119(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_120(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[0]
                    
    result
end

def _reduce_125(val, _values, result)
                      (sym, _line), = val
                      lexer.lex_state = EXPR_END
                      result = sym
                    
    result
end

# reduce 126 omitted

# reduce 127 omitted

def _reduce_128(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 129 omitted

def _reduce_130(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_131(val, _values, result)
                      lexer.lex_state = EXPR_FNAME
                    
    result
end

def _reduce_132(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

def _reduce_205(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_207(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_210(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_211(val, _values, result)
                      lhs1, _, lhs2, op, rhs = val

                      lhs = s(:colon2, lhs1, lhs2.to_sym).line lhs1.line
                      result = new_const_op_asgn [lhs, op, rhs]
                    
    result
end

def _reduce_212(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_213(val, _values, result)
                      _, lhs, line, op, rhs = val

                      lhs = s(:colon3, lhs.to_sym).line line
                      result = new_const_op_asgn [lhs, op, rhs]
                    
    result
end

def _reduce_214(val, _values, result)
                      # TODO: lhs = var_field val[0]
                      asgn = new_op_asgn val
                      result = self.backref_assign_error asgn
                    
    result
end

def _reduce_215(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_216(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_237(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      lhs, op, rhs = val
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_250(val, _values, result)
                      lhs, op, rhs = val
                      warn "comparison '%s' after comparison", op
                      result = new_call lhs, op.to_sym, argl(rhs)
                    
    result
end

def _reduce_251(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      body, _, resbody = val
                      body    = value_expr body
                      resbody = remove_begin resbody
                      result  = new_rescue(body, new_resbody(s(:array), resbody))
                    
    result
end

def _reduce_258(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 259 omitted

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_264(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_266(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_267(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_271(val, _values, result)
                      result = lexer.cmdarg.store true
                    
    result
end

def _reduce_272(val, _values, result)
                      lexer.cmdarg.restore val[0]
                      result = val[1]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_278(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_282(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

def _reduce_295(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_296(val, _values, result)
                      result = self.lexer.lineno
                      # TODO:
                      # $<val>1 = cmdarg_stack;
                      # CMDARG_SET(0);
                    
    result
end

def _reduce_297(val, _values, result)
                      # TODO: CMDARG_SET($<val>1);
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_298(val, _values, result)
                      # TODO: lex_state = EXPR_ENDARG in between
                      debug20 13, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      result = lexer.cmdarg.store false
                      # result = self.lexer.cmdarg.stack.dup
                      # lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.lex_state = EXPR_ENDARG
                    
    result
end

def _reduce_301(val, _values, result)
                      _, cmdarg, stmt, _, _, = val
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.restore cmdarg
                      result = stmt
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_303(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_304(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_306(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_308(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_312(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_314(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_315(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 316 omitted

def _reduce_317(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_318(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, t, f
                    
    result
end

def _reduce_320(val, _values, result)
                      _, c, _, t, f, _ = val
                      result = new_if c, f, t
                    
    result
end

def _reduce_321(val, _values, result)
                      _, cond, body, _ = val
                      result = new_while body, cond, true
                    
    result
end

def _reduce_322(val, _values, result)
                      _, cond, body, _ = val
                      result = new_until body, cond, true
                    
    result
end

def _reduce_323(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_324(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_325(val, _values, result)
                      _, var, _, iter, body, _ = val
                      result = new_for iter, var, body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_331(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_332(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_334(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_337(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_338(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = EXPR_FNAME
                    
    result
end

def _reduce_339(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = EXPR_ENDFN # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_340(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_341(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_343(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_344(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_345(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

def _reduce_371(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_380(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_381(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_382(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_383(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_384(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_385(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_386(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_387(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_388(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_389(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_410(val, _values, result)
 result = 0 
    result
end

def _reduce_411(val, _values, result)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

def _reduce_413(val, _values, result)
                      result = s(:args)
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO: current_arg = 0
                      result = args val
                    
    result
end

# reduce 415 omitted

def _reduce_416(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_417(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_418(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_419(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.cmdarg.store(false), self.lexer.lineno]
                    
    result
end

def _reduce_423(val, _values, result)
                      lpar, args, (cmdarg, lineno), body = val
                      lexer.lpar_beg = lpar

                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.lexpop

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      result.line = lineno
                      self.env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_425(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_428(val, _values, result)
                      # TODO: maybe fix lineno to kDO's lineno?
                      result = val[1]
                    
    result
end

def _reduce_429(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_431(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_432(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_438(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_443(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_444(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_445(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_446(val, _values, result)
                      _, line, body, _ = val

                      result = body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_447(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_448(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_449(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_brace_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                      lexer.cmdarg.pop # because of: cmdarg_stack >> 1 ?
                    
    result
end

def _reduce_450(val, _values, result)
 self.env.extend :dynamic; result = self.lexer.lineno 
    result
end

def _reduce_451(val, _values, result)
 result = lexer.cmdarg.store(false) 
    result
end

def _reduce_452(val, _values, result)
                      line, cmdarg, param, cmpstmt = val

                      result = new_do_body param, cmpstmt, line
                      self.env.unextend
                      lexer.cmdarg.restore cmdarg
                    
    result
end

def _reduce_453(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 455 omitted

# reduce 456 omitted

def _reduce_457(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_458(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 468 omitted

def _reduce_469(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_470(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_479(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 481 omitted

def _reduce_482(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_487(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_493(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_494(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_496(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_502(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_503(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = EXPR_BEG
                    
    result
end

def _reduce_505(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_506(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_507(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_508(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1].to_sym
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      lexer.lex_state = EXPR_END
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 517 omitted

def _reduce_518(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_529(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_530(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_531(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_532(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_533(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_534(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_535(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_536(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_537(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_539(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_540(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_541(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                      lexer.command_start = true
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = EXPR_BEG
                      self.lexer.command_start = true
                    
    result
end

def _reduce_545(val, _values, result)
                      result = self.in_kwarg
                      self.in_kwarg = true
                      self.lexer.lex_state |= EXPR_LABEL
                    
    result
end

def _reduce_546(val, _values, result)
                      kwarg, args, _ = val

                      self.in_kwarg = kwarg
                      result = args
                      lexer.lex_state     = EXPR_BEG
                      lexer.command_start = true
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      result = args val
                    
    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_553(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_554(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_555(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_556(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_557(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_558(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_559(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_560(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_561(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_562(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_564(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_565(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_568(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_569(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_570(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_571(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_577(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_578(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_581(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_582(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_583(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      result = args val
                    
    result
end

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      name = val[1].to_sym
                      self.assignable name
                      result = :"**#{name}"
                    
    result
end

def _reduce_591(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_592(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_593(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

def _reduce_600(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_601(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 602 omitted

# reduce 603 omitted

def _reduce_604(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_605(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_606(val, _values, result)
                      result = nil
                    
    result
end

# reduce 607 omitted

def _reduce_608(val, _values, result)
                      lexer.lex_state = EXPR_BEG
                    
    result
end

def _reduce_609(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_610(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_611(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 612 omitted

def _reduce_613(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_614(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_615(val, _values, result)
                      (label, _), arg = val
                      result = s(:array, s(:lit, label.to_sym), arg)
                    
    result
end

def _reduce_616(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_617(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

# reduce 628 omitted

# reduce 629 omitted

# reduce 630 omitted

# reduce 631 omitted

# reduce 632 omitted

# reduce 633 omitted

# reduce 634 omitted

# reduce 635 omitted

# reduce 636 omitted

# reduce 637 omitted

# reduce 638 omitted

# reduce 639 omitted

# reduce 640 omitted

# reduce 641 omitted

# reduce 642 omitted

def _reduce_643(val, _values, result)
 yyerrok 
    result
end

# reduce 644 omitted

# reduce 645 omitted

def _reduce_646(val, _values, result)
 yyerrok 
    result
end

def _reduce_647(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby23Parser
